<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rsync+inotify实时备份</title>
      <link href="/2022/09/07/Rsync-inotify%E5%AE%9E%E6%97%B6%E5%A4%87%E4%BB%BD/"/>
      <url>/2022/09/07/Rsync-inotify%E5%AE%9E%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F5793257-e9d6150d3f228ea3.png&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1665126772&t=8632cd4b13c3b5982d5869e689f28f23" alt="img" style="zoom: 50%;"><a id="more"></a><h1 id="安装inotify"><a href="#安装inotify" class="headerlink" title="安装inotify"></a>安装inotify</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install inotify -y</span><br><span class="line">inotifywait -h</span><br><span class="line">inotifywatch -h</span><br></pre></td></tr></table></figure><h1 id="安装rsync"><a href="#安装rsync" class="headerlink" title="安装rsync"></a>安装rsync</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为是在自己本地做测试,做一个自己的登录免密</span></span><br><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id -i 10.0.3.26</span><br></pre></td></tr></table></figure><h1 id="编写脚本实现同步"><a href="#编写脚本实现同步" class="headerlink" title="编写脚本实现同步"></a>编写脚本实现同步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim miner_dir_backup.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">dst_ip=<span class="string">'10.0.3.26'</span></span><br><span class="line">src_dir=<span class="string">'/home/caslx/disk_md0/lotusminer'</span></span><br><span class="line">dst_dir=<span class="string">'/home/caslx/disk_md0/nfs_storage/backup/lotusminer'</span></span><br><span class="line"></span><br><span class="line">inotifywait -mrq --format <span class="string">'%w%f'</span> -e modify,delete,create,attrib <span class="variable">$&#123;src_dir&#125;</span> \</span><br><span class="line">| <span class="keyword">while</span> <span class="built_in">read</span> file</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -e <span class="variable">$file</span> ];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        ssh <span class="variable">$&#123;dst_ip&#125;</span> rm -rf <span class="variable">$&#123;dst_dir&#125;</span>/`basename <span class="variable">$&#123;file&#125;</span>` &amp;&gt;/dev/null</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        rsync -avz --progress <span class="variable">$&#123;file&#125;</span> caslx@<span class="variable">$&#123;dst_ip&#125;</span>:<span class="variable">$&#123;dst_dir&#125;</span>/`basename <span class="variable">$&#123;file&#125;</span>` &amp;&gt;/dev/null</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">nohup bash miner_dir_backup.sh &amp;</span><br></pre></td></tr></table></figure><h1 id="zabbix监控实时备份状态"><a href="#zabbix监控实时备份状态" class="headerlink" title="zabbix监控实时备份状态"></a>zabbix监控实时备份状态</h1><blockquote><p>  编写脚本判断是否实时同步，将状态写入到指定文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 检查备份目录是否同步正常</span></span><br><span class="line"></span><br><span class="line">time=`date <span class="string">"+%Y-%m-%d %H:%M:%S"</span>`</span><br><span class="line"></span><br><span class="line">src_dir=<span class="string">'/home/caslx/disk_md0/lotusminer'</span></span><br><span class="line">dst_dir=<span class="string">'/home/caslx/disk_md0/nfs_storage/backup/lotusminer'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;time&#125;</span> &gt;&gt; <span class="variable">$&#123;src_dir&#125;</span>/check.txt</span><br><span class="line"></span><br><span class="line">sleep 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断校验文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$&#123;dst_dir&#125;</span>/check.txt ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 如果不存在输出0</span></span><br><span class="line">    <span class="built_in">echo</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># 判断校验文件的内容是否同步过去</span></span><br><span class="line">    num=grep <span class="string">"<span class="variable">$&#123;time&#125;</span>"</span> <span class="variable">$&#123;dst_dir&#125;</span>/check.txt | wc -l</span><br><span class="line">    <span class="comment"># 如果没有同步过去,输出0</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;num&#125;</span> -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="comment"># 同步过去输出1</span></span><br><span class="line">        <span class="built_in">echo</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>  编辑zabbix-agent配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断目录实时同步状态</span></span><br><span class="line">UserParameter=miner_dir_sync_status,/usr/bin/bash /home/caslx/zabbix/scripts/zabbix_agent_run_scripts/check_miner_dir_backup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启agent服务</span></span><br><span class="line">systemctl restart zabbix-agent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 赋予check.txt权限</span></span><br><span class="line">chmod 777 /home/caslx/disk_md0/lotusminer/check.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据备份 </category>
          
          <category> Rsync+inotify </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rsync </tag>
            
            <tag> inotify </tag>
            
            <tag> 数据备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep的使用方法</title>
      <link href="/2022/09/06/grep%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/09/06/grep%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F14160274187%2F641&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1665126848&t=4445f5e989560d99a4c9f27203642129" alt="img"></p><a id="more"></a><h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><p><strong>可选参数:</strong></p><ul><li>-c 统计匹配行的个数</li><li>-i 忽略大小写匹配</li><li>-n 显示匹配行行号</li><li>-x 显示完全匹配的行</li><li>-v 取反</li><li>-A 匹配行的后多少行</li><li>-B 匹配行的前多少行</li><li>-E 扩展正则</li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>命令格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [可选参数] <span class="string">"[被过滤字符串]"</span> [文件名称]</span><br></pre></td></tr></table></figure><h2 id="c-统计匹配行的个数"><a href="#c-统计匹配行的个数" class="headerlink" title="-c 统计匹配行的个数"></a>-c 统计匹配行的个数</h2><ul><li>样例文本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  cat a.txt</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">world</span><br><span class="line">world</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><ul><li>演示案例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  grep -c <span class="string">"hello"</span> a.txt</span><br><span class="line">4</span><br><span class="line"> ~/grep  grep -c <span class="string">"world"</span> a.txt</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="i-忽略大小写匹配"><a href="#i-忽略大小写匹配" class="headerlink" title="-i 忽略大小写匹配"></a>-i 忽略大小写匹配</h2><ul><li>样例文本</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  cat b.txt</span><br><span class="line">hello</span><br><span class="line">Hello</span><br><span class="line">hello</span><br><span class="line">World</span><br><span class="line">World</span><br><span class="line">world</span><br><span class="line">HELLO</span><br><span class="line">WORLD</span><br></pre></td></tr></table></figure><ul><li>演示案例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  grep -i <span class="string">"HELLO"</span> b.txt</span><br><span class="line">hello</span><br><span class="line">Hello</span><br><span class="line">hello</span><br><span class="line">HELLO</span><br><span class="line"> ~/grep  grep -i <span class="string">"hello"</span> b.txt</span><br><span class="line">hello</span><br><span class="line">Hello</span><br><span class="line">hello</span><br><span class="line">HELLO</span><br><span class="line"> ~/grep  grep -i <span class="string">"World"</span> b.txt</span><br><span class="line">World</span><br><span class="line">World</span><br><span class="line">world</span><br><span class="line">WORLD</span><br><span class="line"> ~/grep  grep -i <span class="string">"worLD"</span> b.txt</span><br><span class="line">World</span><br><span class="line">World</span><br><span class="line">world</span><br><span class="line">WORLD</span><br></pre></td></tr></table></figure><h2 id="n-显示匹配行行号"><a href="#n-显示匹配行行号" class="headerlink" title="-n 显示匹配行行号"></a>-n 显示匹配行行号</h2><ul><li>样例文本</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  cat b.txt</span><br><span class="line">hello</span><br><span class="line">Hello</span><br><span class="line">hello</span><br><span class="line">World</span><br><span class="line">World</span><br><span class="line">world</span><br><span class="line">HELLO</span><br><span class="line">WORLD</span><br></pre></td></tr></table></figure><ul><li>演示案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  grep -n <span class="string">"world"</span> b.txt</span><br><span class="line"><span class="number">6</span>:world</span><br><span class="line"> ~/grep  grep -n <span class="string">"hello"</span> b.txt</span><br><span class="line"><span class="number">1</span>:hello</span><br><span class="line"><span class="number">3</span>:hello</span><br><span class="line"> ~/grep  grep -n <span class="string">"world"</span> b.txt</span><br><span class="line"><span class="number">6</span>:world</span><br><span class="line"> ~/grep  grep -n <span class="string">"HELLO"</span> b.txt</span><br><span class="line"><span class="number">7</span>:HELLO</span><br></pre></td></tr></table></figure><h2 id="x-显示完全匹配的行"><a href="#x-显示完全匹配的行" class="headerlink" title="-x 显示完全匹配的行"></a>-x 显示完全匹配的行</h2><ul><li>样例文本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  cat c.txt</span><br><span class="line">hello</span><br><span class="line">HELLO</span><br><span class="line">helloworld</span><br><span class="line">HelloWorld</span><br><span class="line">HELLOWORLD</span><br></pre></td></tr></table></figure><ul><li>演示案例</li></ul><blockquote><p>  可以观察到,只能显示出完全匹配的行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  grep -x <span class="string">"hello"</span> c.txt</span><br><span class="line">hello</span><br><span class="line">~/grep  grep -x <span class="string">"HELLO"</span> c.txt</span><br><span class="line">HELLO</span><br><span class="line"> ~/grep  grep -x <span class="string">"HELLOWORLD"</span> c.txt</span><br><span class="line">HELLOWORLD</span><br><span class="line"> ~/grep  grep -x <span class="string">"HelloWorld"</span> c.txt</span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure><h2 id="v-取反"><a href="#v-取反" class="headerlink" title="-v 取反"></a>-v 取反</h2><ul><li>样例文本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  cat c.txt</span><br><span class="line">hello</span><br><span class="line">HELLO</span><br><span class="line">helloworld</span><br><span class="line">HelloWorld</span><br><span class="line">HELLOWORLD</span><br></pre></td></tr></table></figure><ul><li>演示案例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  grep -v <span class="string">"hello"</span> c.txt</span><br><span class="line">HELLO</span><br><span class="line">HelloWorld</span><br><span class="line">HELLOWORLD</span><br><span class="line"> ~/grep  grep -v <span class="string">"world"</span> c.txt</span><br><span class="line">hello</span><br><span class="line">HELLO</span><br><span class="line">HelloWorld</span><br><span class="line">HELLOWORLD</span><br></pre></td></tr></table></figure><blockquote><p>  上面的演示结果是区分大小写的,下面加上<code>-i</code>参数使其不区分大小写</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  grep -iv <span class="string">"world"</span> c.txt</span><br><span class="line">hello</span><br><span class="line">HELLO</span><br></pre></td></tr></table></figure><h2 id="A-amp-B-匹配行的后多少行"><a href="#A-amp-B-匹配行的后多少行" class="headerlink" title="-A&amp;-B 匹配行的后多少行"></a>-A&amp;-B 匹配行的后多少行</h2><blockquote><p>  -B 和 -A 在某些情况下还是比较有用的,例如在排查日志时,可能就会需要查看指定字段的上下几行来定位程序的错误原因</p></blockquote><ul><li>样例文本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  cat d.txt</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line">g</span><br><span class="line">h</span><br><span class="line">i</span><br><span class="line">j</span><br><span class="line">k</span><br><span class="line">l</span><br><span class="line">m</span><br><span class="line">n</span><br></pre></td></tr></table></figure><ul><li>演示案例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -A</span></span><br><span class="line">~/grep  grep -A 3 <span class="string">"g"</span> d.txt</span><br><span class="line">g</span><br><span class="line">h</span><br><span class="line">i</span><br><span class="line">j</span><br><span class="line"> ~/grep  grep -A 3 <span class="string">"c"</span> d.txt</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line"></span><br><span class="line"><span class="comment"># -B</span></span><br><span class="line"> ~/grep  grep -B 3 <span class="string">"g"</span> d.txt</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line">g</span><br><span class="line"> ~/grep  grep -B 3 <span class="string">"k"</span> d.txt</span><br><span class="line">h</span><br><span class="line">i</span><br><span class="line">j</span><br><span class="line">k</span><br></pre></td></tr></table></figure><h2 id="E-正则表达式"><a href="#E-正则表达式" class="headerlink" title="-E 正则表达式"></a>-E 正则表达式</h2><blockquote><p>  这里直接看下面”正则表达式”中的演示案例</p></blockquote><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote><p>  正则表达式的一些基础知识就不在这篇文章中讲解了,若想深入了解可以参考我的另一篇博客”正则表达式”.</p></blockquote><p>这里只举几个简单的例子来让你快速了解上手</p><p>以下三个符号表示匹配的次数</p><ul><li>*:<code>零次或多次</code>匹配前面的字符或表达式</li><li>+:<code>一次或多次匹</code>配前面的字符或表达式</li><li>?:<code>零次或一次</code>匹配前面的字符或表达式</li></ul><p>还有一个特殊的符号”<code>.</code>“,可以表示除了换行符以外的任意字符</p><p>样本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ~/grep  cat demo.txt</span><br><span class="line">hello</span><br><span class="line">Hello</span><br><span class="line">HelloWorld</span><br><span class="line">abcdefg</span><br><span class="line">ABCDEFG</span><br><span class="line">ABcdEFg</span><br><span class="line">abbbbcccc</span><br><span class="line">aaaabbbccc</span><br><span class="line">aaa111bbb222</span><br></pre></td></tr></table></figure><p>演示案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配 he + 任意个数的字符</span></span><br><span class="line">~/grep  grep <span class="string">"he.*"</span> demo.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 he + 任意数量的英文小写字符</span></span><br><span class="line"> ~/grep  grep <span class="string">"he[a-z]*"</span> demo.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 he + 后面指定数量的英文小写字符</span></span><br><span class="line"> ~/grep  grep -Ex <span class="string">"he[a-z]&#123;3&#125;"</span> demo.txt</span><br><span class="line">hello</span><br><span class="line"> ~/grep  grep -Ex <span class="string">"he[a-z]&#123;2&#125;"</span> demo.txt<span class="comment"># 错误示范,找不到指定行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配全部为大写字母的行</span></span><br><span class="line"> ~/grep  grep -x <span class="string">"[A-Z]*"</span> demo.txt</span><br><span class="line">ABCDEFG</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 1到3个a &amp; 3个b的行</span></span><br><span class="line"> ~/grep  grep <span class="string">"a\&#123;1,3\&#125;b\&#123;3\&#125;.*"</span> demo.txt</span><br><span class="line">abbbbcccc</span><br><span class="line">aaaabbbccc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完全匹配 1到3个a &amp; 3个b的行</span></span><br><span class="line"> ~/grep  grep -x <span class="string">"a\&#123;1,3\&#125;b\&#123;3\&#125;.*"</span> demo.txt</span><br><span class="line">abbbbcccc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 h 开头的行</span></span><br><span class="line"> ~/grep  grep <span class="string">"^h.*"</span> demo.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 H 开头的行</span></span><br><span class="line"> ~/grep  grep <span class="string">"^H.*"</span> demo.txt</span><br><span class="line">Hello</span><br><span class="line">HelloWorld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 H开头 d结尾的行</span></span><br><span class="line"> ~/grep  grep <span class="string">"^H.*d$"</span> demo.txt</span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell命令记录</title>
      <link href="/2022/09/05/shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/09/05/shell%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="如何去除shell中字符串的首尾字符"><a href="#如何去除shell中字符串的首尾字符" class="headerlink" title="如何去除shell中字符串的首尾字符"></a>如何去除shell中字符串的首尾字符</h1><p>参考链接:</p><ul><li><a href="https://blog.csdn.net/weixin_28746207/article/details/116606020" target="_blank" rel="noopener">https://blog.csdn.net/weixin_28746207/article/details/116606020</a></li></ul><p>例如当前有如下变量,值为字符串:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var="[[&#123;"/": "bafy2bzacea3buvu24ws5r2juchuwrhkbqbym6blkqyccw52adzvzvx4vrpjx4"&#125;,&#123;"/": "bafy2bzacedo3v6yrjslwrinrjtsiajuol2iht2tm5mywzjnbwuhwa3bkcdijk"&#125;]]"</span><br></pre></td></tr></table></figure><p>我们想要去掉<code>var</code>变量的首个字符<code>[</code>和结尾字符<code>]</code>,其实可以这样做:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var=`echo $&#123;var:1:-1&#125;`</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"/": "bafy2bzacea3buvu24ws5r2juchuwrhkbqbym6blkqyccw52adzvzvx4vrpjx4"&#125;,&#123;"/": "bafy2bzacedo3v6yrjslwrinrjtsiajuol2iht2tm5mywzjnbwuhwa3bkcdijk"&#125;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记</title>
      <link href="/2022/06/02/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/02/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic.wangt.cc%2Fdownload%2Fpic_router.php%3Fpath%3Dhttps%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F830ee8c79a676e7fb59f28d60bc1556a.png&refer=http%3A%2F%2Fpic.wangt.cc&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1665126986&t=c0c20c712cc14c9e362292f463098285" alt="img" style="zoom:60%;"><a id="more"></a><h1 id="Golang语言简介"><a href="#Golang语言简介" class="headerlink" title="Golang语言简介"></a>Golang语言简介</h1><h2 id="图标上的动物"><a href="#图标上的动物" class="headerlink" title="图标上的动物"></a>图标上的动物</h2><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2tvjag3dej20u014u770.jpg" alt="img" style="zoom:15%;"><p>这个动物叫做<code>金花鼠</code>,英文名称为<code>gordon</code></p><h2 id="Go语言的由来"><a href="#Go语言的由来" class="headerlink" title="Go语言的由来"></a>Go语言的由来</h2><p><strong>目的:</strong> 用更少的代码，更短的编译时间，创建运行更快的程序，享受更多的乐趣。</p><p>Go 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的研发工作。该项目的三位领导者均是著名的 IT 工程师：Robert Griesemer，参与开发 Java HotSpot 虚拟机；Rob Pike，Go 语言项目总负责人，贝尔实验室 Unix 团队成员，参与的项目包括 Plan 9，Inferno 操作系统和 Limbo 编程语言；Ken Thompson，贝尔实验室 Unix 团队成员，C 语言、Unix 和 Plan 9 的创始人之一，与 Rob Pike 共同开发了 UTF-8 字符集规范。自 2008 年 1 月起，Ken Thompson 就开始研发一款以 C 语言为目标结果的编译器来拓展 Go 语言的设计思想。</p><blockquote><p>  <strong>这是一个由计算机领域 “发明之父” 所组成的黄金团队，他们对系统编程语言，操作系统和并行都有着非常深刻的见解</strong></p></blockquote><p>在 2008 年年中，Go 语言的设计工作接近尾声，一些员工开始以全职工作状态投入到这个项目的编译器和运行实现上。Ian Lance Taylor 也加入到了开发团队中，并于 2008 年 5 月创建了一个 gcc 前端。</p><p>Russ Cox 加入开发团队后着手语言和类库方面的开发，也就是 Go 语言的标准包。在 2009 年 10 月 30 日，Rob Pike 以 Google Techtalk 的形式第一次向人们宣告了 Go 语言的存在。</p><p>直到 2009 年 11 月 10 日，开发团队将 Go 语言项目以 BSD-style 授权（完全开源）正式公布了 Linux 和 Mac OS X 平台上的版本。Hector Chu 于同年 11 月 22 日公布了 Windows 版本。</p><p>作为一个开源项目，Go 语言借助开源社区的有生力量达到快速地发展，并吸引更多的开发者来使用并改善它。自该开源项目发布以来，超过 200 名非谷歌员工的贡献者对 Go 语言核心部分提交了超过 1000 个修改建议。在过去的 18 个月里，又有 150 开发者贡献了新的核心代码。这俨然形成了世界上最大的开源团队，并使该项目跻身 Ohloh 前 2% 的行列。大约在 2011 年 4 月 10 日，谷歌开始抽调员工进入全职开发 Go 语言项目。开源化的语言显然能够让更多的开发者参与其中并加速它的发展速度。Andrew Gerrand 在 2010 年加入到开发团队中成为共同开发者与支持者。</p><p>在 Go 语言在 2010 年 1 月 8 日被 Tiobe（闻名于它的编程语言流行程度排名）宣布为 “2009 年年度语言” 后，引起各界很大的反响。目前 Go 语言在这项排名中的最高记录是在 2017 年 1 月创下的第13名，流行程度 2.325%。</p><ul><li>时间轴：</li></ul><blockquote><ul><li>2007 年 9 月 21 日：雏形设计</li><li>2009 年 11 月 10日：首次公开发布</li><li>2010 年 1 月 8 日：当选 2009 年年度语言</li><li>2010 年 5 月：谷歌投入使用</li><li>2011 年 5 月 5 日：Google App Engine 支持 Go 语言</li></ul></blockquote><p>从 2010 年 5 月起，谷歌开始将 Go 语言投入到后端基础设施的实际开发中，例如开发用于管理后端复杂环境的项目。有句话叫 “吃你自己的狗食”，这也体现了谷歌确实想要投资这门语言，并认为它是有生产价值的。</p><p>Go 语言的官方网站是 golang.org，这个站点采用 Python 作为前端，并且使用 Go 语言自带的工具 godoc 运行在 Google App Engine 上来作为 Web 服务器提供文本内容。在官网的首页有一个功能叫做 Go Playground，是一个 Go 代码的简单编辑器的沙盒，它可以在没有安装 Go 语言的情况下在你的浏览器中编译并运行 Go，它提供了一些示例，其中包括国际惯例 “Hello, World!”。</p><h2 id="Go语言的特点"><a href="#Go语言的特点" class="headerlink" title="Go语言的特点"></a>Go语言的特点</h2><ol><li><p>从 C 语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等 等，也保留了和 C 语言一样的编译执行方式及弱化的指针<br> <strong>举一个案例(体验):</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go 语言的指针的使用特点(体验) </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testPtr</span><span class="params">(num *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    *num = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入包的概念，用于组织程序结构，Go 语言的一个文件都要归属于一个包，而不能单独存在。</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main<span class="comment">//一个go文件需要在一个包里</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>垃圾回收机制，内存自动回收，不需开发人员管理</p></li><li><p>天然并发 (重要特点)<br> (1) 从语言层面支持并发，实现简单<br> (2) goroutine，轻量级线程，可实现大并发处理，高效利用多核。<br> (3) 基于 CPS 并发模型(Communicating Sequential Processes )实现</p></li><li><p>吸收了管道通信机制，形成 Go 语言特有的管道 channel 通过管道 channel , 可以实现不同的 goroute 之间的相互通信。</p></li><li><p>函数可以返回多个值。举例: //写一个函数，实现同时返回 和，差</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go 函数支持返回多个值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSumAndSub</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span> )</span></span> &#123;</span><br><span class="line">    sum := n1 + n2 <span class="comment">//go 语句后面不要带分号. </span></span><br><span class="line">    sub := n1 - n2</span><br><span class="line">    <span class="keyword">return</span> sum , sub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新的创新:比如切片 slice、延时执行 defer</p></li></ol><h1 id="Golang环境配置"><a href="#Golang环境配置" class="headerlink" title="Golang环境配置"></a>Golang环境配置</h1><h2 id="Mac-下搭建-Go-开发环境-安装和配置-SDK"><a href="#Mac-下搭建-Go-开发环境-安装和配置-SDK" class="headerlink" title="Mac 下搭建 Go 开发环境-安装和配置 SDK"></a>Mac 下搭建 Go 开发环境-安装和配置 SDK</h2><h3 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h3><p>安装包名称: <code>go1.9.2.darwin-amd64.tar.gz</code></p><p>链接: <a href="https://pan.baidu.com/s/19GZeuyrJl8B7nByqtk5FDQ" target="_blank" rel="noopener">https://pan.baidu.com/s/19GZeuyrJl8B7nByqtk5FDQ</a> 提取码: 4cqv</p><p>上传位置: Mac 一般放在用户目录下 <code>go_dev/go</code> 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> ~ mkdir -p go_dev/go</span><br><span class="line"> ~ cd go_dev/go</span><br><span class="line"> ~/go_dev/go ls</span><br><span class="line">go1.9.2.darwin-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压压缩包</span></span><br><span class="line"> ~/go_dev/go tar xf go1.9.2.darwin-amd64.tar.gz</span><br><span class="line"> ~/go_dev/go ls</span><br><span class="line">go                          go1.9.2.darwin-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"> ~/go_dev/go ls go</span><br><span class="line">AUTHORS         CONTRIBUTORS    PATENTS         VERSION         bin             doc             lib             pkg             src</span><br><span class="line">CONTRIBUTING.md LICENSE         README.md       api             blog            favicon.ico     misc            robots.txt      test</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2u7ztpmyqj21pc0l679g.jpg" alt="image-20220602212849223"></p><h3 id="Mac-下配置-Golang-环境变量"><a href="#Mac-下配置-Golang-环境变量" class="headerlink" title="Mac 下配置 Golang 环境变量"></a>Mac 下配置 Golang 环境变量</h3><p>使用 root 用户，修改 /etc/profile 增加环境变量的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~ sudo vim /etc/profile</span><br><span class="line"><span class="comment"># 最下方添加如下内容</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="variable">$HOME</span>/go_dev/go/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/goproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置立即生效</span></span><br><span class="line">~ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看golang版本</span></span><br><span class="line">~ go version</span><br><span class="line">go version go1.9.2 darwin/amd64</span><br></pre></td></tr></table></figure><h1 id="Mac下如何开发Go程序"><a href="#Mac下如何开发Go程序" class="headerlink" title="Mac下如何开发Go程序"></a>Mac下如何开发Go程序</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>打开VSCode,创建对应的目录</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2v10t7f6cj21em0f2wgg.jpg" alt="image-20220603141311064"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成可执行文件并运行"><a href="#生成可执行文件并运行" class="headerlink" title="生成可执行文件并运行"></a>生成可执行文件并运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ~  cd goproject/src/go_code/project01/main</span><br><span class="line"> ~/goproject/src/go_code/project01/main  ls</span><br><span class="line">hello.go</span><br><span class="line"> ~/goproject/src/go_code/project01/main  go build hello.go</span><br><span class="line"> ~/goproject/src/go_code/project01/main  ls</span><br><span class="line">hello    hello.go</span><br><span class="line"> ~/goproject/src/go_code/project01/main  ./hello</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2v12urqn7j20tq0bggnz.jpg" alt="image-20220603141508417" style="zoom: 50%;"><p>我们也可以使用<code>-o</code>指定当前生成的二进制文件的名称</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/goproject/src/go_code/project01/main  <span class="keyword">go</span> build -o hello1 hello.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>生成linux平台可执行的二进制文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 go build -o hello1 hello.go</span><br></pre></td></tr></table></figure><h2 id="直接运行Go文件"><a href="#直接运行Go文件" class="headerlink" title="直接运行Go文件"></a>直接运行Go文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ~/goproject/src/go_code/project01/main  go run hello.go</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2v14wsgypj20tq03et95.jpg" alt="image-20220603141707130" style="zoom:50%;"><h1 id="Go开发须知"><a href="#Go开发须知" class="headerlink" title="Go开发须知"></a>Go开发须知</h1><h2 id="Go程序开发的注意事项"><a href="#Go程序开发的注意事项" class="headerlink" title="Go程序开发的注意事项"></a>Go程序开发的注意事项</h2><p>1) Go 源文件以 “go” 为扩展名。<br>2) Go应用程序的执行入口是main()函数。这个是和其它编程语言(比如java/c)<br>3) Go语言严格区分大小写。<br>4) Go方法由一条条语句构成，每个语句后不需要分号(Go语言会在每行后自动加分号)，这也体现出 Golang 的简洁性。<br>5) Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错<br>6) Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过。<br>7) 大括号都是成对出现的，缺一不可。</p><h2 id="Go-语言的转义字符-escape-char"><a href="#Go-语言的转义字符-escape-char" class="headerlink" title="Go 语言的转义字符(escape char)"></a>Go 语言的转义字符(escape char)</h2><p>说明:常用的转义字符有如下:<br>1) \t : 表示一个制表符，通常使用它可以排版。<br>1) \n :换行符<br>3) \ :一个<br>4) &quot; :一个”<br>5) \r :一个回车 fmt.Println(“天龙八部雪山飞狐\r 张飞”);</p><p><strong>举例:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span> <span class="comment">//fmt 包中提供格式化，输出，输入的函数.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//要求:要求:请使用一句输出语句，达到输入如下图形的效果</span></span><br><span class="line">fmt.Println(<span class="string">"姓名\t 年龄\t 籍贯\t 地址\njohn\t20\t 河北\t 北京"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下:</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2wbuueukpj20ou0943z9.jpg" alt="image-20220604171333256" style="zoom:50%;"><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Go中的注释分为行注释与块注释</p><p><strong>行注释:</strong><code>//</code></p><p><strong>块注释:</strong><code>/* 内容 */</code></p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>正确格式:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"hello,world!"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误格式:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"hello,world!"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  一行字符最长不超过 80 个字符，超过的请使用换行展示，尽量保持格式优雅</p></blockquote><h2 id="官方指南"><a href="#官方指南" class="headerlink" title="官方指南"></a>官方指南</h2><p>在线调试地址: <a href="https://go.dev/play/" target="_blank" rel="noopener">https://go.dev/play/</a></p><p>包使用查询: <a href="https://pkg.go.dev/" target="_blank" rel="noopener">https://pkg.go.dev/</a></p><h2 id="中文版在线标准库文档"><a href="#中文版在线标准库文档" class="headerlink" title="中文版在线标准库文档"></a>中文版在线标准库文档</h2><p>地址: <a href="https://studygolang.com/pkgdoc" target="_blank" rel="noopener">https://studygolang.com/pkgdoc</a></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="Golang变量使用的三种方式"><a href="#Golang变量使用的三种方式" class="headerlink" title="Golang变量使用的三种方式"></a>Golang变量使用的三种方式</h2><ul><li>第一种:指定变量类型，声明后若不赋值，使用默认值</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h381a55v43j21cx0u0n05.jpg" alt="image-20220614201426090"></p><ul><li>第二种:根据值自行判定变量类型(类型推导)</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h381cnkxwpj21br0u077c.jpg" alt="image-20220614201653849"></p><ul><li>第三种:省略 var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h381fj3xgaj21gv0u041q.jpg" alt="image-20220614201938837"></p><ul><li>多变量声明</li></ul><blockquote><p>  在编程中，有时我们需要一次性声明多个变量，Golang 也提供这样的语法</p></blockquote><p>举例说明:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h381pjqth6j21ho0u0wii.jpg" alt="image-20220614202917231"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//一次性声明多个变量</span></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="comment">// var n1, n2, n3 int</span></span><br><span class="line">    <span class="comment">// fmt.Println("n1=",n1, "n2=",n2, "n3=",n3)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式二</span></span><br><span class="line">    <span class="comment">// var n1, name, n3 = 100, "tom", 888</span></span><br><span class="line">    <span class="comment">// fmt.Println("n1=",n1, "name=", name, "n3=", n3)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式三</span></span><br><span class="line">    n1, name, n3 := <span class="number">100</span>, <span class="string">"tom~"</span>, <span class="number">888</span></span><br><span class="line">    fmt.Println(<span class="string">"n1="</span>,n1, <span class="string">"name="</span>, name, <span class="string">"n3="</span>, n3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何一次性声明多个<code>全局变量</code>【在 go 中函数外部定义变量就是全局变量】:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> n2 = <span class="number">200</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"jack"</span></span><br><span class="line"><span class="comment">//上面的声明方式,也可以改成一次性声明</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    n3 = <span class="number">300</span></span><br><span class="line">    n4 = <span class="number">900</span></span><br><span class="line">    name2 = <span class="string">"mary"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>该区域的数据值可以在同一类型范围内不断变化(重点)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量使用的注意事项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">20</span></span><br><span class="line">i = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"i="</span>, i)</span><br><span class="line">i = <span class="number">1.2</span> <span class="comment">// 这样写是错误的,不可以改变数据的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4434no1qij211m03a3z8.jpg" alt="image-20220712133621221"></p><ul><li>变量在同一个作用域(在一个函数或者在代码块)内不能重名</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量使用的注意事项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">20</span></span><br><span class="line">i = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"i="</span>, i)</span><br><span class="line"><span class="comment">//i = 1.2 // 这样写是错误的,不可以改变数据的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量在同一个作用域(在一个函数或者在代码块)内不能重名</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">66</span></span><br><span class="line">i := <span class="number">77</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h443enoc5ej20ew06mq2y.jpg" alt="image-20220712134606264" style="zoom:50%;"><ul><li>变量=变量名+值+数据类型，这一点请大家注意，变量的三要素</li><li>Golang 的变量如果没有赋初值，编译器会使用默认值, 比如 int 默认值 0,string 默认值为空串，小数默认为 0</li></ul><h2 id="变量的声明-初始化-赋值"><a href="#变量的声明-初始化-赋值" class="headerlink" title="变量的声明/初始化/赋值"></a>变量的声明/初始化/赋值</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p><strong>基本语法:</strong> <code>var 变量名 数据类型</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例子</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span><span class="comment">//声明一个int类型的变量 i,若不赋值,默认值为0</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span><span class="comment">//声明一个string类型的变量 s,若不赋值,默认值为""</span></span><br></pre></td></tr></table></figure><h3 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h3><p><strong>基本语法:</strong> <code>var 变量名 数据类型 = 值</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例子</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h3 id="给变量赋值"><a href="#给变量赋值" class="headerlink" title="给变量赋值"></a>给变量赋值</h3><blockquote><p>  先声明变量,再给变量赋值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//举例子</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">i = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面这种写法等于下面这种</span></span><br><span class="line">i := <span class="number">10</span> <span class="comment">//自动判断数值类型</span></span><br></pre></td></tr></table></figure><h2 id="号的使用"><a href="#号的使用" class="headerlink" title="+号的使用"></a>+号的使用</h2><ul><li><p>当左右两边都是数值型时，则做加法运算</p></li><li><p>当左右两边都是字符串，则做字符串拼接</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 数值相加</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line">j := <span class="number">2</span></span><br><span class="line">sum := i + j</span><br><span class="line">fmt.Println(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符拼接</span></span><br><span class="line">s1 := <span class="string">"hello"</span></span><br><span class="line">s2 := <span class="string">"world"</span></span><br><span class="line">s := s1 + s2</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4455m43qdj20x40hqn0b.jpg" alt="image-20220712144636767"></p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>int8</td><td>1字节</td><td>-128-127</td></tr><tr><td>int16</td><td>2字节</td><td>-2^15-2^15-1</td></tr><tr><td>int32</td><td>4字节</td><td>-2^31-2^31-1</td></tr><tr><td>int64</td><td>8字节</td><td>-2^63-2^63-1</td></tr></tbody></table><ul><li>其他整数类型</li></ul><table><thead><tr><th align="center">类型</th><th align="center">有无符号</th><th align="center">占用存储空间</th><th align="left">表数范围</th><th align="left">备注</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">有</td><td align="center">32位系统4个字节<br>64位系统8个字节</td><td align="left">-2^31 ~ 2^31-1<br>-2^63 ~ 2^63-1</td><td align="left"></td></tr><tr><td align="center">uint</td><td align="center">无</td><td align="center">32位系统4个字节<br>64位系统8个字节</td><td align="left">0 ~ 2^32-1<br>0 ~ 2^64-1</td><td align="left"></td></tr><tr><td align="center">rune</td><td align="center">有</td><td align="center">与int32一样</td><td align="left">-2^31 ~ 2^31-1</td><td align="left">等价int32,表示一个Unicode码</td></tr><tr><td align="center">byte</td><td align="center">无</td><td align="center">与uint8一样</td><td align="left">0 ~ 255</td><td align="left">当要存储字符时选用byte</td></tr></tbody></table><h4 id="整数型使用细节"><a href="#整数型使用细节" class="headerlink" title="整数型使用细节"></a>整数型使用细节</h4><ul><li>Golang 各整数类型分:有符号和无符号，int uint 的大小和系统有关。</li><li>Golang 的整型默认声明为 int 型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span> <span class="comment">//此时 i 是什么类型?</span></span><br><span class="line"><span class="comment">//查看数据类型</span></span><br><span class="line">fmt.Printf(<span class="string">"i的数据类型为 %T \n"</span>, i)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h445vqa759j20uk01mglv.jpg" alt="image-20220712151142979"></p><ul><li>如何在程序查看某个变量的字节大小和数据类型 (使用较多)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int64</span> = <span class="number">100</span> <span class="comment">//此时 i 是什么类型?</span></span><br><span class="line"><span class="comment">//查看数据类型</span></span><br><span class="line">fmt.Printf(<span class="string">"i的数据类型为 %T , 占用字节数为 %d\n"</span>, i, unsafe.Sizeof(i))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h445zb24g1j20ue01mgm0.jpg" alt="image-20220712151508731"></p><ul><li>Golang程序中整型变量在使用时，遵守保小不保大的原则，即:在保证程序正确运行下，尽量使用占用空间小的数据类型。【如:年龄】</li><li>bit: 计算机中的最小存储单位。byte:计算机中基本存储单元。[二进制再详细说] 1byte = 8 bit</li></ul><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><table><thead><tr><th align="center">类型</th><th align="center">占用存储空间</th><th align="center">表数范围</th></tr></thead><tbody><tr><td align="center">单精度float32</td><td align="center">4字节</td><td align="center">-3.403E38 ~ 3.403E38</td></tr><tr><td align="center">双精度float64</td><td align="center">8字节</td><td align="center">-1.798E308 ~ 1.798E308</td></tr></tbody></table><ul><li>关于浮点数在机器中存放形式的简单说明,浮点数=符号位+指数位+尾数位<br>说明:浮点数都是有符号的.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">float32</span> = <span class="number">12.34</span></span><br><span class="line"><span class="keyword">var</span> n1 <span class="keyword">float32</span> = <span class="number">-0.00089</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="keyword">float64</span> = <span class="number">-7809656.09</span></span><br><span class="line">fmt.Println(<span class="string">"i="</span>, i, <span class="string">"n1="</span>, n1, <span class="string">"n2="</span>, n2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4467n71tbj20ue01kwev.jpg" alt="image-20220712152309512"></p><ul><li>尾数部分可能丢失，造成精度损失。 -123.0000901</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="keyword">float32</span> = <span class="number">-123.0000901</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="keyword">float64</span> = <span class="number">-123.0000901</span></span><br><span class="line">fmt.Println(<span class="string">"n1="</span>, n1, <span class="string">"n2="</span>, n2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h446m91q3qj20u801gglx.jpg" alt="image-20220712153712369"></p><blockquote><p>   说明: float64 的精度比 float32 的要准确.如果我们要保存一个精度高的数，则应该选用 float64</p></blockquote><ul><li>浮点型的存储分为三部分:符号位+指数位+尾数位 在存储过程中，精度会有丢失</li></ul><h4 id="浮点型使用细节"><a href="#浮点型使用细节" class="headerlink" title="浮点型使用细节"></a>浮点型使用细节</h4><ul><li>Golang浮点类型有固定的范围和字段长度,不受具体OS(操作系统)的影响</li><li>Golang 的浮点型默认声明为 float64 类型。</li><li>浮点型常量有两种表示形式<ul><li>十进制数形式:如:5.12 .512 (必须有小数点) </li><li>科学计数法形式:如:5.1234e2 = 5.12 * 10 的 2 次方          5.12E-2 = 5.12/10 的 2 次方</li></ul></li><li>通常情况下，应该使用 float64 ，因为它比 float32 更精确。</li></ul><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><blockquote><p>  Golang 中没有专门的字符类型，如果要存储单个字符(字母)，一般使用 byte 来保存。<br>  字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。也 就是说对于传统的字符串是由字符组成的，而 Go 的字符串不同，它是由字节组成的。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">byte</span> = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> c2 <span class="keyword">byte</span> = <span class="string">'o'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们直接输出byte值,就是输出了对应的字符的码值</span></span><br><span class="line">fmt.Println(<span class="string">"c1="</span>, c1)</span><br><span class="line">fmt.Println(<span class="string">"c2="</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要输出对应的字符,需要使用格式化输出</span></span><br><span class="line">fmt.Printf(<span class="string">"c1=%c, c2=%c"</span>, c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c3 <span class="keyword">byte</span> = <span class="string">"北"</span> <span class="comment">//报错,overflow溢出</span></span><br><span class="line">fmt.Printf(<span class="string">"c3=%c, 对应的码值为%d"</span>, c3, c3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4479bm0gvj211402kwf9.jpg" alt="image-20220712155922714"></p><p>对上面代码说明:</p><p>1) 如果我们保存的字符在 ASCII 表的,比如[0-1, a-z,A-Z..]直接可以保存到 byte<br>2) 如果我们保存的字符对应码值大于 255,这时我们可以考虑使用 int 类型保存<br>3) 如果我们需要安装字符的方式输出，这时我们需要格式化输出，即 fmt.Printf(“%c”, c1).</p><h4 id="字符类型使用细节"><a href="#字符类型使用细节" class="headerlink" title="字符类型使用细节"></a>字符类型使用细节</h4><p>1) 字符常量是用单引号(‘’)括起来的单个字符。例如:var c1 byte = ‘a’ var c2 int = ‘中’ var c3 byte = ‘9’<br>2) Go 中允许使用转义字符 ‘\’来将其后的字符转变为特殊字符型常量。例如:var c3 char = ‘\n’ // ‘\n’表示换行符<br>3) Go 语言的字符使用 UTF-8 编码 ，如果想查询字符对应的 utf8 码值 <a href="http://www.mytju.com/classcode/tools/encode_utf8.asp" target="_blank" rel="noopener">http://www.mytju.com/classcode/tools/encode_utf8.asp</a><br>    英文字母-1个字节 汉字-3个字节<br>4) 在 Go 中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8 编码的码值。<br>5) 可以直接给某个变量赋一个数字，然后按格式化输出时%c，会输出该数字对应的 unicode 字符<br>6) 字符类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码.</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li><p>布尔类型也叫 bool 类型，bool 类型数据只允许取值 true 和 false</p></li><li><p>bool类型占1个字节。</p></li><li><p>bool 类型适于逻辑运算，一般用于程序流程控制</p></li></ul><h3 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h3><blockquote><p>  字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本</p></blockquote><ul><li><p>Go语言的字符串的字节使用UTF-8编码标识Unicode文本，这样Golang统一使用UTF-8编码,中文 乱码问题不会再困扰程序员。</p></li><li><p>字符串一旦赋值了，字符串就不能修改了:在 Go 中字符串是不可变的。</p></li><li><p>字符串的两种表示形式:<br>(1) 双引号, 会识别转义字符<br>(2) 反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果</p></li><li><p>字符串拼接方式</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"hello"</span> + <span class="string">"world"</span></span><br><span class="line">str += <span class="string">"haha"</span></span><br></pre></td></tr></table></figure><ul><li>当一行字符串太长时，需要使用到多行字符串，可以如下处理</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 结尾需要跟上 + 号,才能跟下一行拼接</span></span><br><span class="line"><span class="keyword">var</span> s1 <span class="keyword">string</span> = <span class="string">"hello "</span> + <span class="string">"world "</span> + <span class="string">"I "</span> + <span class="string">"am "</span> +</span><br><span class="line"><span class="string">"chinese\n"</span></span><br><span class="line">fmt.Println(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本数据类型的默认值"><a href="#基本数据类型的默认值" class="headerlink" title="基本数据类型的默认值"></a>基本数据类型的默认值</h3><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>整型</td><td>0</td></tr><tr><td>浮点型</td><td>0</td></tr><tr><td>字符串</td><td>“”</td></tr><tr><td>布尔类型</td><td>false</td></tr></tbody></table><h3 id="基本数据类型的相互转换"><a href="#基本数据类型的相互转换" class="headerlink" title="基本数据类型的相互转换"></a>基本数据类型的相互转换</h3><blockquote><p>  Golang 和 java / c 不同，Go 在不同类型的变量之间赋值时需要显式转换。也就是说 Golang 中数 据类型不能自动转换。</p></blockquote><ul><li>表达式 T(v) 将值 v 转换为类型 T<ul><li>T: 就是数据类型，比如 int32，int64，float32 等等 </li><li>v: 就是需要转换的变量</li></ul></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1) Go中，数据类型的转换可以是从表示范围小–&gt;表示范围大，也可以范围大—&gt;范围小<br>2) 被转换的是变量存储的数据(即值)，变量本身的数据类型并没有变化!<br>3) 在转换中，比如将 int64 转成 int8 【-128—127】 ，编译时不会报错，只是转换的结果是按 溢出处理，和我们希望的结果不一样。 因此在转换时，需要考虑范围.</p><h3 id="基本数据类型转换为string"><a href="#基本数据类型转换为string" class="headerlink" title="基本数据类型转换为string"></a>基本数据类型转换为string</h3><h4 id="方式一-fmt-Sprintf"><a href="#方式一-fmt-Sprintf" class="headerlink" title="方式一:fmt.Sprintf"></a>方式一:fmt.Sprintf</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> num1 <span class="keyword">int64</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="keyword">float64</span> = <span class="number">10.12</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> char <span class="keyword">byte</span> = <span class="string">'h'</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">str = fmt.Sprintf(<span class="string">"%d"</span>, num1)</span><br><span class="line">fmt.Printf(<span class="string">"str Type %T, str=%q\n"</span>, str, str)</span><br><span class="line"></span><br><span class="line">str = fmt.Sprintf(<span class="string">"%f"</span>, num2)</span><br><span class="line">fmt.Printf(<span class="string">"str Type %T, str=%q\n"</span>, str, str)</span><br><span class="line"></span><br><span class="line">str = fmt.Sprintf(<span class="string">"%t"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"str Type %T, str=%q\n"</span>, str, str)</span><br><span class="line"></span><br><span class="line">str = fmt.Sprintf(<span class="string">"%c"</span>, char)</span><br><span class="line">fmt.Printf(<span class="string">"str Type %T, str=%q\n"</span>, str, str)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h448yn0ifuj20vq040wf5.jpg" alt="image-20220712165818290"></p><h4 id="方式二-strconv"><a href="#方式二-strconv" class="headerlink" title="方式二:strconv"></a>方式二:strconv</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="keyword">var</span> num3 <span class="keyword">int32</span> = <span class="number">99</span></span><br><span class="line"><span class="keyword">var</span> num4 <span class="keyword">float32</span> = <span class="number">12.3456</span></span><br><span class="line"><span class="keyword">var</span> b2 <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">str = strconv.FormatInt(<span class="keyword">int64</span>(num3), <span class="number">10</span>)<span class="comment">//必须转换为64</span></span><br><span class="line">fmt.Printf(<span class="string">"str Type %T, str=%q\n"</span>, str, str)</span><br><span class="line"></span><br><span class="line">str = strconv.FormatFloat(<span class="keyword">float64</span>(num4), <span class="string">'f'</span>, <span class="number">10</span>, <span class="number">32</span>)<span class="comment">//必须转换为64</span></span><br><span class="line">fmt.Printf(<span class="string">"str Type %T, str=%q\n"</span>, str, str)</span><br><span class="line"></span><br><span class="line">str = strconv.FormatBool(b2)</span><br><span class="line">fmt.Printf(<span class="string">"str Type %T, str=%q\n"</span>, str, str)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h449ig4u1nj20wa06cgmq.jpg" alt="image-20220712171720242"></p><h3 id="string转换为基本数据类型"><a href="#string转换为基本数据类型" class="headerlink" title="string转换为基本数据类型"></a>string转换为基本数据类型</h3><blockquote><p>  strconv.Parsexxx</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"true"</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// strconv.ParseBool(str)会返回两个值(value bool, err error),我们不需要error信息</span></span><br><span class="line">b, _ = strconv.ParseBool(str)</span><br><span class="line">fmt.Printf(<span class="string">"b Type %T, b=%v\n"</span>, b, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 <span class="keyword">string</span> = <span class="string">"123456"</span></span><br><span class="line"><span class="keyword">var</span> num1 <span class="keyword">int64</span> <span class="comment">//必须为64才能被 strconv.ParseInt 识别</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="keyword">int</span></span><br><span class="line">num1, _ = strconv.ParseInt(str2, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">num2 = <span class="keyword">int</span>(num1)</span><br><span class="line">fmt.Printf(<span class="string">"num1 type %T, num1=%v\n"</span>, num1, num1)</span><br><span class="line">fmt.Printf(<span class="string">"num2 type %T, num2=%v\n"</span>, num2, num2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 <span class="keyword">string</span> = <span class="string">"123.456"</span></span><br><span class="line"><span class="keyword">var</span> f1 <span class="keyword">float64</span></span><br><span class="line">f1, _ = strconv.ParseFloat(str3, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">"f1 Type %T, f1=%v"</span>, f1, f1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>在将 String 类型转成 基本数据类型时，要确保 String 类型能够转成有效的数据，比如 我们可以 把 “123” , 转成一个整数，但是不能把 “hello” 转成一个整数，如果这样做，Golang 直接将其转成 0 ， 其它类型也是一样的道理. float =&gt; 0 bool =&gt; false</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li><p>基本数据类型，变量存的就是值，也叫值类型</p></li><li><p>获取变量的地址，用&amp;，比如: var num int, 获取 num 的地址:&amp;num<br>分析一下基本数据类型在内存的布局.</p></li><li><p>指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值 </p><p>比如:var ptr *int = &amp;num</p><p>举例说明:指针在内存的布局.</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"i的地址为="</span>, &amp;i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;i</span><br><span class="line">fmt.Printf(<span class="string">"ptr=%v\n"</span>, ptr)</span><br><span class="line">fmt.Printf(<span class="string">"ptr的地址=%v\n"</span>, &amp;ptr)</span><br><span class="line">fmt.Printf(<span class="string">"ptr指向的值=%v\n"</span>, *ptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h45g1ttklgj20iw042q3f.jpg" alt="image-20220713174905334" style="zoom:67%;"><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><p>1)   写一个程序，获取一个 int 变量 num 的地址，并显示到终端<br>2)   将 num 的地址赋给指针 ptr , 并通过 ptr 去修改 num 的值.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">9</span></span><br><span class="line">fmt.Println(<span class="string">"num="</span>, num)     <span class="comment">// 输出值</span></span><br><span class="line">fmt.Println(<span class="string">"num的地址="</span>, &amp;num) <span class="comment">// 输出地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过指针修改num的值为10</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span></span><br><span class="line">ptr = &amp;num</span><br><span class="line">*ptr = <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">"num="</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h45gf5bl4pj20j6038q36.jpg" alt="image-20220713180155567"></p><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><p>1) 值类型，都有对应的指针类型， 形式为 <code>*数据类型</code>，比如 int 的对应的指针就是 *int, float32 对应的指针类型就是 *float32, 依次类推。<br>2) 值类型包括:基本数据类型 <code>int 系列</code>,<code>float 系列</code>, <code>bool</code>, <code>string</code> 、<code>数组</code>和<code>结构体 struct</code></p><h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><p>1)   值类型:基本数据类型 int 系列, float 系列, bool, string 、数组和结构体 struct<br>2)   引用类型:指针、slice 切片、map、管道 chan、interface 等都是引用类型</p><h3 id="使用特点"><a href="#使用特点" class="headerlink" title="使用特点"></a>使用特点</h3><ul><li>值类型</li></ul><blockquote><p>   变量直接存储值，内存通常在栈中分配</p></blockquote> <img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h46gevbh92j21300cg752.jpg" alt="image-20220714144713333" style="zoom:33%;"><ul><li>引用类型</li></ul><blockquote><p>  变量存储的是一个地址，这个地址对应的空间才真正存储数据(值)，内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由 GC 来回收</p></blockquote><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h46gcmqttfj217w0co759.jpg" alt="image-20220714144504424" style="zoom: 33%;"><ul><li>内存的栈区和堆区示意图</li></ul><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h46gfj52gyj211u0iyjt6.jpg" alt="image-20220714144751395" style="zoom:50%;"><h2 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h2><h3 id="标识符概念"><a href="#标识符概念" class="headerlink" title="标识符概念"></a>标识符概念</h3><p>1) Golang 对各种变量、方法、函数等命名时使用的字符序列称为标识符<br>2) 凡是自己可以起名字的地方都叫标识符</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>1) 由 26 个英文字母大小写，0-9 ，_ 组成<br>2) 数字不可以开头。var num int //ok var 3num int //error<br>3) Golang中严格区分大小写。<br>    var num int<br>    var Num int<br>    说明:在 golang 中，num 和 Num 是两个不同的变量<br>4) 标识符不能包含空格。<br>5) 下划线”_”本身在 Go 中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但是它对应的值会被忽略(比如:忽略某个返回值)。所以仅能被作为占位符使用，不能作为标识符使用<br>6) 不能以系统保留关键字作为标识符(一共有 25 个)，比如 break，if 等等…</p><h3 id="标识符命名注意事项"><a href="#标识符命名注意事项" class="headerlink" title="标识符命名注意事项"></a>标识符命名注意事项</h3><ul><li><p>包名:保持 package 的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和 标准库不要冲突 fmt</p></li><li><p>变量名、函数名、常量名:采用驼峰法 </p><p><strong>举例:</strong></p><p>var stuName string = “tom” 形式: xxxYyyyyZzzz …</p><p>var goodPrice float32 = 1234.5</p></li><li><p>如果<code>变量名</code>、<code>函数名</code>、<code>常量名</code>首字母大写，则可以被其他的包访问;如果首字母小写，则只能<br>在本包中使用 ( 注:可以简单的理解成，首字母大写是公开的，首字母小写是私有的) ,在 golang 没有 public , private 等关键字。</p></li></ul><h2 id="系统保留关键字"><a href="#系统保留关键字" class="headerlink" title="系统保留关键字"></a>系统保留关键字</h2><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrogh</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><h2 id="系统的预定义标识符"><a href="#系统的预定义标识符" class="headerlink" title="系统的预定义标识符"></a>系统的预定义标识符</h2><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th></tr></thead><tbody><tr><td>complex64</td><td>complex128</td><td>uint16</td><td>copy</td><td>false</td><td>float32</td></tr><tr><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>init16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td></tr><tr><td>nil</td><td>panic</td><td>uint64</td><td>print</td><td>println</td><td>real</td></tr><tr><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintprt</td></tr></tbody></table><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="运算符的基本介绍"><a href="#运算符的基本介绍" class="headerlink" title="运算符的基本介绍"></a>运算符的基本介绍</h2><blockquote><p>  运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</p></blockquote><p>1) 算术运算符<br>2) 赋值运算符<br>3) 比较运算符/关系运算符 4) 逻辑运算符<br>4) 位运算符<br>5) 其它运算符</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p>  算术运算符是对数值类型的变量进行运算的，比如:加减乘除。在 Go 程序中使用的非常多</p></blockquote><h4 id="算术运算符的一览表"><a href="#算术运算符的一览表" class="headerlink" title="算术运算符的一览表"></a>算术运算符的一览表</h4><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正号</td><td align="center">+3</td><td align="center">3</td></tr><tr><td align="center">-</td><td align="center">负号</td><td align="center">-4</td><td align="center">-4</td></tr><tr><td align="center">+</td><td align="center">加</td><td align="center">5 + 5</td><td align="center">10</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">6 - 4</td><td align="center">2</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">3 * 4</td><td align="center">12</td></tr><tr><td align="center">/</td><td align="center">除</td><td align="center">5 / 5</td><td align="center">1</td></tr><tr><td align="center">%</td><td align="center">取模(取余)</td><td align="center">7 % 5</td><td align="center">2</td></tr><tr><td align="center">++</td><td align="center">自增</td><td align="center">a=2 a++</td><td align="center">a=3</td></tr><tr><td align="center">–</td><td align="center">自减</td><td align="center">a=2 a–</td><td align="center">a=1</td></tr><tr><td align="center">+</td><td align="center">字符串相加</td><td align="center">“He” + “llo”</td><td align="center">“Hello”</td></tr></tbody></table><h4 id="演示-的使用特点"><a href="#演示-的使用特点" class="headerlink" title="演示 / 的使用特点"></a>演示 / 的使用特点</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 两个整数相除,那么结果会去掉小数点,保留整数</span></span><br><span class="line">fmt.Println(<span class="number">10</span> / <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">10</span> / <span class="number">4</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要保留小数怎么办?</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">10.0</span> / <span class="number">4</span></span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h46iollzs0j20j4034mx8.jpg" alt="image-20220714160546154" style="zoom: 67%;"><h4 id="演示-的使用特点-1"><a href="#演示-的使用特点-1" class="headerlink" title="演示 % 的使用特点"></a>演示 % 的使用特点</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示 %的使用</span></span><br><span class="line"><span class="comment">// 看一个公式 a%b=a-a/b*b</span></span><br><span class="line">fmt.Println(<span class="string">"10%3="</span>, <span class="number">10</span> % <span class="number">3</span>) <span class="comment">// =1</span></span><br><span class="line">fmt.Println(<span class="string">"-10%3="</span>, <span class="number">-10</span> % <span class="number">3</span>) <span class="comment">// = -10 - (-10) / 3 * 3 = -10 - (-9) = -1 fmt.Println("10%-3=", 10 % -3) // =1</span></span><br><span class="line">fmt.Println(<span class="string">"-10%-3="</span>, <span class="number">-10</span> % <span class="number">-3</span>) <span class="comment">// =-1</span></span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h46j0mu81tj20im03yjrk.jpg" alt="image-20220714161720468" style="zoom:67%;"><h3 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h3><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><blockquote><ol><li><p>关系运算符的结果都是 bool 型，也就是要么是 true，要么是 false </p></li><li><p>关系表达式 经常用在 if 结构的条件中或循环结构的条件中</p></li></ol></blockquote><h4 id="关系运算符一览图"><a href="#关系运算符一览图" class="headerlink" title="关系运算符一览图"></a>关系运算符一览图</h4><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4==3</td><td>false</td></tr><tr><td>!=</td><td>不等于</td><td>4!=3</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>4&lt;3</td><td>false</td></tr><tr><td>&gt;</td><td>大于</td><td>4&gt;3</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4&lt;=3</td><td>false</td></tr><tr><td>&gt;==</td><td>大于等于</td><td>4&gt;=3</td><td>true</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h4 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h4><blockquote><p>  用于连接多个条件(一般来讲就是关系表达式)，最终的结果也是一个 bool 值</p></blockquote><h4 id="逻辑运算的说明"><a href="#逻辑运算的说明" class="headerlink" title="逻辑运算的说明"></a>逻辑运算的说明</h4><ul><li>假定A值为True</li><li>假定B值为False</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td><code>逻辑 与</code>运算符,如果两边的操作数都是True,则为True,否则为False</td><td>(A &amp;&amp; B)为False</td></tr><tr><td>||</td><td><code>逻辑 或</code>运算符,如果两边的操作数有一个是True,则为True,否则为False</td><td>(A || B)为True</td></tr><tr><td>!</td><td><code>逻辑 否</code>运算符,如果条件为True,则逻辑为False,否则为True</td><td>!(A &amp;&amp; B)为True</td></tr></tbody></table><h4 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h4><blockquote><p>  1)   &amp;&amp; 也叫短路与:如果第一个条件为false，则第二个条件不会判断，最终结果为false<br>  2)   ||    也叫短路或:如果第一个条件为true， 则第二个条件不会判断，最终结果为true</p></blockquote><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><blockquote><p>  赋值运算符就是将某个运算后的值，赋给指定的变量</p></blockquote><h4 id="赋值运算符的分类"><a href="#赋值运算符的分类" class="headerlink" title="赋值运算符的分类"></a>赋值运算符的分类</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单地赋值运算符,将一个表达式的值赋给一个左值</td><td>C = A+B: 将A + B表达式的结果赋值给C</td></tr><tr><td>+=</td><td>相加后再赋值</td><td>C += A =&gt; 等于 C = C+A</td></tr><tr><td>-=</td><td>相减后再赋值</td><td>C -= A =&gt;  等于 C = C-A</td></tr><tr><td>*=</td><td>相乘后再赋值</td><td>C *= A =&gt;  等于 C = C*A</td></tr><tr><td>/=</td><td>相除后再赋值</td><td>C /= A =&gt;  等于 C = C/A</td></tr><tr><td>%=</td><td>相余后再赋值</td><td>C %= A =&gt; 等于C = C%A</td></tr><tr><td>&lt;&lt;=</td><td>左移后赋值</td><td>C &lt;&lt;= 2 等于 C = C&lt;&lt;2</td></tr><tr><td>&gt;&gt;=</td><td>右移后赋值</td><td>C &gt;&gt;= 2 等于 C = C&gt;&gt;2</td></tr><tr><td>&amp;=</td><td>按位与后赋值</td><td>C &amp;= 2 等于 C = C &amp; 2</td></tr><tr><td>^=</td><td>按位异或后赋值</td><td>C ^= 2 等于 C = C ^ 2</td></tr><tr><td>|=</td><td>按位或后赋值</td><td>C |= 2 等于 C = C | 2</td></tr></tbody></table><h4 id="赋值运算符的特点"><a href="#赋值运算符的特点" class="headerlink" title="赋值运算符的特点"></a>赋值运算符的特点</h4><ul><li><p>运算顺序从右往左</p></li><li><p>赋值运算符的左边 只能是变量,右边 可以是变量、表达式、常量值</p></li><li><p>复合赋值运算符等价于下面的效果 </p><p>比如:a+=3 等价于 a=a+3</p></li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符”&amp;”是双目运算符,其功能是参与运算的两数各对应的二进位相与<br>运算规则是:<code>有一个为1,结果为1,否则为0</code></td></tr><tr><td>|</td><td>按位或运算符”|”是双目运算符,其功能是参与运算的两数各对应的二进位相或<br>运算规则是:<code>同时为1,结果为1,否则为0</code></td></tr><tr><td>^</td><td>按位异或运算符”^”是双目运算符,其功能是参与运算的两数各对应的二进位相异或<br>运算规则是:<code>当二进位不同时,结果为1,否则为0</code></td></tr><tr><td>&lt;&lt;</td><td>左移运算符”&lt;&lt;”是双目运算符,其功能是把”&lt;&lt;”左边的运算数的各二进位全部左移若干位,高位丢弃,低位补0,左移n位就是乘以2的n次方.</td></tr><tr><td>&gt;&gt;</td><td>右移运算符”&gt;&gt;”是双目运算符,其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位,右移n位就是除以2的n次方.</td></tr></tbody></table><h3 id="其它运算符说明"><a href="#其它运算符说明" class="headerlink" title="其它运算符说明"></a>其它运算符说明</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>返回变量存储地址</td><td>&a;将给出变量的实际地址</td></tr><tr><td>*</td><td>指针变量</td><td>*a;是一个指针变量</td></tr></tbody></table><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><h3 id="运算符的优先级的一览表"><a href="#运算符的优先级的一览表" class="headerlink" title="运算符的优先级的一览表"></a>运算符的优先级的一览表</h3><blockquote><p>  从上到下,优先级依次递减</p></blockquote><table><thead><tr><th>分类</th><th>描述</th><th>关联性</th></tr></thead><tbody><tr><td>后缀</td><td>() [] -&gt; . ++ –</td><td>左到右</td></tr><tr><td>单目</td><td>+ - ! ~ (type) * &amp; sizeof</td><td>右到左</td></tr><tr><td>乘法</td><td>* / %</td><td>左到右</td></tr><tr><td>加法</td><td>+ -</td><td>左到右</td></tr><tr><td>移位</td><td>&lt;&lt; &gt;&gt;</td><td>左到右</td></tr><tr><td>关系</td><td>&lt; &lt;= &gt; &gt;=</td><td>左到右</td></tr><tr><td>相等</td><td>== !=</td><td>左到右</td></tr><tr><td>按位AND</td><td>&amp;</td><td>左到右</td></tr><tr><td>按位XOR</td><td>^</td><td>左到右</td></tr><tr><td>按位OR</td><td>|</td><td>左到右</td></tr><tr><td>逻辑AND</td><td>&amp;&amp;</td><td>左到右</td></tr><tr><td>逻辑OR</td><td>||</td><td>左到右</td></tr><tr><td>赋值运算符</td><td>= += -= *= /= %= &gt;&gt;= &lt;&lt;= &amp;= ^= |=</td><td>右到左</td></tr><tr><td>逗号</td><td>,</td><td>左到右</td></tr></tbody></table><h1 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。InputDemo.go</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><p>导入<code>fmt</code>包</p></li><li><p>调用 <code>fmt</code> 包的 <code>fmt.Scanln()</code> 或者 <code>fmt.Scanf()</code></p></li></ul><p>官方文档查询使用方法: <a href="https://pkg.go.dev/fmt#Scan" target="_blank" rel="noopener">https://pkg.go.dev/fmt#Scan</a></p><h2 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h2><blockquote><p>   要求:可以从控制台接收用户信息，【姓名，年龄，薪水, 是否通过考试 】。</p></blockquote><ul><li>使用 fmt.Scanln() 获取</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 要求:可以从控制台接收用户信息，【姓名，年龄，薪水, 是否通过考试 】。</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> sal <span class="keyword">float32</span></span><br><span class="line"><span class="keyword">var</span> isPass <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请输入姓名: "</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">fmt.Println(<span class="string">"请输入年龄: "</span>)</span><br><span class="line">fmt.Scanln(&amp;age)</span><br><span class="line">fmt.Println(<span class="string">"请输入薪水: "</span>)</span><br><span class="line">fmt.Scanln(&amp;sal)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请输入是否通过考试: "</span>)</span><br><span class="line">fmt.Scanln(&amp;isPass)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"名字是 %v\n年龄是 %v\n薪水是 %v\n是否通过考试: %v\n"</span>, name, age, sal, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4eu3npbylj20q00aegmk.jpg" alt="image-20220721204511796" style="zoom:67%;"><ul><li>使用 fmt.Scanf() 获取</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 要求:可以从控制台接收用户信息，【姓名，年龄，薪水, 是否通过考试 】。</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> sal <span class="keyword">float32</span></span><br><span class="line"><span class="keyword">var</span> isPass <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二: fmt.scanf,可以按照指定的格式输入</span></span><br><span class="line">fmt.Println(<span class="string">"请分别输入你的姓名/年龄/薪水, 使用空格分隔"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%s %d %f %t"</span>, &amp;name, &amp;age, &amp;sal, &amp;isPass)</span><br><span class="line">fmt.Printf(<span class="string">"名字是 %v\n年龄是 %v\n薪水是 %v\n是否通过考试: %v\n"</span>, name, age, sal, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4eunfeh6uj20ny05kq3n.jpg" alt="image-20220721210421076" style="zoom:67%;"><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>对于整数，有四种表示方式: </p><ul><li><strong>二进制:</strong> 0,1 ，满 2 进 1。<br>在 golang 中，不能直接使用二进制来表示一个整数，它沿用了 c 的特点。 </li><li><strong>十进制:</strong> 0-9 ，满 10 进 1。</li><li><strong>八进制:</strong> 0-7 ，满 8 进 1. 以数字 0 开头表示。</li><li><strong>十六进制:</strong> 0-9及A-F，满16进1. 以0x或0X开头表示。此处的 A-F 不区分大小写。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line"><span class="comment">// 二进制输出</span></span><br><span class="line">fmt.Printf(<span class="string">"%b \n"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 八进制输出, 满 8 进 1,以数字 0 开头</span></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">int</span> = <span class="number">011</span></span><br><span class="line">fmt.Println(<span class="string">"j="</span>, j)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制输出,满 16 进 1, 以 0x 或 0X 开头</span></span><br><span class="line"><span class="keyword">var</span> k <span class="keyword">int</span> = <span class="number">0x11</span></span><br><span class="line">fmt.Println(<span class="string">"k="</span>, k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ev6z3brjj20l0038dfy.jpg" alt="image-20220721212308826" style="zoom:67%;"><h2 id="进制的图示"><a href="#进制的图示" class="headerlink" title="进制的图示"></a>进制的图示</h2><table><thead><tr><th align="center">十进制</th><th align="center">十六进制</th><th align="center">八进制</th><th align="center">二进制</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">10</td></tr><tr><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">11</td></tr><tr><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">100</td></tr><tr><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">101</td></tr><tr><td align="center">6</td><td align="center">6</td><td align="center">6</td><td align="center">110</td></tr><tr><td align="center">7</td><td align="center">7</td><td align="center">7</td><td align="center">111</td></tr><tr><td align="center">8</td><td align="center">8</td><td align="center">10</td><td align="center">1000</td></tr><tr><td align="center">9</td><td align="center">9</td><td align="center">11</td><td align="center">1001</td></tr><tr><td align="center">10</td><td align="center">A</td><td align="center">12</td><td align="center">1010</td></tr><tr><td align="center">11</td><td align="center">B</td><td align="center">13</td><td align="center">1011</td></tr><tr><td align="center">12</td><td align="center">C</td><td align="center">14</td><td align="center">1100</td></tr><tr><td align="center">13</td><td align="center">D</td><td align="center">15</td><td align="center">1101</td></tr><tr><td align="center">14</td><td align="center">E</td><td align="center">16</td><td align="center">1110</td></tr><tr><td align="center">15</td><td align="center">F</td><td align="center">17</td><td align="center">1111</td></tr><tr><td align="center">16</td><td align="center">10</td><td align="center">20</td><td align="center">10000</td></tr><tr><td align="center">17</td><td align="center">11</td><td align="center">21</td><td align="center">10001</td></tr></tbody></table><h2 id="进制的转换"><a href="#进制的转换" class="headerlink" title="进制的转换"></a>进制的转换</h2><ul><li>其他进制转十进制<ul><li>二进制转十进制</li><li>八进制转十进制\</li><li>十六进制转十进制</li></ul></li><li>十进制转其它进制<ul><li>十进制转二进制</li><li>十进制转八进制</li><li>十进制转十六进制</li></ul></li><li>二进制转其它进制<ul><li>二进制转八进制</li><li>二进制转十六进制</li></ul></li><li>其他进制转二进制<ul><li>八进制转二进制</li><li>十六进制转二进制</li></ul></li></ul><h3 id="其它进制转十进制"><a href="#其它进制转十进制" class="headerlink" title="其它进制转十进制"></a>其它进制转十进制</h3><h4 id="二进制如何转十进制"><a href="#二进制如何转十进制" class="headerlink" title="二进制如何转十进制"></a>二进制如何转十进制</h4><blockquote><p>  规则: 从最低位开始(右边开始),将每个位上的数提取出来,乘以2的(位数-1)次方,然后求和</p></blockquote><ul><li>案例: 请将二进制 1011 转换成十进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1011</span> = <span class="number">1</span>*<span class="number">2</span>^(<span class="number">1</span><span class="number">-1</span>) + <span class="number">1</span>*<span class="number">2</span>^(<span class="number">2</span><span class="number">-1</span>) + <span class="number">0</span>*<span class="number">2</span>^(<span class="number">3</span><span class="number">-1</span>) + <span class="number">1</span>*<span class="number">2</span>^(<span class="number">4</span><span class="number">-1</span>)</span><br><span class="line">     = <span class="number">1</span> + <span class="number">2</span> + <span class="number">0</span> + <span class="number">8</span></span><br><span class="line">     = <span class="number">11</span></span><br></pre></td></tr></table></figure><h4 id="八进制如何转十进制"><a href="#八进制如何转十进制" class="headerlink" title="八进制如何转十进制"></a>八进制如何转十进制</h4><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4fu2dxcaoj20p203gweu.jpg" alt="image-20220722172941782"></p><blockquote><p>  规则: 从最低位开始,将每个位上的数提取出来,乘以8的(位数-1)次方,然后求和</p></blockquote><ul><li>案例: 请将0123转换为十进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0123</span> = <span class="number">3</span>*<span class="number">8</span>^(<span class="number">1</span><span class="number">-1</span>) + <span class="number">2</span>*<span class="number">8</span>^(<span class="number">2</span><span class="number">-1</span>) + <span class="number">1</span>*<span class="number">8</span>^(<span class="number">3</span><span class="number">-1</span>) + <span class="number">0</span>*<span class="number">8</span>^(<span class="number">4</span><span class="number">-1</span>)</span><br><span class="line">     = <span class="number">3</span> + <span class="number">16</span> + <span class="number">64</span> + <span class="number">0</span></span><br><span class="line">     = <span class="number">83</span></span><br></pre></td></tr></table></figure><h4 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h4><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4fucv9e6pj20ry05mq3k.jpg" alt="image-20220722173946386"></p><blockquote><p>  规则: 从最低位开始,将每个位上的数提取出来,乘以16的(位数-1)次方,然后求和</p></blockquote><ul><li>案例: 请将0x34A转成十进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x34A</span> = <span class="number">10</span>*<span class="number">16</span>^(<span class="number">1</span><span class="number">-1</span>) + <span class="number">4</span>*<span class="number">16</span>^(<span class="number">2</span><span class="number">-1</span>) + <span class="number">3</span>*<span class="number">16</span>^(<span class="number">3</span><span class="number">-1</span>)</span><br><span class="line">      = <span class="number">10</span> + <span class="number">64</span> + <span class="number">768</span></span><br><span class="line">      = <span class="number">842</span></span><br></pre></td></tr></table></figure><h3 id="十进制转其它进制"><a href="#十进制转其它进制" class="headerlink" title="十进制转其它进制"></a>十进制转其它进制</h3><h4 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h4><blockquote><p>  规则: 将该数不断除以2,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</p></blockquote><ul><li>案例: 请将56转成二进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">56</span>/<span class="number">2</span>=<span class="number">28</span> - <span class="number">0</span></span><br><span class="line"><span class="number">28</span>/<span class="number">2</span>=<span class="number">14</span> - <span class="number">0</span></span><br><span class="line"><span class="number">14</span>/<span class="number">2</span>=<span class="number">7</span>  - <span class="number">0</span></span><br><span class="line"><span class="number">7</span>/<span class="number">2</span>=<span class="number">3</span>   - <span class="number">1</span></span><br><span class="line"><span class="number">3</span>/<span class="number">2</span>=<span class="number">1</span>- <span class="number">1</span></span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>=<span class="number">0</span>   - <span class="number">1</span>// <span class="number">1</span>除以任何大于<span class="number">1</span>的正整数,商都为<span class="number">0</span>,余数为<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>   <span class="number">1</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span> = <span class="number">56</span></span><br><span class="line"><span class="number">32</span>  <span class="number">16</span>  <span class="number">8</span>   <span class="number">4</span>   <span class="number">2</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="十进制转八进制"><a href="#十进制转八进制" class="headerlink" title="十进制转八进制"></a>十进制转八进制</h4><blockquote><p>  规则: 将该数不断除以8,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</p></blockquote><ul><li>案例: 请将156转成八进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">156</span>/<span class="number">8</span>=<span class="number">19</span> - <span class="number">4</span></span><br><span class="line"><span class="number">19</span>/<span class="number">8</span>=<span class="number">2</span>   - <span class="number">3</span></span><br><span class="line"><span class="number">2</span>/<span class="number">8</span>=<span class="number">0</span>    - <span class="number">2</span>// <span class="number">2</span>除以<span class="number">8</span>余<span class="number">2</span>；（商<span class="number">0</span>）</span><br><span class="line"></span><br><span class="line">八进制: <span class="number">0234</span>=<span class="number">156</span></span><br></pre></td></tr></table></figure><h4 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h4><blockquote><p>  规则: 将该数不断除以16,直到商为0为止,然后将每步得到的余数倒过来,就是对应的二进制</p></blockquote><ul><li>案例: 请将356转成十六进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">356</span>/<span class="number">16</span>=<span class="number">22</span> - <span class="number">4</span></span><br><span class="line"><span class="number">22</span>/<span class="number">16</span>=<span class="number">1</span>   - <span class="number">6</span></span><br><span class="line"><span class="number">1</span>/<span class="number">16</span>=<span class="number">0</span>    - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">十六进制: <span class="number">0x164</span>=<span class="number">356</span></span><br></pre></td></tr></table></figure><h3 id="二进制转八进制-十六进制"><a href="#二进制转八进制-十六进制" class="headerlink" title="二进制转八进制/十六进制"></a>二进制转八进制/十六进制</h3><h4 id="二进制转八进制"><a href="#二进制转八进制" class="headerlink" title="二进制转八进制"></a>二进制转八进制</h4><blockquote><p>  规则: 将二进制数每三位一组(从低位开始组合),转成对应的八进制即可</p></blockquote><ul><li>案例: 请将二进制 11010101 转成八进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11010101</span> =&gt; (<span class="number">11</span>) (<span class="number">010</span>) (<span class="number">101</span>) =&gt; <span class="number">0325</span></span><br></pre></td></tr></table></figure><h4 id="二进制转十六进制"><a href="#二进制转十六进制" class="headerlink" title="二进制转十六进制"></a>二进制转十六进制</h4><blockquote><p>  规则: 将二进制数每四位一组(从低位开始组合),转成对应的十六进制即可</p></blockquote><ul><li>案例: 请将二进制 11010101转成十六进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11010101</span> =&gt; (<span class="number">1101</span>) (<span class="number">0101</span>) =&gt; <span class="number">0x135</span> =&gt; <span class="number">0xD5</span></span><br></pre></td></tr></table></figure><h3 id="八进制-十六进制转二进制"><a href="#八进制-十六进制转二进制" class="headerlink" title="八进制/十六进制转二进制"></a>八进制/十六进制转二进制</h3><h4 id="八进制转二进制"><a href="#八进制转二进制" class="headerlink" title="八进制转二进制"></a>八进制转二进制</h4><blockquote><p>  规则: 将八进制数每1位,转成对应的一个三位数即可</p></blockquote><ul><li>案例: 请将0237转成二进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0237</span> =&gt; (<span class="number">010</span>) (<span class="number">011</span>) (<span class="number">111</span>) =&gt; <span class="number">10011111</span></span><br></pre></td></tr></table></figure><h4 id="十六进制转二进制"><a href="#十六进制转二进制" class="headerlink" title="十六进制转二进制"></a>十六进制转二进制</h4><blockquote><p>  规则: 将八进制数每1位,转成对应的一个四位数即可</p></blockquote><ul><li>案例: 请将0x237转成二进制</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x237</span> =&gt; (<span class="number">0010</span>) (<span class="number">0011</span>) (<span class="number">0111</span>) =&gt; <span class="number">1000110111</span></span><br></pre></td></tr></table></figure><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p><strong>精简6句话:</strong></p><ul><li>二进制的最高位是符号位: 0表示正数,1表示负数<ul><li>1 =&gt; [0000 0001]</li><li>-1 =&gt; [1000 0001]</li></ul></li><li>正数的源码/反码/补码都一样</li><li>负数的反码=原码符号位不变,其他位取反<ul><li>1 =&gt; 原码[0000 0001]</li><li>1 =&gt; 反码[0000 0001]</li><li>1 =&gt; 补码[0000 0001]</li><li>-1 =&gt; 原码[1000 0001]</li><li>-1 =&gt; 反码[1111 1110]</li><li>-1 =&gt; 补码[1111 1111]</li></ul></li><li>负数的补码=反码+1</li><li>0的反码/补码都是0</li><li>计算机运算时以补码方式进行运算</li></ul><h2 id="位运算符和移位运算符"><a href="#位运算符和移位运算符" class="headerlink" title="位运算符和移位运算符"></a>位运算符和移位运算符</h2><ul><li><strong>Golang中有3个位运算,它们的运算规则是:</strong><ul><li><strong>按位与&amp;:</strong> 两位全为1，结果为 1，否则为 0</li><li><strong>按位或|:</strong> 两位有一个为 1，结果为 1，否则为 0</li><li><strong>按位异或 ^:</strong> 两位一个为 0,一个为 1，结果为 1，否则为 0</li></ul></li></ul><blockquote><p>  注意: 整数的反码补码都一样,所以<code>补码</code>=<code>原码</code>,负数的时候需要用<code>补码</code>先推回到<code>反码</code>,再用<code>反码</code>推回<code>原码</code></p></blockquote><table><thead><tr><th>计算值</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>2</td><td>0000 0010</td><td>0000 0010</td><td>0000 0010</td></tr><tr><td>3</td><td>0000 0011</td><td>0000 0011</td><td>0000 0011</td></tr><tr><td>2&amp;3</td><td>-</td><td>-</td><td>0000 0010(2)</td></tr><tr><td>2|3</td><td>-</td><td>-</td><td>0000 0011(3)</td></tr><tr><td>2^3</td><td>-</td><td>-</td><td>0000 0001(1)</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>-2</td><td>1000 0010</td><td>1111 1101</td><td>1111 1110</td></tr><tr><td>2</td><td>0000 0010</td><td>0000 0010</td><td>0000 0010</td></tr><tr><td>-2^2</td><td>1000 0100(-4)</td><td>1111 1011(补码-1)</td><td>1111 1100</td></tr></tbody></table><ul><li><p><strong>Golang中有2个移位运算符: **<br>**右移运算符 &gt;&gt;:</strong> 低位溢出,符号位不变,并用符号位补溢出的高位<br><strong>左移运算符 &lt;&lt;:</strong> 符号位不变,低位补 0</p></li><li><p>案例演示</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">1</span> &gt;&gt; <span class="number">2</span> // <span class="number">0000</span> <span class="number">0001</span> =&gt; <span class="number">0000</span> <span class="number">0000</span> = <span class="number">0</span></span><br><span class="line">c := <span class="number">1</span> &lt;&lt; <span class="number">2</span> // <span class="number">0000</span> <span class="number">0001</span> =&gt; <span class="number">0000</span> <span class="number">0100</span> = <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><blockquote><p>  这个章节不写案例,没啥好写的,不懂的最好去查一下相关案例,能更加快速的上手</p></blockquote><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><blockquote><p>  代码中，没有判断，也没有跳转.因此程序按照默认的流程执行，即顺 序控制。</p></blockquote><p>这个不必过多介绍,这个不明白啥意思别往下看了,你学不会了兄弟-_-||</p><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><h3 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h3><ul><li>基本语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h3><blockquote><p>  注意: 下面的<code>else</code>不可以换行,必须为 <code>}esle{</code></p></blockquote><ul><li>基本语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    PASS</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h3><ul><li>基本语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    PASS</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    PASS</span><br><span class="line">&#125;...</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  需要注意的是,if语句的判断条件中,不能只出现赋值语句,例如 <code>if a=5</code>,但是可以写成<code>if a=5;a&gt;4</code></p></blockquote><h3 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h3><blockquote><p>  在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    <span class="keyword">if</span> 条件 &#123;</span><br><span class="line">        PASS</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        PASS</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h3><ul><li>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上到下逐一测 试，直到匹配为止。</li><li>匹配项后面也不需要再加 break</li></ul><p>基本语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> 表达式 &#123;</span><br><span class="line"><span class="keyword">case</span> 表达式<span class="number">1</span>:</span><br><span class="line">    PASS</span><br><span class="line"><span class="keyword">case</span> 表达式<span class="number">2</span>:</span><br><span class="line">    PASS</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结:</strong></p><p>1) switch的执行的流程是，先执行表达式，得到值，然后和case的表达式进行比较，如果相等，<br>    就匹配到，然后执行对应的 case 的语句块，然后退出 switch 控制。<br>2) 如果 switch 的表达式的值没有和任何的 case 的表达式匹配成功，则执行 default 的语句块。执行后退出 switch 的控制.<br>3) golang的case后的表达式可以有多个，使用逗号间隔.<br>4) golang 中的 case 语句块不需要写 break , 因为默认会有,即在默认情况下，当程序执行完 case 语<br>    句块后，就直接退出该 switch 控制结构。</p><p>案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">fmt.Println(<span class="string">"请输入一个数字: "</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v"</span>, &amp;i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">"数值1"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">"数值2"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">"数值3"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4j75mydaaj20b9037aa6.jpg" alt="image-20220725151918021"></p><p>也可以写成下面这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">fmt.Println(<span class="string">"请输入一个数字: "</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v"</span>, &amp;i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i == <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">"数值1"</span>)</span><br><span class="line"><span class="keyword">case</span> i == <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">"数值2"</span>)</span><br><span class="line"><span class="keyword">case</span> i == <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">"数值3"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch 穿透-fallthrough: 如果在 case 语句块后增加 fallthrough ,则会继续执行下一个 case，也 叫 switch 穿透</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">fmt.Println(<span class="string">"OK1"</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">fmt.Println(<span class="string">"OK2"</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">fmt.Println(<span class="string">"OK3"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Print(<span class="string">"没有匹配到"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4j7l5weowj20b301l3ye.jpg" alt="image-20220725153413174"></p><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ul><li>基本语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环变量初始化;循环条件;循环变量迭代&#123;</span><br><span class="line">PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子: 打印十遍<code>Hello World</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4j7xsl5cdj20az04aaa4.jpg" alt="image-20220725154621742"></p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><blockquote><p>  将变量初始化和变量迭代写到其它位置</p></blockquote><ul><li>基本语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环判断条件 &#123;</span><br><span class="line">PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子: 打印十遍<code>Hello World</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式三-无限循环"><a href="#方式三-无限循环" class="headerlink" title="方式三: 无限循环"></a>方式三: 无限循环</h4><blockquote><p>  等价 for ; ; {} 是一个无限循环， 通常需要配合 break 语句使用</p></blockquote><ul><li>基本语法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子:输出1-10</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i &lt;= <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">//退出循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4j8dsyxrmj20av04dglk.jpg" alt="image-20220725160145059"></p><h4 id="for-range"><a href="#for-range" class="headerlink" title="for-range"></a>for-range</h4><blockquote><p>  可以方便的遍历字符串与数组</p></blockquote><ul><li>例子(传统方式): 按照索引顺序,输出字符串的单个字符</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"Hello,World!"</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="built_in">len</span>(str);i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%c \n"</span>, str[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4j8o1897kj20b90533yg.jpg" alt="image-20220725161130562"></p><ul><li>例子(for-range): 字符串遍历</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"Hello,World!"</span></span><br><span class="line"><span class="keyword">for</span> index,value := <span class="keyword">range</span> str&#123;</span><br><span class="line">fmt.Printf(<span class="string">"index=%d, value=%c \n"</span>, index, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4j8w8k1ykj20b0055glt.jpg" alt="image-20220725161927874"></p><blockquote><p>  对于传统的字符串遍历来说,如果字符串中含有中文,会报错</p><p>  原因是传统的对字符串的遍历是按照字节来遍历，而一个汉字在 utf8 编码是对应 3 个字节。 </p><p>  如何解决?需要要将 str 转成 []rune 切片</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"Hello,World!你好世界!"</span></span><br><span class="line">str_rune := []<span class="keyword">rune</span>(str)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="built_in">len</span>(str_rune);i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%c \n"</span>, str_rune[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-range的方式处理中文不会出问题</p><h3 id="while-和-do-while"><a href="#while-和-do-while" class="headerlink" title="while 和 do..while"></a>while 和 do..while</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><blockquote><p>  Go 语言没有 while 和 do…while 语法，这一点需要注意一下，如果我们需要使用类似其它语<br>  言(比如 java / c 的 while 和 do…while )，可以通过 for 循环来实现其使用效果。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; </span><br><span class="line">        fmt.Println(i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是上面for循环中说的<code>for ; ; {} 是一个无限循环</code></p><h4 id="do-while"><a href="#do-while" class="headerlink" title="do..while"></a>do..while</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">i++</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>练习: 利用<code>*</code>输出金字塔</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> line <span class="keyword">int</span></span><br><span class="line">fmt.Println(<span class="string">"请输入金字塔的行数: "</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%d"</span>, &amp;line)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出一个矩形</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= line; i++ &#123;</span><br><span class="line"><span class="comment">// 空格</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= line-i; j++ &#123;</span><br><span class="line">fmt.Print(<span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 星号</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="number">1</span>; k &lt;= <span class="number">2</span>*i<span class="number">-1</span>; k++ &#123;</span><br><span class="line">fmt.Print(<span class="string">"*"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><blockquote><p>  这个很好理解,主动退出循环嘛,这里不做过多解释,但是有一个标签的功能需要说一下</p></blockquote><ul><li>break语句出现在多层嵌套的语句块中时，可以通过<code>标签指明</code>要终止的是哪一层语句块</li><li>break默认跳出最近的 for 循环</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> line <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">label:</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= line; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= line-i; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> j == <span class="number">5</span>&#123;</span><br><span class="line"><span class="keyword">break</span> label<span class="comment">//直接跳出指定位置的循环</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4jalmx5xej20b502c0sn.jpg" alt="image-20220725171828159"></p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><blockquote><p>  continue 语句用于结束本次循环，继续执行下一次循环。</p><p>  continue 语句出现在多层嵌套的循环语句体中时，可以通过<code>标签指明</code>要跳过的是哪一层循环 , 这个和前面的 break 标签的使用的规则一样.</p></blockquote><p>这里就不演示了</p><p>放个截图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4jaqxzflbj20mw0dj0ta.jpg" alt="image-20220725172334025"></p><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><p>1) Go 语言的 goto 语句可以无条件地转移到程序中指定的行。<br>2) goto语句通常与条件语句配合使用。可用来实现条件转移，跳出循环体等功能。<br>3) 在 Go 程序设计中一般不主张使用 goto 语句， 以免造成程序流程的混乱，使理解和调试程序<br>    都产生困难</p><ul><li>一个案例演示快速说明,麻利滴!</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> label</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"我小于5!"</span>)</span><br><span class="line"></span><br><span class="line">label:</span><br><span class="line">fmt.Println(<span class="string">"我大于5!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4jbho8qdfj20av00v3ye.jpg" alt="image-20220725174915995"></p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><blockquote><p>  return 使用在方法或者函数中，表示跳出所在的方法或函数，在讲解函数的时候，会详细的介绍。</p></blockquote><p><strong>说明:</strong></p><p>1) 如果 return 是在普通的函数，则表示跳出该函数，即不再执行函数中 return 后面代码，也可以理解成终止函数。<br>2) 如果 return 是在 main 函数，表示终止 main 函数，也就是说终止程序。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>  因为本人有一定基础,这里就不做太详细的解释,直接上干货,兄弟们!</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><blockquote><p>  函数可以有返回值,也可以没有</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名 [形参列表] [返回值列表]</span>&#123;</span><br><span class="line">PASS</span><br><span class="line">    <span class="keyword">return</span> [返回值列表]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(n1 <span class="keyword">float64</span>, n2 <span class="keyword">float64</span>, operator <span class="keyword">byte</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">switch</span> operator &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">res = n1 + n2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">res = n1 - n2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">res = n1 * n2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">res = n1 / n2</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"操作符号错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="keyword">float64</span> = <span class="number">1.2</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="keyword">float64</span> = <span class="number">2.3</span></span><br><span class="line"><span class="keyword">var</span> operator <span class="keyword">byte</span> = <span class="string">'+'</span></span><br><span class="line">result := calculate(n1, n2, operator)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4k50q2mt6j20ag00rq2s.jpg" alt="image-20220726105053724"></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li><p>在实际的开发中，我们往往需要在不同的文件中，去调用其它文件的定义的函数，比如 main.go 中，去使用 utils.go 文件中的函数，如何实现? =&gt; 包</p></li><li><p>现在有两个程序员共同开发一个 Go 项目,程序员 xiaoming 希望定义函数 Cal ,程序员 xiaoqiang 也想定义函数也叫 Cal。两个程序员为此还吵了起来,怎么办? =&gt; 包</p></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>  包的本质实际上就是创建不同的文件夹，来存放程序文件。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4k5se1rk6j20r506p0th.jpg" alt="image-20220726111732328"></p><ul><li>说明: go 的每一个文件都是属于一个包的，也就是说 go 是以包的形式来管理文件和项目目录结构</li></ul><h3 id="三大作用"><a href="#三大作用" class="headerlink" title="三大作用"></a>三大作用</h3><ul><li>区分相同名字的函数、变量等标识符</li><li>当程序文件很多时,可以很好的管理项目</li><li>控制函数、变量等访问范围，即作用域</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>打包基本语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名</span><br></pre></td></tr></table></figure><p>引入包的基本语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"包的路径"</span></span><br></pre></td></tr></table></figure><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><blockquote><p>  注意: golang在找包的时候,默认会在<code>/usr/local/go/src/</code>寻找,所以文件要放在golang的src目录下,我目前main.go的绝对路径是<code>/usr/local/go/src/golang_study/08-hanshu/main</code>,所以下面调用utils包时,只需要从<code>golang_study</code>开始写就可以了</p></blockquote><ul><li>目录格式</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4k7bdjtrpj206z033dfp.jpg" alt="image-20220726121022878"></p><ul><li>utils.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Calculate</span><span class="params">(n1 <span class="keyword">float64</span>, n2 <span class="keyword">float64</span>, operator <span class="keyword">byte</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">switch</span> operator &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">res = n1 + n2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">res = n1 - n2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">res = n1 * n2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">res = n1 / n2</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"操作符号错误"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/08-hanshu/utils"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="keyword">float64</span> = <span class="number">1.2</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="keyword">float64</span> = <span class="number">2.3</span></span><br><span class="line"><span class="keyword">var</span> operator <span class="keyword">byte</span> = <span class="string">'+'</span></span><br><span class="line">result := utils.Calculate(n1, n2, operator)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>在给一个文件打包时，该包对应一个文件夹，比如这里的 utils 文件夹对应的包名就是 utils, 文件的包名通常和文件所在的文件夹名一致，一般为小写字母。</li><li>当一个文件要使用其它包函数或变量时，需要先引入对应的包</li></ol><ul><li>引入方式 1:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"包名"</span></span><br></pre></td></tr></table></figure><ul><li>引入方式 2:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ( </span><br><span class="line"><span class="string">"包名"</span></span><br><span class="line"><span class="string">"包名"</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>package 指令在 文件第一行，然后是 import 指令。</li><li>在 import 包时，路径从 <code>$GOPATH</code> 的 <code>src</code> 下开始，不用带 src , 编译器会自动从 src 下开始引入</li><li>为了让其它包的文件，可以访问到本包的函数，则该<code>函数名的首字母需要大写</code>，类似其它语言 的 public ,这样才能跨包访问。比如 utils.go 的<code>Calculate</code></li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4k9g3q8myj20h10cjmxs.jpg" alt="image-20220726132407437"></p><ol start="6"><li>在访问其它包函数，变量时，其语法是 包名.函数名， 比如这里的 main.go 文件中</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4k9nwnr3wj20cv09nq3e.jpg" alt="image-20220726133137898"></p><ol start="7"><li>如果包名较长，Go 支持给包取别名， 注意细节:取别名后，原来的包名就不能使用了</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4k9plh9v8j20ab031jra.jpg" alt="image-20220726133314963"></p><ol start="8"><li>如果你要编译成一个可执行程序文件，就需要将这个包声明为 main , 即 package main .这个就<pre><code>是一个语法规范，如果你是写一个库 ，包名可以自定义</code></pre></li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4k9z0ydnpj20hv038gln.jpg" alt="image-20220726134218663"></p><p>打包生成可执行文件命令如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build -o bin/my.exe golang_study/<span class="number">08</span>-hanshu/main</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ka4qyid8j20ge00n747.jpg" alt="image-20220726134749000"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ka6a7p58j2091039aa8.jpg" alt="image-20220726134917258"></p><h2 id="函数的调用机制"><a href="#函数的调用机制" class="headerlink" title="函数的调用机制"></a>函数的调用机制</h2><blockquote><p>  为了让大家更好的理解函数调用过程, 看两个案例，并画出示意图，这个很重要</p></blockquote><ul><li>传入一个数+1</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n1 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n1 = n1 + <span class="number">1</span></span><br><span class="line">fmt.Println(<span class="string">"test n1="</span>, n1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum := n1 + n2</span><br><span class="line">fmt.Println(<span class="string">"getSum sum="</span>, sum)</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n1 := <span class="number">10</span></span><br><span class="line">test(n1)</span><br><span class="line">fmt.Println(<span class="string">"main() n1="</span>, n1)</span><br><span class="line"></span><br><span class="line">sum := getSum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"main() sum="</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4kb9raa7pj20cl020mx4.jpg" alt="image-20220726142713706"></p><blockquote><p>  为什么上面代码执行结果中,n1的值没有真正的改变呢?请看下面这个解释吧</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4kckeyrjaj20lz0890tl.jpg" alt="image-20220726151204173"></p><ol><li>在调用一个函数时，会给该函数分配一个新的空间，编译器会通过自身的处理让这个新的空间 和其它的栈的空间区分开来</li><li>在每个函数对应的栈中，数据空间是独立的，不会混淆</li><li>当一个函数调用完毕(执行完毕)后,程序会销毁这个函数对应的栈空间</li></ol><h2 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h2><h3 id="基本语法与说明"><a href="#基本语法与说明" class="headerlink" title="基本语法与说明"></a>基本语法与说明</h3><blockquote><p>  Golang函数支持返回多个值,这一点是其他编程语言没有的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(形参列表)</span> <span class="params">(返回值类型列表)</span></span>&#123;</span><br><span class="line">语句...</span><br><span class="line">    <span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:</p><ol><li>如果返回多个值时,在接收时,如果希望忽略某个值,则使用<code>_</code>符号表示占位忽略</li><li>如果返回值只有一个,<code>(返回值类型列表)</code>可以不写</li></ol><h3 id="案例-计算两个数的和and差"><a href="#案例-计算两个数的和and差" class="headerlink" title="案例: 计算两个数的和and差"></a>案例: 计算两个数的和and差</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算两个数的 和/查 值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSumAndSub</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">sum := n1 + n2</span><br><span class="line">sub := n1 - n2</span><br><span class="line"><span class="keyword">return</span> sum, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="keyword">int</span> = <span class="number">30</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="keyword">int</span> = <span class="number">20</span></span><br><span class="line">sum, sub := getSumAndSub(n1, n2)</span><br><span class="line">fmt.Printf(<span class="string">"sum=%d, sub=%d \n"</span>, sum, sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4keaq3dqkj20bz00vdfr.jpg" alt="image-20220726161157132"></p><h2 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h2><blockquote><p>  一个函数在函数体内又调用了本身，我们称为递归调用</p></blockquote><p>快速通过代码理解一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">2</span> &#123;</span><br><span class="line">n--</span><br><span class="line">test(n)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"n="</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">test(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4kfmvxn9lj20bv01nmx3.jpg" alt="image-20220726165814493"></p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4kfp7tpl0j20bs0bsdg9.jpg" alt="image-20220726170028404" style="zoom:67%;"><p>???</p><p>为什么是 2 2 3 ???</p><blockquote><p>  递归说白了就是套娃,优先执行最里边的,然后由里到外依次执行,所以你会看到 2 2 3 这个结果</p><p>  什么?还不明白?</p><p>  那我给你解释一下上面的代码</p></blockquote><ul><li>test(4) – 第一步<ul><li>符合if判断条件<ul><li>n– 此时n由4-1变为了3</li><li>test(3)</li></ul></li><li>n=3</li></ul></li><li>test(3) – 第二步<ul><li>符合if判断条件<ul><li>n– 此时n由3-1变为了2</li><li>test(2)</li></ul></li><li>n=2</li></ul></li><li>test(2) – 第三步<ul><li>不符合if判断条件</li><li>n=2</li></ul></li></ul><blockquote><p>  由下到上(从里到外)输出n的结果,就是 2 2 3</p></blockquote><p>原来如此</p><blockquote><p>  将上面的案例代码改变一下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">2</span> &#123;</span><br><span class="line">n--</span><br><span class="line">test(n)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//增加了else判断分支</span></span><br><span class="line">fmt.Println(<span class="string">"n="</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">test(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问,输出结果是什么?</p><p>经过我掐指一算,n=2</p><p>是的,结果只是<code>n=2</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>函数递归需要遵守的重要原则:</strong></p><p>1) 执行一个函数时，就创建一个新的受保护的独立空间(新函数栈)<br>2) 函数的局部变量是独立的，不会相互影响<br>3) 递归必须向退出递归的条件逼近，否则就是无限递归，死龟了:)<br>4) 当一个函数执行完毕，或者遇到 return，就会返回，遵守谁调用，就将结果返回给谁，同时当函数执行完毕或者返回时，该函数本身也会被系统销毁</p><h3 id="递归函数练习"><a href="#递归函数练习" class="headerlink" title="递归函数练习"></a>递归函数练习</h3><ul><li>给出一个整数n,求斐波那契数列中的第n位是什么</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算斐波那契数,给出一个整数n(n为斐波那契数列中的第几位),输出第n位的数值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> || n == <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"f(3)="</span>, f(<span class="number">3</span>))</span><br><span class="line">fmt.Println(<span class="string">"f(5)="</span>, f(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4l79o0owmj20bs017747.jpg" alt="image-20220727085416484"></p><ul><li><p>猴子吃桃子问题:</p><ul><li><p>有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后<br>再多吃一个。当到第十天时，想再吃时(还没吃)，发现只有 1 个桃子了。问题:最初共多少个桃子? </p></li><li><p>思路分析:</p><ul><li><p>第10 天只有一个桃子</p></li><li><p>第9天有几个桃子 = (第10天桃子数量 + 1) * 2</p></li><li><p>规律: 第 n 天的桃子数据 peach(n) = (peach(n+1) + 1) * 2</p></li></ul></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -   有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个!以后每天猴子都吃其中的一半，然后</span></span><br><span class="line"><span class="comment">// 再多吃一个。当到第十天时，想再吃时(还没吃)，发现只有 1 个桃子了。问题:最初共多少个桃子?</span></span><br><span class="line"><span class="comment">// -   思路分析:</span></span><br><span class="line"><span class="comment">//     -   第10 天只有一个桃子</span></span><br><span class="line"><span class="comment">//     -   第9天有几个桃子 = (第10天桃子数量 + 1) * 2</span></span><br><span class="line"><span class="comment">//     -   规律: 第 n 天的桃子数据 peach(n) = (peach(n+1) + 1) * 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">peach</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (peach(n+<span class="number">1</span>) + <span class="number">1</span>) * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"第一天的桃子数量为"</span>, peach(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4l8022xpbj20bt00wjrb.jpg" alt="image-20220727091940161"></p><h2 id="函数的注意事项和细节"><a href="#函数的注意事项和细节" class="headerlink" title="函数的注意事项和细节"></a>函数的注意事项和细节</h2><p>1) 函数的<code>形参列表</code>可以是多个，<code>返回值列表</code>也可以是多个。<br>2) 形参列表和返回值列表的数据类型可以是<code>值类型</code>和<code>引用类型</code>。<br>3) 函数的命名遵循标识符命名规范，首字母不能是数字，<code>首字母大写该函数</code>可以被本包文件和其<br>    它包文件使用，类似 public , 首字母小写，只能被本包文件使用，其它包文件不能使用，类似 privat<br>4) <code>函数</code>中的变量是<code>局部</code>的，函数外不生效<br>5) 基本数据类型和数组默认都是值传递的，即进行值拷贝。在函数内修改，不会影响到原来的值。可以参考<a href="##函数的调用机制">函数的调用机制</a><br>6) 如果希望<code>函数内的变量</code>能修改<code>函数外的变量</code>(指的是默认以值传递的方式的数据类型)，可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果上看类似引用 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">*n = *n + <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">"n="</span>, *n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="keyword">int</span> = <span class="number">20</span></span><br><span class="line">test(&amp;n1)</span><br><span class="line">fmt.Println(<span class="string">"n1="</span>, n1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n= <span class="number">30</span></span><br><span class="line">n1= <span class="number">30</span></span><br></pre></td></tr></table></figure><ol start="7"><li>Go函数不支持函数重载</li></ol><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4li4soq97j20je07rjrt.jpg" alt="image-20220727151013127" style="zoom:67%;"><ol start="8"><li>在 Go 中，<code>函数</code>也是一种<code>数据类型</code>，可以赋值给一个变量，则该变量就是一个函数类型的变量了。通过该变量可以对函数调用</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := getSum</span><br><span class="line">fmt.Printf(<span class="string">"a的类型是%T, getSum的类型是%T \n"</span>, a, getSum)</span><br><span class="line"></span><br><span class="line">n1 := <span class="number">10</span></span><br><span class="line">n2 := <span class="number">20</span></span><br><span class="line">fmt.Println(<span class="string">"n1+n2="</span>, a(n1, n2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4lii7d2d7j20c9016dft.jpg" alt="image-20220727152305861"></p><ol start="9"><li><code>函数</code>既然是一种<code>数据类型</code>，因此在 Go 中，函数可以作为形参，并且调用</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的funvar表示函数的变量名,例如int的变量名是num1和num2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFun</span><span class="params">(funvar <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">num1</span> <span class="title">int</span>, <span class="title">num2</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> funvar(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">n1 := <span class="number">10</span></span><br><span class="line">n2 := <span class="number">20</span></span><br><span class="line">fmt.Println(<span class="string">"n1+n2="</span>, myFun(getSum, n1, n2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4lir7u9a7j20bw00tq2u.jpg" alt="image-20220727153145866"></p><ol start="10"><li>为了简化数据类型定义，Go 支持<code>自定义数据类型</code></li></ol><p>基本语法:</p><ul><li>type 自定义数据类型名 数据类型     // 理解: 相当于一个别名 </li></ul><p>案例1:</p><ul><li>type myInt int     // 这时 myInt 就等价 int 来使用了.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> myInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n1 myInt</span><br><span class="line"><span class="keyword">var</span> n2 <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">n1 = <span class="number">1</span></span><br><span class="line">n2 = <span class="keyword">int</span>(n1) <span class="comment">//虽然能自定义,但是系统认为这是两个不同的变量类型</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"n1="</span>, n1, <span class="string">"n2="</span>, n2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2:</p><ul><li>自定义函数类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myFunType <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>// 在刚才的代码上进行修改,增加此行</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">myFun</span><span class="params">(funvar myFunType, num1 <span class="keyword">int</span>, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;<span class="comment">// 直接使用myFunType类型定义funvar变量参数</span></span><br><span class="line"><span class="keyword">return</span> funvar(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">n1 := <span class="number">10</span></span><br><span class="line">n2 := <span class="number">20</span></span><br><span class="line">fmt.Println(<span class="string">"n1+n2="</span>, myFun(getSum, n1, n2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>支持对函数返回值命名</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSumAndSub1</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>, sub <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">sum = n1 + n2</span><br><span class="line">sub = n1 - n2</span><br><span class="line"><span class="keyword">return</span> sum, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum, sub := getSumAndSub1(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"sum=%d, sub=%d \n"</span>, sum, sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="12"><li>使用 _ 标识符，忽略返回值</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum, _ := getSumAndSub1(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"sum=%d \n"</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="13"><li>Go支持可变参数</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, args ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum := n1</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(args); i++ &#123;</span><br><span class="line">sum += args[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result := sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Println(<span class="string">"1+2+3+4="</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h2><blockquote><p>  每一个源文件都可以包含一个 init 函数，该函数会在 main 函数执行前，被 Go 运行框架调用，也 就是说 init 会在 main 函数前被调用。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"init()..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"main()..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4lk1a9rkdj20bu017glj.jpg" alt="image-20220727161602326"></p><h3 id="init函数的注意事项和细节"><a href="#init函数的注意事项和细节" class="headerlink" title="init函数的注意事项和细节"></a>init函数的注意事项和细节</h3><ol><li>如果一个文件同时包含<code>全局变量定义</code>，<code>init 函数</code>和 <code>main 函数</code>，则执行的流程为:</li></ol><ul><li>全局变量定义</li><li>init函数</li><li>main 函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line"><span class="keyword">var</span> age = test()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"test()..."</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"init()..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"main... num="</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4lkcz5qhmj20br01ha9y.jpg" alt="image-20220727162716758"></p><p>从上图可以看到,函数<code>test()</code>先被执行了,也就是说全局变量<code>age</code>首先被执行</p><ol start="2"><li>init函数最主要的作用，就是完成一些初始化的工作</li><li>分析下图的执行顺序</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4mfwe9qhqj20mq0cfjrt.jpg" alt="image-20220728103828158"></p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><blockquote><p>  Go 支持匿名函数，匿名函数就是没有名字的函数，如果我们某个函数只是希望使用一次，可以考 虑使用匿名函数，匿名函数也可以实现多次调用。</p></blockquote><ul><li>案例一</li></ul><blockquote><p>   在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 直接调用,只能使用一次</span></span><br><span class="line">result := <span class="function"><span class="keyword">func</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"n1+n2="</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例二</li></ul><blockquote><p>  将匿名函数赋给一个变量(函数变量)，再通过该变量来调用匿名函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 直接调用,只能使用一次</span></span><br><span class="line">result := <span class="function"><span class="keyword">func</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"n1+n2="</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// a的数据类型为函数类型,通过该变量来调用匿名函数</span></span><br><span class="line">a := <span class="function"><span class="keyword">func</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res := a(<span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局匿名函数"><a href="#全局匿名函数" class="headerlink" title="全局匿名函数"></a>全局匿名函数</h3><blockquote><p>  如果将匿名函数赋给一个全局变量，那么这个匿名函数，就成为一个全局匿名函数，可以在程序有效。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">Fun = <span class="function"><span class="keyword">func</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 * n2</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := Fun(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Println(<span class="string">"n1 * n2 ="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>  闭包就是一个函数和与其相关的引用环境组合的一个整体(实体)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n = n + x</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := AddUpper()</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4mhmi2b3fj20dm01lt8l.jpg" alt="image-20220728113811995"></p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4kfp7tpl0j20bs0bsdg9.jpg" alt="image-20220726170028404" style="zoom:67%;"><p>我表示很懵逼啊,什么玩意儿???</p><ul><li>对上面代码的说明和总结</li></ul><p>1) AddUpper 是一个函数，返回的数据类型是<code>fun (int) int</code><br>2) 闭包的说明: 返回的是一个<code>匿名函数</code>, 但是这个匿名函数引用到<code>函数外</code>的 <code>n</code> ,因此这个<code>匿名函数</code>就和<code>n</code> 形成一个整体，构成闭包<br>3) 大家可以这样理解: <code>闭包是类</code>,<code>函数是操作</code>，<code>n 是字段</code>。函数和它使用到 n 构成闭包。<br>4) 当我们反复的调用<code>f 函数</code>时，因为 n 是初始化一次，因此每调用一次就进行累计。<br>5) 我们要搞清楚闭包的关键，就是要分析出返回的函数它使用(引用)到哪些变量，因为函数和它引用到的变量共同构成闭包。</p><ul><li>更改一下上面的代码</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n = n + x</span><br><span class="line">str += <span class="keyword">string</span>(<span class="number">36</span>) <span class="comment">//ASCII码中,36对应的是 "$"</span></span><br><span class="line">fmt.Println(<span class="string">"str="</span>, str)</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := AddUpper()</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4mkh72fz9j20dc02q0so.jpg" alt="image-20220728131653658"></p><h3 id="闭包的最佳实践"><a href="#闭包的最佳实践" class="headerlink" title="闭包的最佳实践"></a>闭包的最佳实践</h3><ul><li>请编写一个程序,具体要求如下<ul><li>编写一个函数 <code>makeSuffix(suffix string)</code>可以接收一个文件后缀名(比如.jpg)，并返回一个闭包</li><li>调用闭包，可以传入一个文件名，如果该文件名没有指定的后缀(比如.jpg) ,则返回文件名.jpg , 如果已经有.jpg 后缀，则返回原文件名。</li><li>要求使用闭包的方式完成</li><li>strings.HasSuffix , 该函数可以判断某个字符串是否有指定的后缀。</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// -   编写一个函数 makeSuffix(suffix string) 可以接收一个文件后缀名(比如.jpg)，并返回一个闭包</span></span><br><span class="line"><span class="comment">// -   调用闭包，可以传入一个文件名，如果该文件名没有指定的后缀(比如.jpg) ,则返回 文件名.jpg , 如果已经有.jpg 后缀，则返回原文件名。</span></span><br><span class="line"><span class="comment">// -   要求使用闭包的方式完成</span></span><br><span class="line"><span class="comment">// -   strings.HasSuffix , 该函数可以判断某个字符串是否有指定的后缀。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffix</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果 name 没有指定后缀,则加上,否则就返回原来的名字</span></span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line"><span class="keyword">return</span> name + suffix</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := makeSuffix(<span class="string">".jpg"</span>)</span><br><span class="line">fmt.Println(<span class="string">"文件名处理后="</span>, f(<span class="string">"1"</span>))</span><br><span class="line">fmt.Println(<span class="string">"文件名处理后="</span>, f(<span class="string">"2.jpg"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4mluxbyrbj20dj018748.jpg" alt="image-20220728140441341"></p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><blockquote><p>  在函数中，程序员经常需要创建资源(比如:数据库连接、文件句柄、锁等) ，为了在函数执行完毕后，及时的释放资源，Go 的设计者提供 defer (延时机制)。</p></blockquote><h3 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 当执行到defer时,暂时不执行,会将defer后面的语句压入到独立的栈(defer栈)</span></span><br><span class="line"><span class="comment">// 当函数执行完毕后,再从defer栈,按照先入后出的方式出栈执行</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"ok1 n1="</span>, n1)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"ok2 n2="</span>, n2)</span><br><span class="line"></span><br><span class="line">res := n1 + n2</span><br><span class="line">fmt.Println(<span class="string">"ok3 res="</span>, res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4mm9al52yj20f9020t8o.jpg" alt="image-20220728141829569"></p><h3 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><p>1) 当 go 执行到一个 defer 时，不会立即执行 defer 后的语句，而是将 defer 后的语句压入到一个<code>栈</code>中[我为了讲课方便，暂时称该栈为 <code>defer 栈</code>], 然后继续执行函数下一个语句。<br>2) 当函数执行完毕后，在从 defer 栈中，依次从栈顶取出语句执行(注:遵守栈<code>先入后出</code>的机制)<br>3) 在 defer 将语句放入到栈时，也会将相关的值拷贝同时入栈。</p><ul><li>看代码</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 当执行到defer时,暂时不执行,会将defer后面的语句压入到独立的栈(defer栈)</span></span><br><span class="line"><span class="comment">// 当函数执行完毕后,再从defer栈,按照先入后出的方式出栈执行</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"ok1 n1="</span>, n1)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"ok2 n2="</span>, n2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加部分</span></span><br><span class="line">n1++           <span class="comment">// n1 = 11</span></span><br><span class="line">n2++           <span class="comment">// n2 = 21</span></span><br><span class="line">res := n1 + n2 <span class="comment">// res = 32</span></span><br><span class="line">fmt.Println(<span class="string">"ok3 res="</span>, res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看执行结果</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4mmkphvyij20eu0230sq.jpg" alt="image-20220728142928572"></p><blockquote><p>  当执行两个<code>defer</code>语句的时候,这两行被放入了<code>defer栈</code>中,所以它并没有参与到下面的计算之中,等函数执行完毕后,才会根据先入后出的原则依次执行,所以我们会看到这样的结果</p></blockquote><h3 id="defer-的最佳实践"><a href="#defer-的最佳实践" class="headerlink" title="defer 的最佳实践"></a>defer 的最佳实践</h3><blockquote><p>  defer 最主要的价值是在，当函数执行完毕后，可以及时的释放函数创建的资源。</p></blockquote><p>模拟代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 关闭文件资源</span></span><br><span class="line">    file = openfile(文件名)</span><br><span class="line">    <span class="keyword">defer</span> file.<span class="built_in">close</span>()</span><br><span class="line">    <span class="comment">// 其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用defer的好处:</li></ul><p>1) 在 golang 编程中的通常做法是，创建资源后，比如(打开了文件，获取了数据库的链接，或者是<br>    锁资源)， 可以执行 defer file.Close() defer connect.Close()<br>2) 在 defer 后，可以继续使用创建资源.<br>3) 当函数完毕后，系统会依次从 defer 栈中，取出语句，关闭资源.<br>4) 这种机制，非常简洁，程序员不用再为在什么时机关闭资源而烦心。</p><h2 id="字符串常用系统函数"><a href="#字符串常用系统函数" class="headerlink" title="字符串常用系统函数"></a>字符串常用系统函数</h2><h3 id="统计字符串长度-len"><a href="#统计字符串长度-len" class="headerlink" title="统计字符串长度: len()"></a>统计字符串长度: len()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"Hello"</span></span><br><span class="line">fmt.Println(<span class="string">"str len"</span>, <span class="built_in">len</span>(str))</span><br></pre></td></tr></table></figure><h3 id="字符串遍历"><a href="#字符串遍历" class="headerlink" title="字符串遍历"></a>字符串遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str := <span class="string">"Hello北京"</span></span><br><span class="line"><span class="comment">// 字符串遍历,同时处理有中文的问题 r := []rune(str)</span></span><br><span class="line">r := []<span class="keyword">rune</span>(str)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt; <span class="built_in">len</span>(r); i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"字符=%c \n"</span>, r[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串转整数"><a href="#字符串转整数" class="headerlink" title="字符串转整数"></a>字符串转整数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n, err := strconv.Atoi(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"转换错误"</span>, err)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"转成的结果是"</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数转字符串"><a href="#整数转字符串" class="headerlink" title="整数转字符串"></a>整数转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = strconv.Itoa(<span class="number">12345</span>)</span><br><span class="line">fmt.Printf(<span class="string">"str=%v, str=%T \n"</span>, str, str)</span><br></pre></td></tr></table></figure><h3 id="字符串转-byte"><a href="#字符串转-byte" class="headerlink" title="字符串转[]byte"></a>字符串转[]byte</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bytes = []<span class="keyword">byte</span>(<span class="string">"Hello go"</span>)</span><br><span class="line">fmt.Println(<span class="string">"bytes=%v \n"</span>, bytes)</span><br></pre></td></tr></table></figure><h3 id="byte转字符串"><a href="#byte转字符串" class="headerlink" title="[]byte转字符串"></a>[]byte转字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="keyword">string</span>([]<span class="keyword">byte</span>&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>&#125;)</span><br><span class="line">fmt.Printf(<span class="string">"str=%v \n"</span>, str)</span><br></pre></td></tr></table></figure><h3 id="十进制转其它进制-1"><a href="#十进制转其它进制-1" class="headerlink" title="十进制转其它进制"></a>十进制转其它进制</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = strconv.FormatInt(<span class="number">123</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">"123对应的二进制是:%v \n"</span>, str)</span><br><span class="line">str = strconv.FormatInt(<span class="number">123</span>, <span class="number">16</span>)</span><br><span class="line">fmt.Printf(<span class="string">"123对应的十六进制是:%v \n"</span>, str)</span><br></pre></td></tr></table></figure><h3 id="查找子串是否在指定的字符串中"><a href="#查找子串是否在指定的字符串中" class="headerlink" title="查找子串是否在指定的字符串中"></a>查找子串是否在指定的字符串中</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b := strings.Contains(<span class="string">"seafood"</span>, <span class="string">"foo"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"b=%v \n"</span>, b)</span><br></pre></td></tr></table></figure><h3 id="统计子串个数"><a href="#统计子串个数" class="headerlink" title="统计子串个数"></a>统计子串个数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num := strings.Count(<span class="string">"ceheese"</span>, <span class="string">"e"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"num=%v \n"</span>, num)</span><br></pre></td></tr></table></figure><h3 id="不区分大小写的字符串比较"><a href="#不区分大小写的字符串比较" class="headerlink" title="不区分大小写的字符串比较"></a>不区分大小写的字符串比较</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = strings.EqualFold(<span class="string">"abc"</span>, <span class="string">"Abc"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"b=%v \n"</span>, b)<span class="comment">// true</span></span><br><span class="line">fmt.Println(<span class="string">"结果"</span>, <span class="string">"abc"</span> == <span class="string">"Abc"</span>)<span class="comment">// false, 区分大小写</span></span><br></pre></td></tr></table></figure><h3 id="获取指定字符的索引"><a href="#获取指定字符的索引" class="headerlink" title="获取指定字符的索引"></a>获取指定字符的索引</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回子串在字符串第一次出现的 index 值，如果没有返回-1</span></span><br><span class="line">index := strings.Index(<span class="string">"NLT_abcabcabc"</span>, <span class="string">"abc"</span>)<span class="comment">//4</span></span><br><span class="line">fmt.Printf(<span class="string">"index=%v \n"</span>, index)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回子串在字符串最后一次出现的 index，如没有返回-1</span></span><br><span class="line">index := strings.LastIndex(<span class="string">"go golang"</span>, <span class="string">"go"</span>)<span class="comment">//3</span></span><br><span class="line">fmt.Printf(<span class="string">"index=%v \n"</span>, index)</span><br></pre></td></tr></table></figure><h3 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strings.Replace("go go hello", "go", "go 语言", n) </span></span><br><span class="line"><span class="comment">// n 可以指定你希望替换几个，如果 n=-1 表示全部替换</span></span><br><span class="line">str1 = <span class="string">"go go hello"</span></span><br><span class="line">str2 = strings.Replace(str1, <span class="string">"go"</span>, <span class="string">"北京"</span>, <span class="number">-1</span>)</span><br><span class="line">fmt.Printf(<span class="string">"str1=%v str2=%v \n"</span>, str1, str2)</span><br></pre></td></tr></table></figure><h3 id="分隔字符串"><a href="#分隔字符串" class="headerlink" title="分隔字符串"></a>分隔字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照指定的某个字符，为分割标识，将一个字符串拆分成字符串数组</span></span><br><span class="line">strArr := strings.Split(<span class="string">"Hello,world,ok"</span>, <span class="string">","</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(strArr); i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"str[%v]=%v \n"</span>, i, strArr[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"strArr=%v \n"</span>, strArr)</span><br></pre></td></tr></table></figure><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"golang Hello"</span></span><br><span class="line">str = strings.ToLower(str)</span><br><span class="line">str = strings.toUpper(str)</span><br><span class="line">fmt.Printf(<span class="string">"str=%v \n"</span>, str)<span class="comment">//golang hello</span></span><br></pre></td></tr></table></figure><h3 id="去除两边空格"><a href="#去除两边空格" class="headerlink" title="去除两边空格"></a>去除两边空格</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = strings.TrimSpace(<span class="string">" a b c d "</span>)</span><br><span class="line">fmt.Printf(<span class="string">"str=%v \n"</span>, str)</span><br></pre></td></tr></table></figure><h3 id="去除两遍指定字符"><a href="#去除两遍指定字符" class="headerlink" title="去除两遍指定字符"></a>去除两遍指定字符</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = strings.Trim(<span class="string">"! a b c d! "</span>, <span class="string">" !"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"str=%v \n"</span>, str)</span><br><span class="line"><span class="comment">// 将字符串左边指定的字符去掉 : strings.TrimLeft("! hello! ", " !")</span></span><br><span class="line"><span class="comment">// 将字符串右边指定的字符去掉 :strings.TrimRight("! hello! ", " !")</span></span><br></pre></td></tr></table></figure><h3 id="判断字符串开头-结束内容"><a href="#判断字符串开头-结束内容" class="headerlink" title="判断字符串开头/结束内容"></a>判断字符串开头/结束内容</h3><ul><li>判断字符串是否以指定的字符串开头: strings.HasPrefix(“<a href="ftp://192.168.10.1&quot;" target="_blank" rel="noopener">ftp://192.168.10.1&quot;</a>, “ftp”)    //true</li><li>判断字符串是否以指定的字符串结束: strings.HasSuffix(“NLT_abc.jpg”, “abc”) //false</li></ul><h2 id="时间和日期相关函数"><a href="#时间和日期相关函数" class="headerlink" title="时间和日期相关函数"></a>时间和日期相关函数</h2><blockquote><p>  在编程中，程序员会经常使用到日期相关的函数，比如:统计某段代码执行花费的时间等等。</p></blockquote><ul><li>获取当前时间</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//看看日期和时间相关函数和方法使用</span></span><br><span class="line"><span class="comment">//获取当前时间</span></span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">"now=%v now-type=%T \n"</span>, now, now)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4npzswif3j20f600rglm.jpg" alt="image-20220729131319622" style="zoom:120%;"><ul><li>获取其他日期信息</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//看看日期和时间相关函数和方法使用</span></span><br><span class="line"><span class="comment">//获取当前时间</span></span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">"now=%v now-type=%T \n"</span>, now, now)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过now可以获取到年月日时分秒</span></span><br><span class="line">fmt.Printf(<span class="string">"年=%v \n"</span>, now.Year())</span><br><span class="line">fmt.Printf(<span class="string">"月=%v \n"</span>, now.Month())</span><br><span class="line">fmt.Printf(<span class="string">"月=%v \n"</span>, <span class="keyword">int</span>(now.Month()))</span><br><span class="line">fmt.Printf(<span class="string">"日=%v \n"</span>, now.Day())</span><br><span class="line">fmt.Printf(<span class="string">"时=%v \n"</span>, now.Hour())</span><br><span class="line">fmt.Printf(<span class="string">"分=%v \n"</span>, now.Minute())</span><br><span class="line">fmt.Printf(<span class="string">"秒=%v \n"</span>, now.Second())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4nq745jvtj20f303jglr.jpg" alt="image-20220729132021387"></p><ul><li>时间格式化输出</li></ul><p><strong>Printf 或者 Sprintf</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式化输出</span></span><br><span class="line"><span class="comment">//Printf</span></span><br><span class="line">fmt.Printf(<span class="string">"%d-%d-%d %d:%d:%d \n"</span>, now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second())</span><br><span class="line"><span class="comment">//SPrintf</span></span><br><span class="line">date := fmt.Sprintf(<span class="string">"%d-%d-%d %d:%d:%d \n"</span>, now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), now.Second())</span><br><span class="line">fmt.Printf(<span class="string">"date=%v"</span>, date)</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4nqftryiej205300t0sj.jpg" alt="image-20220729132844121" style="zoom:150%;"><p><strong>time.Format()</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Format(),里面必须写成 2006-01-02 15:04:05 !</span></span><br><span class="line">fmt.Printf(now.Format(<span class="string">"2006-01-02 15:04:05"</span>))</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Printf(now.Format(<span class="string">"2006-01-02"</span>))</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Printf(now.Format(<span class="string">"15:04:05"</span>))</span><br><span class="line">fmt.Println()</span><br></pre></td></tr></table></figure><ul><li>时间的常量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ( </span><br><span class="line">    NanosecondDuration = <span class="number">1</span> <span class="comment">//纳秒</span></span><br><span class="line">Microsecond= <span class="number">1000</span> * Nanosecond <span class="comment">//微秒</span></span><br><span class="line">    Millisecond = <span class="number">1000</span> * Microsecond <span class="comment">//毫秒</span></span><br><span class="line">    Second = <span class="number">1000</span> * Millisecond <span class="comment">//秒</span></span><br><span class="line">    Minute = <span class="number">60</span> * Second <span class="comment">//分钟</span></span><br><span class="line">Hour = <span class="number">60</span> * Minute <span class="comment">//小时</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>常量的作用:</p><blockquote><p>  在程序中可用于获取指定时间单位的时间，比如想得到 100 毫秒</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> * time.Millisecond</span><br></pre></td></tr></table></figure><p>也可以结合Sleep使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.Sleep(time.Millisecond * <span class="number">100</span>)<span class="comment">//等待0.1秒</span></span><br></pre></td></tr></table></figure><ul><li>时间戳</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"unix时间戳=%v, unixnano时间戳=%v \n"</span>, now.Unix(), now.UnixNano())</span><br></pre></td></tr></table></figure><p>返回结果:</p><blockquote><p>  unix时间戳=1659074372,  unixnano时间戳=1659074372349450000 </p></blockquote><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>文档地址: <a href="https://studygolang.com/pkgdoc" target="_blank" rel="noopener">https://studygolang.com/pkgdoc</a></p><ul><li><p><strong>len:</strong> 用来求长度，比如<code>string</code>、<code>array</code>、<code>slice</code>、<code>map</code>、<code>channel</code></p></li><li><p><strong>new:</strong> 用来分配内存，主要用来分配值类型，比如<code>int</code>、<code>float32</code>, <code>struct</code>…返回的是指针</p></li></ul><h3 id="new的使用"><a href="#new的使用" class="headerlink" title="new的使用"></a>new的使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">num1 := <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">"num1的类型为%T, num1的值为%v, num1的地址为%v \n"</span>, num1, num1, &amp;num1)</span><br><span class="line"></span><br><span class="line">num2 := <span class="built_in">new</span>(<span class="keyword">int</span>) <span class="comment">//*int</span></span><br><span class="line"><span class="comment">//num2的类型%T =&gt; *int</span></span><br><span class="line"><span class="comment">//num2的值 = 系统分配的地址 0xc0000140a8</span></span><br><span class="line"><span class="comment">//num2的地址%v = 系统分配的地址 0xc00000e030</span></span><br><span class="line"><span class="comment">//num2指向的值 = 100</span></span><br><span class="line">*num2 = <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">"num2的类型=%T, num2的值=%v, num2的地址=%v, num2指针指向的值=%v \n"</span>, num2, num2, &amp;num2, *num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><blockquote><p>  num1的类型为int, num1的值为100, num1的地址为0xc0000140a0<br>  num2的类型=*int, num2的值=0xc0000140a8, num2的地址=0xc00000e030, num2指针指向的值=100</p></blockquote><ul><li>make</li></ul><blockquote><p>  用来分配内存，主要用来分配引用类型，比如channel、map、slice。</p></blockquote><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><blockquote><p>  Go 中可以抛出一个<code>panic</code> 的异常，然后在 <code>defer</code> 中通过 <code>recover</code>捕获这个异常，然后正常处理</p></blockquote><h3 id="defer-recover-处理错误"><a href="#defer-recover-处理错误" class="headerlink" title="defer+recover 处理错误"></a>defer+recover 处理错误</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//使用 defer + recover 来捕获和处理异常</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        err := <span class="built_in">recover</span>()<span class="comment">//recover()内置函数,可以捕获到异常</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;<span class="comment">//说明捕获到错误</span></span><br><span class="line">            fmt.Println(<span class="string">"err="</span>, err)</span><br><span class="line">            <span class="comment">//可以将错误信息通过邮箱发送给管理员</span></span><br><span class="line">            fmt.Println(<span class="string">"发送邮件给管理员"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    num1 := <span class="number">10</span></span><br><span class="line">    num2 := <span class="number">0</span></span><br><span class="line">    res := num1 / num2</span><br><span class="line">    fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"main()下面的代码..."</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4ns373hszj20ed056jrp.jpg" alt="image-20220729142547680"></p><h3 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h3><blockquote><p>  Go 程序中，也支持自定义错误， 使用 errors.New 和 panic 内置函数</p></blockquote><p>1) <code>errors.New</code>(“错误说明”) , 会返回一个 <code>error</code>类型的值，表示一个错误<br>2) <code>panic</code> 内置函数 ,接收一个 <code>interface{}</code> 类型的值(也就是任何值了)作为参数。可以接收 error 类型的变量，输出错误信息，并退出程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数去读取配置文件init.conf的信息</span></span><br><span class="line"><span class="comment">//如果文件名传入不正确,我们就返回一个自定义的错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readConf</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"config.ini"</span> &#123;</span><br><span class="line"><span class="comment">//读取...</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//返回一个自定义错误</span></span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"读取文件错误.."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := readConf(<span class="string">"config2.ini"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//如果读取文件发送错误,panic就输出这个错误,并终止程序</span></span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"test02继续执行..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test02()</span><br><span class="line">fmt.Println(<span class="string">"main下面的代码"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4ntmk9yvkj20fw03j0t2.jpg" alt="image-20220729151859997"></p><blockquote><p>  因为传入<code>test02</code>中的配置文件名为<code>config2.ini</code>,触发了if判断,所以panic已经输出并终止程序,所以不会看到下面的内容了</p></blockquote><h1 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>  数组可以存放多个同一类型数据。数组也是一种数据类型，在 Go 中，数组是值类型。</p></blockquote><h3 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h3><ul><li>一个养鸡场有 6 只鸡，它们的体重分别是 3kg,5kg,1kg,3.4kg,2kg,50kg 。请问这六只鸡的总体重是<br>多少?平均体重是多少? 请你编一个程序。使用数组解决!</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//1.定义一个数组</span></span><br><span class="line"><span class="keyword">var</span> hens [<span class="number">7</span>]<span class="keyword">float64</span></span><br><span class="line"><span class="comment">//2.给数组的每个元素赋值,元素的下标是从0开始的 0-5</span></span><br><span class="line">hens[<span class="number">0</span>] = <span class="number">3.0</span></span><br><span class="line">hens[<span class="number">1</span>] = <span class="number">5.0</span></span><br><span class="line">hens[<span class="number">2</span>] = <span class="number">1.0</span></span><br><span class="line">hens[<span class="number">3</span>] = <span class="number">3.4</span></span><br><span class="line">hens[<span class="number">4</span>] = <span class="number">2.0</span></span><br><span class="line">hens[<span class="number">5</span>] = <span class="number">50.0</span></span><br><span class="line">hens[<span class="number">6</span>] = <span class="number">150.0</span> <span class="comment">//增加一只鸡...鸡你太美</span></span><br><span class="line"><span class="comment">//3.遍历数组求出总体重</span></span><br><span class="line">totalWeight2 := <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(hens); i++ &#123;</span><br><span class="line">totalWeight2 += hens[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.求出平均体重</span></span><br><span class="line">avgWeight2 := fmt.Sprintf(<span class="string">"%.2f"</span>, totalWeight2/<span class="keyword">float64</span>(<span class="built_in">len</span>(hens)))</span><br><span class="line">fmt.Printf(<span class="string">"totalWeight2=%v, avgWeight2=%v \n"</span>, totalWeight2, avgWeight2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4nuuvltsmj20dv00t749.jpg" alt="image-20220729160135788"></p><h3 id="数组定义与内存布局"><a href="#数组定义与内存布局" class="headerlink" title="数组定义与内存布局"></a>数组定义与内存布局</h3><ul><li>数组的定义</li></ul><blockquote><p>  var 数组名 [数组大小]数据类型</p><p>  example:</p><p>  ​    var a [5]int</p></blockquote><ul><li>数组的内存布局(<code>重要</code>)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intArr [<span class="number">3</span>]<span class="keyword">int</span> <span class="comment">//int占8个字节</span></span><br><span class="line"><span class="comment">//当我们定义完数组后,其实数组的各个元素有默认值 0</span></span><br><span class="line">fmt.Println(intArr)</span><br><span class="line">intArr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">intArr[<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line">intArr[<span class="number">2</span>] = <span class="number">30</span></span><br><span class="line">fmt.Println(intArr)</span><br><span class="line">fmt.Printf(<span class="string">"intArr的地址=%p, intArr[0]地址=%p, intArr[1]地址=%p, intArr[2]地址=%p \n"</span>, &amp;intArr, &amp;intArr[<span class="number">0</span>], &amp;intArr[<span class="number">1</span>], &amp;intArr[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4nvm5zdn7j20lj01k0sv.jpg" alt="image-20220729162749243"></p><p>对上图的总结:<br>1) 数组的地址可以通过数组名来获取 <code>&amp;intArr</code><br>2) 数组的第一个元素的地址，就是数组的首地址,后面依次加<code>n个字节</code><br>3) 数组的各个元素的地址间隔是依据数组的类型决定，比如 int64 -&gt; 8, int32-&gt;4…</p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><ul><li>从终端循环输入5个成绩,保存到float64数组并输出</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> score [<span class="number">5</span>]<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(score); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"请输入第%d个元素的值 \n"</span>, i+<span class="number">1</span>)</span><br><span class="line">fmt.Scanln(&amp;score[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(score); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"score[%d]=%v \n"</span>, i, score[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4nwgaq7ngj20ea068aab.jpg" alt="image-20220729165647184"></p><ul><li>四种初始化数组的方式</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统方式</span></span><br><span class="line"><span class="keyword">var</span> numArr01 [<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"numArr01="</span>, numArr01)</span><br><span class="line"><span class="comment">//简化方式</span></span><br><span class="line"><span class="keyword">var</span> numArr02 = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"numArr02="</span>, numArr02)</span><br><span class="line"><span class="comment">//缺省方式</span></span><br><span class="line"><span class="keyword">var</span> numArr03 = [...]<span class="keyword">int</span>&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"numArr03="</span>, numArr03)</span><br><span class="line"><span class="comment">//缺省+索引方式</span></span><br><span class="line"><span class="keyword">var</span> numArr04 = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">800</span>, <span class="number">0</span>: <span class="number">900</span>, <span class="number">2</span>: <span class="number">999</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"numArr04="</span>, numArr04)</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型推导</span></span><br><span class="line">strArr05 := [...]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"tom"</span>, <span class="number">0</span>: <span class="string">"jack"</span>, <span class="number">2</span>: <span class="string">"mary"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"strArr05="</span>, strArr05)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4nxb4egttj20e402gjrh.jpg" alt="image-20220729172625047"></p><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><h4 id="常规遍历"><a href="#常规遍历" class="headerlink" title="常规遍历"></a>常规遍历</h4><p>见前面的<a href="###数组的使用">数组的使用</a></p><h4 id="for-range结构遍历"><a href="#for-range结构遍历" class="headerlink" title="for-range结构遍历"></a>for-range结构遍历</h4><blockquote><p>  这是 Go 语言一种独有的结构，可以用来遍历访问数组的元素。</p></blockquote><ul><li>语法结构</li></ul><blockquote><p>  for index, value := range array01 {</p><p>  ​    …</p><p>  }</p></blockquote><ul><li>案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">heroes := [...]<span class="keyword">string</span>&#123;<span class="string">"宋江"</span>, <span class="string">"吴用"</span>, <span class="string">"卢俊义"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> heroes &#123;</span><br><span class="line">fmt.Printf(<span class="string">"i=%v, v=%v \n"</span>, i, v)</span><br><span class="line">fmt.Printf(<span class="string">"heroes[%d]=%v \n"</span>, i, heroes[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> heroes &#123;</span><br><span class="line">fmt.Printf(<span class="string">"元素的值=%v \n"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的注意事项和细节"><a href="#数组的注意事项和细节" class="headerlink" title="数组的注意事项和细节"></a>数组的注意事项和细节</h3><ul><li>数组是多个<code>相同类型数据</code>的组合,一个数组一旦声明/定义了,其长度是<code>固定</code>的, 不能动态变化</li><li>var arr []int 这时 arr 就是一个 slice 切片，切片后面专门讲解，不急哈.</li><li>数组中的元素可以是任何数据类型，包括值类型和引用类型，但是不能混用。</li><li>数组创建后，如果没有赋值，有默认值(零值)<ul><li>数值类型数组:默认值为 0 </li><li>字符串数组: 默认值为 “” </li><li>bool 数组: 默认值为 false</li></ul></li><li>使用数组的步骤 <ul><li>1 声明数组并开辟空间 </li><li>2 给数组各个元素赋值(默认零值) </li><li>3 使用数组</li></ul></li><li>数组的下标是从 0 开始的</li><li>数组下标必须在指定范围内使用，否则报 panic:数组越界，比如 <code>var arr [5]int</code> 则有效下标为 <code>0-4</code></li><li>Go的数组属值类型，在默认情况下是值传递，因此会进行值拷贝。数组间不会相互影响(就是说如果一个函数直接更改数组中的某一个值,只要不直接修改地址的值,原值就不会改变)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(arr [3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">88</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line">test(arr)</span><br></pre></td></tr></table></figure><ul><li>如想在其它函数中，去修改原来的数组，可以使用引用传递(指针方式)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(arr *[3]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    *arr[<span class="number">0</span>] = <span class="number">88</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line">test(&amp;arr)</span><br></pre></td></tr></table></figure><ul><li>长度是数组类型的一部分，在传递函数参数时 需要考虑数组的长度</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4nxvczswtj20n608nwfq.jpg" alt="image-20220729174551635"></p><h3 id="数组应用案例"><a href="#数组应用案例" class="headerlink" title="数组应用案例"></a>数组应用案例</h3><ul><li>案例一<ul><li>创建一个 byte 类型的 26 个元素的数组，分别 放置’A’-‘Z‘。使用 for 循环访问所有元素并打印<br>出来。</li><li>提示:字符数据运算 ‘A’+1 -&gt; ‘B’</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> myChars [<span class="number">26</span>]<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">26</span>; i++ &#123;</span><br><span class="line">myChars[i] = <span class="string">'A'</span> + <span class="keyword">byte</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">26</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%c "</span>, myChars[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4ooqx5i1ej20e300ut8p.jpg" alt="image-20220730091542976"></p><ul><li><p>案例二</p><ul><li>请求出一个数组的最大值，并得到对应的下标</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intArr = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">9</span>, <span class="number">90</span>, <span class="number">11</span>, <span class="number">33</span>&#125;</span><br><span class="line">maxVal := intArr[<span class="number">0</span>]</span><br><span class="line">maxValIndex := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(intArr); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> maxVal &lt; intArr[i] &#123;</span><br><span class="line">maxVal = intArr[i]</span><br><span class="line">maxValIndex = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"maxVal=%v, maxValIndex=%v \n"</span>, maxVal, maxValIndex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4op11epy6j20e100v0sp.jpg" alt="image-20220730092529783"></p></li><li><p>案例三</p><ul><li>请求出一个数组的和和平均值。for-range</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intArr = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">9</span>, <span class="number">90</span>, <span class="number">11</span>, <span class="number">33</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组的平均值</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> intArr &#123;</span><br><span class="line">sum += value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"sum=%v, 平均值为=%v \n"</span>, sum, <span class="keyword">float64</span>(sum)/<span class="keyword">float64</span>(<span class="built_in">len</span>(intArr)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例四<ul><li>要求:随机生成五个数，并将其反转打印</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机生成5个数,rand.Intn()函数</span></span><br><span class="line"><span class="comment">//当我们得到随机数后,就放到一个int数组中</span></span><br><span class="line"><span class="comment">//反转打印,交换的次数是 len / 2, 倒数第一个和第一个元素交换,倒数第二个和第二个元素交换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intArr [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(intArr)</span><br><span class="line"></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">intArr[i] = rand.Intn(<span class="number">100</span>) <span class="comment">// 0 &lt;= n &lt; 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"交换前~="</span>, intArr)</span><br><span class="line"><span class="comment">//反转打印,交换的次数是 len / 2</span></span><br><span class="line">temp := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>/<span class="number">2</span>; i++ &#123;</span><br><span class="line">temp = intArr[<span class="built_in">len</span><span class="number">-1</span>-i]</span><br><span class="line">intArr[<span class="built_in">len</span><span class="number">-1</span>-i] = intArr[i]</span><br><span class="line">intArr[i] = temp</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"交换后~="</span>, intArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4oql74lqpj20dw01at8q.jpg" alt="image-20220730101927926"></p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><blockquote><p>  先看一个需求:我们需要一个数组用于保存学生的成绩，但是学生的个数是不确定的，请问怎么办?解决方案 =&gt; 使用切片。</p></blockquote><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>1) 切片的英文是 slice<br>2) 切片是数组的一个<code>引用</code>，因此切片是<code>引用类型</code>，在进行传递时，遵守引用传递的机制。<br>3) 切片的使用和数组类似，遍历切片、访问切片的元素和求切片长度 len(slice)都一样。<br>4) 切片的长度是可以变化的，因此切片是一个可以动态变化数组。<br>5) 切片定义的基本语法:<code>var 切片名 []类型</code></p><h3 id="快速入门-4"><a href="#快速入门-4" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intArr [<span class="number">5</span>]<span class="keyword">int</span> = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">99</span>&#125;</span><br><span class="line"><span class="comment">//声明一个切片</span></span><br><span class="line"><span class="comment">//slice := intArr[1:3]</span></span><br><span class="line"><span class="comment">//1.slice就是切片名</span></span><br><span class="line"><span class="comment">//2.intArr[1:3] 表示 slice 引用到intArr这个数组</span></span><br><span class="line"><span class="comment">//3.引用intArr数组的起始下标为1,最后的下标为3</span></span><br><span class="line">slice := intArr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(<span class="string">"intArr"</span>, intArr)</span><br><span class="line">fmt.Println(<span class="string">"slice 的元素是:"</span>, slice)</span><br><span class="line">fmt.Println(<span class="string">"slice的元素个数="</span>, <span class="built_in">len</span>(slice))</span><br><span class="line">fmt.Println(<span class="string">"slice 的容量="</span>, <span class="built_in">cap</span>(slice)) <span class="comment">//切片的容量可以动态变化,根据目前切片的大小自动分配调整</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4oszxis4kj20ea01zwej.jpg" alt="image-20220730114248953"></p><h3 id="切片在内存中形式-重要"><a href="#切片在内存中形式-重要" class="headerlink" title="切片在内存中形式(重要)"></a>切片在内存中形式(重要)</h3><blockquote><p>  为了让大家更加深入的理解切片，我们画图分析一下切片在内存中是如何布局的，这个是一个非常重要的知识点:(以前面的案例来分析)</p></blockquote><ul><li>画出前面的切片内存布局</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4ow03tlluj20hd06rdg1.jpg" alt="image-20220730132646416"></p><p>总结:</p><ol><li>slice 是一个<code>引用类型</code>,改变切片中的内容,对应的数组内容也会发生改变,因为指向的是同一个地址</li><li>slice 从底层来说，其实就是一个数据结构(struct 结构体) </li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">ptr *[<span class="number">2</span>]<span class="keyword">int</span> </span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span> </span><br><span class="line">    <span class="built_in">cap</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果更改切片的内容,对应的数组内容也会发生改变,因为指向的是同一个地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intArr [<span class="number">5</span>]<span class="keyword">int</span> = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">99</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改前</span></span><br><span class="line">slice := intArr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">fmt.Println(<span class="string">"更改前的intArr="</span>, intArr)</span><br><span class="line">fmt.Println(<span class="string">"更改后的slice="</span>, slice)</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改后</span></span><br><span class="line">slice[<span class="number">1</span>] = <span class="number">100</span> <span class="comment">//将切片的第一个元素的值改为 100</span></span><br><span class="line">fmt.Println(<span class="string">"更改后的intArr="</span>, intArr)</span><br><span class="line">fmt.Println(<span class="string">"更改后的slice="</span>, slice)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4ow8rinzhj20e801zglp.jpg" alt="image-20220730133506159"></p><h3 id="切片的使用"><a href="#切片的使用" class="headerlink" title="切片的使用"></a>切片的使用</h3><h4 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h4><blockquote><p>  第一种方式:定义一个切片，然后让切片去引用一个已经创建好的数组，比如前面的案例就是这样的。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intArr [<span class="number">5</span>]<span class="keyword">int</span> = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">99</span>&#125;<span class="comment">//创建数组</span></span><br><span class="line">slice := intArr[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">//切片引用</span></span><br></pre></td></tr></table></figure><h4 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h4><blockquote><p>  通过 make 来创建切片.<br>  基本语法: <code>var 切片名 []type = make([]type, len, [cap])</code></p></blockquote><p>参数说明: </p><ul><li><strong>type:</strong> 就是==数据类型==</li><li><strong>len :</strong> 大小 </li><li>*<em>cap : *</em>指定切片容量(可选， 如果你分配了 cap,则要求 cap&gt;=len)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">float64</span> = <span class="built_in">make</span>([]<span class="keyword">float64</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">slice[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">slice[<span class="number">2</span>] = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(<span class="string">"slice的size="</span>, <span class="built_in">len</span>(slice))</span><br><span class="line">fmt.Println(<span class="string">"slice的cap="</span>, <span class="built_in">cap</span>(slice))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4owogomnyj20dy01ndfu.jpg" alt="image-20220730135011354"></p><p>小结:</p><p>1) 通过 make 方式创建切片可以指定切片的大小和容量<br>2) 如果没有给切片的各个元素赋值，那么就会使用默认值[int , float=&gt; 0, string =&gt;””,  bool =&gt;false]<br>3) 通过 make 方式创建的切片对应的数组是由 make 底层维护，对外不可见，即只能通过 slice 去访问各个元素.</p><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><blockquote><p>  定义一个切片，直接就指定具体数组，使用原理类似 make 的方式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strSlice []<span class="keyword">string</span> = []<span class="keyword">string</span>&#123;<span class="string">"tom"</span>, <span class="string">"jack"</span>, <span class="string">"mary"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"strSlice="</span>, strSlice)</span><br><span class="line">fmt.Println(<span class="string">"strSlice size="</span>, <span class="built_in">len</span>(strSlice))</span><br><span class="line">fmt.Println(<span class="string">"strSlice cap="</span>, <span class="built_in">cap</span>(strSlice))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4owztdc16j209801fjr8.jpg" alt="image-20220730140105588"></p><h4 id="方式一与方式二的区别"><a href="#方式一与方式二的区别" class="headerlink" title="方式一与方式二的区别"></a>方式一与方式二的区别</h4><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4ox0qqx6aj20jj06ywev.jpg" alt="image-20220730140158207"></p><h3 id="切片的遍历"><a href="#切片的遍历" class="headerlink" title="切片的遍历"></a>切片的遍历</h3><p>切片的遍历和数组一样，也有两种方式:</p><ul><li>for 循环常规方式遍历</li><li>for-range 结构遍历切片</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span> = [...]<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">slice := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//常规遍历</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(slice); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"slice[%v]=%v \n"</span>, i, slice[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for-range遍历</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> slice &#123;</span><br><span class="line">fmt.Printf(<span class="string">"i=%v, v=%v \n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4oyfp9xbbj20dy02tt8r.jpg" alt="image-20220730145058698"></p><h3 id="切片的注意事项和细节"><a href="#切片的注意事项和细节" class="headerlink" title="切片的注意事项和细节"></a>切片的注意事项和细节</h3><p>1) 切片初始化时 var slice = arr[startIndex:endIndex]<br>    说明:从 arr 数组下标为 startIndex，取到 下标为 endIndex 的元素(不含 arr[endIndex])。<br>2) 切片初始化时，仍然不能越界。范围在 [0-len(arr)] 之间，但是可以动态增长.</p><ul><li>var slice = arr[0:end] 可以简写 var slice = arr[:end]</li><li>var slice = arr[start:len(arr)] 可以简写: var slice = arr[start:]</li><li>var slice = arr[0:len(arr)] 可以简写: var slice = arr[:]</li></ul><ol start="3"><li><p>cap是一个内置函数，用于统计切片的容量，即最大可以存放多少个元素。</p></li><li><p>切片定义完后，还不能使用，因为本身是一个空的，需要让其引用到一个数组，或者 make 一个空间供切片来使用</p></li><li><p>切片可以继续切片</p></li><li><p>用 append 内置函数，可以对切片进行动态追加</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>&#125;</span><br><span class="line"><span class="comment">//通过append直接给slice追加具体的元素</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>)</span><br><span class="line">fmt.Println(<span class="string">"slice="</span>, slice)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过append将切片slice追加给slice,没错,我追加我自己</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, slice...)</span><br><span class="line">fmt.Println(<span class="string">"slice="</span>, slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4oz7l3zk6j20e60163yk.jpg" alt="image-20220730151746567"></p><ol start="7"><li>切片的拷贝操作</li></ol><blockquote><p>  切片使用 copy 内置函数完成 拷贝，举例说明</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">int</span> = []<span class="keyword">int</span>&#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>&#125;</span><br><span class="line"><span class="keyword">var</span> sliceCopy = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">copy</span>(sliceCopy, slice)</span><br><span class="line">fmt.Println(<span class="string">"sliceCopy="</span>, sliceCopy)</span><br><span class="line">fmt.Println(<span class="string">"slice="</span>, slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ozgejsn8j20e50193yj.jpg" alt="image-20220730152614994"></p><ol start="8"><li>切片是引用类型，所以在传递时，遵守引用传递机制。看两段代码，并分析底层原理</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ozi5x1szj20ja06ut9c.jpg" alt="image-20220730152755854"></p><h3 id="string-和-slice"><a href="#string-和-slice" class="headerlink" title="string 和 slice"></a>string 和 slice</h3><ul><li><code>string</code>底层是一个<code>byte数组</code>，因此<code>string</code>也可以进行切片处理案例演示:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//string底层是一个byte数组,因此string也可以进行切片处理</span></span><br><span class="line">str := <span class="string">"hello@atguigu"</span></span><br><span class="line"><span class="comment">//使用切片获取到 atguigu</span></span><br><span class="line">slice := str[<span class="number">6</span>:]</span><br><span class="line">fmt.Println(<span class="string">"slice="</span>, slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ozs1m4q5j20e600tdfs.jpg" alt="image-20220730153726089"></p><ul><li>string 和切片在内存的形式，以 “abcd” 画出内存示意图</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4oztlt8gvj20dj06et8p.jpg" alt="image-20220730153855974"></p><ul><li>string 是<code>不可变</code>的，也就说不能通过 <code>str[0] = &#39;z&#39;</code> 方式来修改字符串</li><li>如果需要修改字符串，可以先将 <code>string</code> -&gt; <code>[]byte</code> / 或者 <code>[]rune</code> -&gt; 修改 -&gt; 重写转成 string</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//string底层是一个byte数组,因此string也可以进行切片处理</span></span><br><span class="line">str := <span class="string">"hello@atguigu"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串不能直接修改</span></span><br><span class="line">arr1 := []<span class="keyword">byte</span>(str)</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="string">'z'</span></span><br><span class="line">str = <span class="keyword">string</span>(arr1)</span><br><span class="line">fmt.Println(<span class="string">"str="</span>, str)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的写法不能赋值中文</span></span><br><span class="line"><span class="comment">//下面的可以</span></span><br><span class="line">arr2 := []<span class="keyword">rune</span>(str)</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="string">'北'</span></span><br><span class="line">str = <span class="keyword">string</span>(arr2)</span><br><span class="line">fmt.Println(<span class="string">"str="</span>, str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="排序和查找"><a href="#排序和查找" class="headerlink" title="排序和查找"></a>排序和查找</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4p21fpg10j20m10a7js6.jpg" alt="image-20220730165539742"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort</span><span class="params">(arr *[5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"排序前arr="</span>, (*arr))</span><br><span class="line">temp := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(*arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(*arr)<span class="number">-1</span>-i; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> (*arr)[j] &gt; (*arr)[j+<span class="number">1</span>] &#123;</span><br><span class="line">temp = (*arr)[j]</span><br><span class="line">(*arr)[j] = (*arr)[j+<span class="number">1</span>]</span><br><span class="line">(*arr)[j+<span class="number">1</span>] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"排序后arr="</span>, *arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;</span><br><span class="line"><span class="comment">//将数组传递给一个函数,完成排序</span></span><br><span class="line">BubbleSort(&amp;arr)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"main arr="</span>, arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4sa4sfnh3j20dl01lmx6.jpg" alt="image-20220802115219645"></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><ul><li>案例</li></ul><blockquote><p>  有一个数列:白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王</p><p>   猜数游戏:从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 有一个数列:白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王</span></span><br><span class="line"><span class="comment">// 猜数游戏:从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】</span></span><br><span class="line"></span><br><span class="line">names := [<span class="number">4</span>]<span class="keyword">string</span>&#123;<span class="string">"白眉鹰王"</span>, <span class="string">"金毛狮王"</span>, <span class="string">"紫衫龙王"</span>, <span class="string">"青翼蝠王"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> heroName = <span class="string">""</span></span><br><span class="line">fmt.Println(<span class="string">"请输入要查找的人名: "</span>)</span><br><span class="line">fmt.Scanln(&amp;heroName)</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序查找: 方式一</span></span><br><span class="line"><span class="comment">// for i := 0; i &lt; len(names); i++ &#123;</span></span><br><span class="line"><span class="comment">// if heroName == names[i] &#123;</span></span><br><span class="line"><span class="comment">// fmt.Printf("找到%v, 下标为%v \n", heroName, i)</span></span><br><span class="line"><span class="comment">// break</span></span><br><span class="line"><span class="comment">// &#125; else if i == (len(names) - 1) &#123;</span></span><br><span class="line"><span class="comment">// fmt.Printf("没有找到%v \n", heroName)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序查找: 方式二(推荐)</span></span><br><span class="line">index := <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(names); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> heroName == names[i] &#123;</span><br><span class="line">index = i <span class="comment">//将找到的值对应的下标赋给 index</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index != <span class="number">-1</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"找到%v, 下标%v \n"</span>, heroName, index)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"没有找到"</span>, heroName)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4sgnuzq8wj20cw01n0sq.jpg" alt="image-20220802153817660"></p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><blockquote><p>  二分查找就是查找每次将值与中位数进行对比,不断进行判断缩小范围</p></blockquote><ul><li>思路分析</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4sgrxngu9j20jv0d0t9o.jpg" alt="image-20220802154212526"></p><ul><li>代码实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinaryFind</span><span class="params">(arr *[7]<span class="keyword">int</span>, leftIndex <span class="keyword">int</span>, rightIndex <span class="keyword">int</span>, findVal <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 判断 leftIndex 是否大于 rightIndex</span></span><br><span class="line"><span class="keyword">if</span> leftIndex &gt; rightIndex &#123;</span><br><span class="line">fmt.Println(<span class="string">"找不到"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先找到中间的下标</span></span><br><span class="line">middle := (leftIndex + rightIndex) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*arr)[middle] &gt; findVal &#123;</span><br><span class="line"><span class="comment">// 说明我们要查找的数,应该在 leftIndex - middle-1</span></span><br><span class="line">BinaryFind(arr, leftIndex, middle<span class="number">-1</span>, findVal)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (*arr)[middle] &lt; findVal &#123;</span><br><span class="line"><span class="comment">// 说明我们要查找的数,应该在 middle+1 - rightIndex</span></span><br><span class="line">BinaryFind(arr, middle+<span class="number">1</span>, rightIndex, findVal)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 找到了</span></span><br><span class="line">fmt.Printf(<span class="string">"找到了,下标为%v\n"</span>, middle)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [<span class="number">7</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">39</span>, <span class="number">128</span>, <span class="number">333</span>, <span class="number">1111</span>&#125;</span><br><span class="line"><span class="comment">//BinaryFind(&amp;arr, 0, len(arr)-1, 39)</span></span><br><span class="line">    BinaryFind(&amp;arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>, <span class="number">1112</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4shr3kw8yj20d501mdfx.jpg" alt="image-20220802161600143"></p><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="快速入门-5"><a href="#快速入门-5" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>案例</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4shwpu4syj207v04o0sm.jpg" alt="image-20220802162123996"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明二维数组</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">4</span>][<span class="number">6</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">//赋初值</span></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">arr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">6</span>; j++ &#123;</span><br><span class="line">fmt.Print(arr[i][j], <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4si23oa8dj20c00203yh.jpg" alt="image-20220802162634448"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li>方式一: 先声明再赋值</li></ul><p><strong>语法:</strong> <code>var 数组名 [大小][大小]类型</code></p><p><strong>比如:</strong>  <code>var arr [2][3]int</code> ， 再赋值。</p><p><strong>使用演示</strong></p><p>二维数组在内存的存在形式(重点)</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4si9der36j20kc072q39.jpg" alt="image-20220802163333574" style="zoom:150%;"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//详细的解释一下上面的图片</span></span><br><span class="line"><span class="comment">//比如arr2[2]</span></span><br><span class="line"><span class="comment">//因为是arr2[2],所以就会在一个区域内划分出两个指针</span></span><br><span class="line"><span class="comment">//这两个指针分别对应第一行和第二行</span></span><br><span class="line"><span class="comment">//也就是说,arr2[0]的起始地址 = arr2[0][0]</span></span><br><span class="line"><span class="comment">//arr2[1]的起始地址 = arr2[1][0]</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明二维数组</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">4</span>][<span class="number">6</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">//赋初值</span></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">arr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">6</span>; j++ &#123;</span><br><span class="line">fmt.Print(arr[i][j], <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(arr2)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"arr2[0]的地址%p\n"</span>, &amp;arr2[<span class="number">0</span>])</span><br><span class="line">fmt.Printf(<span class="string">"arr[1]的地址%p\n"</span>, &amp;arr2[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"arr2[0][0]的地址%p\n"</span>, &amp;arr2[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">fmt.Printf(<span class="string">"arr2[1][0]的地址%p\n"</span>, &amp;arr2[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4sk2c5bnhj20br03zgls.jpg" alt="image-20220802173559774" style="zoom:150%;"><p>从上图可以看出,<code>arr2[0]</code>与<code>arr2[1]</code>两个地址相差了<code>24</code>个字节(底层都是使用16进制,满16进一位,150+24=168)</p><p>而且<code>arr2[0]</code>与<code>arr2[0][0]</code>的地址是相同的</p><ul><li>方式二: 直接初始化</li></ul><p><strong>声明:</strong> </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 [大小][大小]类型 = [大小][大小]类型&#123;&#123;初值..&#125;,&#123;初值..&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>赋值</strong>(有默认值，比如 int 类型的就是 0)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line">fmt.Println(<span class="string">"arr3="</span>, arr3)</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>二维数组在声明时也对应有四种写法[和一维数组类似]</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 大小类型 = 大小类型&#123;&#123;初值..&#125;,&#123;初值..&#125;&#125; </span><br><span class="line"><span class="keyword">var</span> 数组名 大小类型 = ...类型&#123;&#123;初值..&#125;,&#123;初值..&#125;&#125; </span><br><span class="line"><span class="keyword">var</span> 数组名 = 大小类型&#123;&#123;初值..&#125;,&#123;初值..&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> 数组名 = ...类型&#123;&#123;初值..&#125;,&#123;初值..&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通遍历</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(arr[i]); j++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v\t"</span>, arr[i][j])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for-range遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line"><span class="keyword">for</span> j, v2 := <span class="keyword">range</span> v &#123;</span><br><span class="line">fmt.Printf(<span class="string">"arr[%v][%v]=%v \t"</span>, i, j, v2)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4tlsomqqkj20c601yt8q.jpg" alt="image-20220803152126615"></p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><blockquote><p>  map 是 key-value 数据结构，又称为字段或者关联数组。类似其它编程语言的集合，在编程中是经常使用到。</p></blockquote><h2 id="map的声明"><a href="#map的声明" class="headerlink" title="map的声明"></a>map的声明</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">map</span> 变量名 <span class="keyword">map</span>[keytype]valuetype</span><br></pre></td></tr></table></figure><ul><li><p><code>key</code> 可以是什么类型</p><p>golang 中的 map，的 key 可以是很多种类型，比如 bool, 数字，string, 指针, channel , 还可以是只 包含前面几个类型的接口, 结构体, 数组</p><p>通常 ==key== 为 <code>int</code> 、<code>string</code></p><p><strong>注意:</strong> slice, map 还有 function 不可以，因为这几个没法用 == 来判断</p></li><li><p><code>valuetype</code> 可以是什么类型</p><p>valuetype 的类型和 key 基本一样，这里我就不再赘述了 </p><p>==通常为:== <code>数字</code>(整数,浮点数), <code>string</code>, <code>map</code>, <code>struct</code></p></li></ul><h3 id="map-声明的举例"><a href="#map-声明的举例" class="headerlink" title="map 声明的举例"></a>map 声明的举例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br></pre></td></tr></table></figure><blockquote><p>  <strong>注意:</strong> 声明是不会分配内存的，初始化需要 make ，分配内存后才能赋值和使用。</p></blockquote><h3 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"><span class="comment">//在使用map前,需要先make,make的作用就是给map分配数据空间</span></span><br><span class="line">a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">a[<span class="string">"no1"</span>] = <span class="string">"宋江"</span></span><br><span class="line">a[<span class="string">"no2"</span>] = <span class="string">"吴用"</span></span><br><span class="line">a[<span class="string">"no1"</span>] = <span class="string">"武松"</span></span><br><span class="line">a[<span class="string">"no3"</span>] = <span class="string">"吴用"</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对上面代码的说明:</strong></p><p>1) map在使用前一定要make<br>2) map的key是不能重复，如果重复了，则以最后这个key-value为准<br>3) map的value是可以相同的.<br>4) map 的 key-value 是无序<br>5) make内置函数数目</p><h2 id="map的使用"><a href="#map的使用" class="headerlink" title="map的使用"></a>map的使用</h2><ul><li>方式一</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">a[<span class="string">"no1"</span>] = <span class="string">"宋江"</span></span><br><span class="line">a[<span class="string">"no2"</span>] = <span class="string">"吴用"</span></span><br><span class="line">a[<span class="string">"no1"</span>] = <span class="string">"武松"</span></span><br><span class="line">a[<span class="string">"no3"</span>] = <span class="string">"吴用"</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回结果</span></span><br><span class="line"><span class="keyword">map</span>[no1:武松 no2:吴用 no3:吴用]</span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种方式</span></span><br><span class="line">cities := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">cities[<span class="string">"no1"</span>] = <span class="string">"北京"</span></span><br><span class="line">cities[<span class="string">"no2"</span>] = <span class="string">"天津"</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回结果</span></span><br><span class="line"><span class="keyword">map</span>[no1:北京 no2:天津 no3:上海]</span><br></pre></td></tr></table></figure><ul><li>方式三</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三种方式</span></span><br><span class="line">heroes := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">    <span class="string">"hero1"</span>: <span class="string">"宋江"</span>,</span><br><span class="line">    <span class="string">"hero2"</span>: <span class="string">"卢俊义"</span>,</span><br><span class="line">    <span class="string">"hero3"</span>: <span class="string">"吴用"</span>,</span><br><span class="line">&#125;</span><br><span class="line">heroes[<span class="string">"heros"</span>] = <span class="string">"林冲"</span></span><br><span class="line">fmt.Println(<span class="string">"heroes="</span>, heroes)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回结果</span></span><br><span class="line">heroes= <span class="keyword">map</span>[hero1:宋江 hero2:卢俊义 hero3:吴用 heros:林冲]</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>   演示一个 key-value 的 value 是 map 的案例 </p><p>  比如:我们要存放 3 个学生信息, 每个学生有 name 和 sex 信息 </p><p>  思路: map[string]map[string]string</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">studentMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">studentMap[<span class="string">"stu01"</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">studentMap[<span class="string">"stu01"</span>][<span class="string">"name"</span>] = <span class="string">"tom"</span></span><br><span class="line">studentMap[<span class="string">"stu01"</span>][<span class="string">"sex"</span>] = <span class="string">"男"</span></span><br><span class="line">studentMap[<span class="string">"stu01"</span>][<span class="string">"address"</span>] = <span class="string">"北京长安街~"</span></span><br><span class="line"></span><br><span class="line">studentMap[<span class="string">"stu02"</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">studentMap[<span class="string">"stu02"</span>][<span class="string">"name"</span>] = <span class="string">"mary"</span></span><br><span class="line">studentMap[<span class="string">"stu02"</span>][<span class="string">"sex"</span>] = <span class="string">"女"</span></span><br><span class="line">studentMap[<span class="string">"stu02"</span>][<span class="string">"address"</span>] = <span class="string">"上海黄浦江~"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(studentMap)</span><br><span class="line">fmt.Println(studentMap[<span class="string">"stu02"</span>])</span><br><span class="line">fmt.Println(studentMap[<span class="string">"stu02"</span>][<span class="string">"address"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map的增删改查"><a href="#map的增删改查" class="headerlink" title="map的增删改查"></a>map的增删改查</h2><h3 id="map的增加和更新"><a href="#map的增加和更新" class="headerlink" title="map的增加和更新"></a>map的增加和更新</h3><blockquote><p>   map增加和更新:<br>  map[“key”] = value //如果 key 还没有，就是增加，如果 key 存在就是修改。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cities := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">cities[<span class="string">"no1"</span>] = <span class="string">"北京"</span></span><br><span class="line">cities[<span class="string">"no2"</span>] = <span class="string">"天津"</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 no3 这个key已经存在,因此下面的这句话就是修改</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海~"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ukacar4aj20bq014glk.jpg" alt="image-20220804111447689"></p><h3 id="map的删除"><a href="#map的删除" class="headerlink" title="map的删除"></a>map的删除</h3><blockquote><p>  <strong>说明:</strong><br>  delete(map，”key”) ，delete 是一个内置函数，如果 key 存在，就删除该 key-value,如果 key 不存在， 不操作，但是也不会报错</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cities := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">cities[<span class="string">"no1"</span>] = <span class="string">"北京"</span></span><br><span class="line">cities[<span class="string">"no2"</span>] = <span class="string">"天津"</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 no3 这个key已经存在,因此下面的这句话就是修改</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海~"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示删除</span></span><br><span class="line"><span class="built_in">delete</span>(cities, <span class="string">"no1"</span>)</span><br><span class="line">fmt.Println(cities)</span><br><span class="line"><span class="comment">//当delete指定的key不存在时,删除不会操作,也不会报错</span></span><br><span class="line"><span class="built_in">delete</span>(cities, <span class="string">"no4"</span>)</span><br><span class="line">fmt.Println(cities)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4up3imfhlj20bm021dfw.jpg" alt="image-20220804140113501"></p><blockquote><p>  细节说明</p><p>  如果我们要删除 map 的所有 key ,没有一个专门的方法一次删除，可以<code>遍历</code>一下 key, 逐个删除</p><p>  或者 <code>map = make(...)</code>，make 一个新的，让原来的成为==垃圾==，被 <code>gc</code> 回收</p></blockquote><ul><li>方式一: 遍历删除</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, _ := <span class="keyword">range</span> caties &#123;</span><br><span class="line">    <span class="built_in">delete</span>(cities, k)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式二: 重新make暴力删除</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cities = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(cities)</span><br></pre></td></tr></table></figure><h3 id="map的查找"><a href="#map的查找" class="headerlink" title="map的查找"></a>map的查找</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cities := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">cities[<span class="string">"no1"</span>] = <span class="string">"北京"</span></span><br><span class="line">cities[<span class="string">"no2"</span>] = <span class="string">"天津"</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 no3 这个key已经存在,因此下面的这句话就是修改</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海~"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示删除</span></span><br><span class="line"><span class="built_in">delete</span>(cities, <span class="string">"no1"</span>)</span><br><span class="line">fmt.Println(cities)</span><br><span class="line"><span class="comment">//当delete指定的key不存在时,删除不会操作,也不会报错</span></span><br><span class="line"><span class="built_in">delete</span>(cities, <span class="string">"no4"</span>)</span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示map的查找</span></span><br><span class="line">val, ok := cities[<span class="string">"no1"</span>]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"有no1 key 值为%v\n"</span>, val)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"没有no1 key\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cities = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(cities)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4uq5rpeezj20cn02sglp.jpg" alt="image-20220804143801687"></p><h2 id="map的遍历"><a href="#map的遍历" class="headerlink" title="map的遍历"></a>map的遍历</h2><blockquote><p>  案例演示相对复杂的 map 遍历:该 map 的 value 又是一个 map</p><p>  说明:map 的遍历使用 for-range 的结构遍历</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cities := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">cities[<span class="string">"no1"</span>] = <span class="string">"北京"</span></span><br><span class="line">cities[<span class="string">"no2"</span>] = <span class="string">"天津"</span></span><br><span class="line">cities[<span class="string">"no3"</span>] = <span class="string">"上海"</span></span><br><span class="line">fmt.Println(cities)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> cities &#123;</span><br><span class="line">fmt.Printf(<span class="string">"k=%v v=%v\n"</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ur5wbajsj20ce021dft.jpg" alt="image-20220804151245088"></p><p>遍历一个复杂的结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">studentMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">studentMap[<span class="string">"stu01"</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">studentMap[<span class="string">"stu01"</span>][<span class="string">"name"</span>] = <span class="string">"tom"</span></span><br><span class="line">studentMap[<span class="string">"stu01"</span>][<span class="string">"sex"</span>] = <span class="string">"男"</span></span><br><span class="line">studentMap[<span class="string">"stu01"</span>][<span class="string">"address"</span>] = <span class="string">"北京长安街~"</span></span><br><span class="line"></span><br><span class="line">studentMap[<span class="string">"stu02"</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">studentMap[<span class="string">"stu02"</span>][<span class="string">"name"</span>] = <span class="string">"mary"</span></span><br><span class="line">studentMap[<span class="string">"stu02"</span>][<span class="string">"sex"</span>] = <span class="string">"女"</span></span><br><span class="line">studentMap[<span class="string">"stu02"</span>][<span class="string">"address"</span>] = <span class="string">"上海黄浦江~"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for-range遍历一个结构复杂的map</span></span><br><span class="line"><span class="keyword">for</span> k1, v1 := <span class="keyword">range</span> studentMap &#123;</span><br><span class="line">fmt.Println(<span class="string">"k1="</span>, k1)</span><br><span class="line"><span class="keyword">for</span> k2, v2 := <span class="keyword">range</span> v1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">"\t k2=%v v2=%v \n"</span>, k2, v2)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(studentMap)</span></span><br><span class="line"><span class="comment">// fmt.Println(studentMap["stu02"])</span></span><br><span class="line"><span class="comment">// fmt.Println(studentMap["stu02"]["address"])</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4ur4vtw56j20c304474d.jpg" alt="image-20220804151146272"></p><h2 id="map切片"><a href="#map切片" class="headerlink" title="map切片"></a>map切片</h2><blockquote><p>  切片的数据类型如果是 map，则我们称为 slice of map，map 切片，这样使用则 map 个数就可以动态变化了。</p></blockquote><ul><li>案例</li></ul><p>要求:使用一个 map 来记录 monster 的信息 name 和 age, 也就是说一个 monster 对应一个 map,并且妖怪的个数可以动态的增加=&gt;map 切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//演示map切片的使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.声明一个map切片</span></span><br><span class="line"><span class="keyword">var</span> monsters []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">monsters = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">//2.增加一个妖怪的信息</span></span><br><span class="line"><span class="keyword">if</span> monsters[<span class="number">0</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">monsters[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">monsters[<span class="number">0</span>][<span class="string">"name"</span>] = <span class="string">"牛魔王"</span></span><br><span class="line">monsters[<span class="number">0</span>][<span class="string">"age"</span>] = <span class="string">"500"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> monsters[<span class="number">1</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">monsters[<span class="number">1</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line">monsters[<span class="number">1</span>][<span class="string">"name"</span>] = <span class="string">"玉兔精"</span></span><br><span class="line">monsters[<span class="number">1</span>][<span class="string">"age"</span>] = <span class="string">"400"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面这个写法越界</span></span><br><span class="line"><span class="comment">// if monsters[1] == nil &#123;</span></span><br><span class="line"><span class="comment">// monsters[1] = make(map[string]string, 2)</span></span><br><span class="line"><span class="comment">// monsters[1]["name"] = "狐狸精"</span></span><br><span class="line"><span class="comment">// monsters[1]["age"] = "400"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里我们需要使用到切片的append函数,可以动态的增加monster</span></span><br><span class="line"><span class="comment">//1.先定义一个monster信息</span></span><br><span class="line">newMonster := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"新妖怪-火云邪神"</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="string">"200"</span>,</span><br><span class="line">&#125;</span><br><span class="line">monsters = <span class="built_in">append</span>(monsters, newMonster)</span><br><span class="line"></span><br><span class="line">fmt.Println(monsters)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4usgifjpqj20gs00tq2y.jpg" alt="image-20220804155733247"></p><h2 id="map的排序"><a href="#map的排序" class="headerlink" title="map的排序"></a>map的排序</h2><ul><li>golang中没有一个专门的方法针对map的key进行排序</li><li>golang中的map默认是无序的，注意也不是按照添加的顺序存放的，你每次遍历，得到的输出可能不一样.</li><li>golang中map的排序，是先将key进行排序，然后根据key值遍历输出即可</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//map的排序</span></span><br><span class="line">map1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">map1[<span class="number">10</span>] = <span class="number">100</span></span><br><span class="line">map1[<span class="number">1</span>] = <span class="number">13</span></span><br><span class="line">map1[<span class="number">4</span>] = <span class="number">56</span></span><br><span class="line">map1[<span class="number">8</span>] = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">fmt.Println(map1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果按照map的key的顺序进行排序输出</span></span><br><span class="line"><span class="comment">//1.先将map的key放入到切片中</span></span><br><span class="line"><span class="comment">//2.对切片排序</span></span><br><span class="line"><span class="comment">//3.遍历切片,然后按照key来输出map的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keys []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> k, _ := <span class="keyword">range</span> map1 &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">sort.Ints(keys)</span><br><span class="line">fmt.Println(keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> keys &#123;</span><br><span class="line">fmt.Printf(<span class="string">"map1[%v]=%v \n"</span>, k, map1[k])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4utaplpxnj20bj02r74a.jpg" alt="image-20220804162634091"></p><h2 id="map的使用细节"><a href="#map的使用细节" class="headerlink" title="map的使用细节"></a>map的使用细节</h2><ul><li>map是<code>引用类型</code>，遵守引用类型传递的机制，在一个函数接收map，修改后，会直接修改原来的 map</li><li>map 的容量达到后，再想 map 增加元素，会自动扩容，并不会发生 panic，也就是说 map 能动态的增长键值对(key-value)</li><li>map 的 value 也经常使用 struct 类型，更适合管理复杂的数据(比前面 value 是一个 map 更好),比如 value 为 Student 结构体</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifyUser</span><span class="params">(users <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 users 中是否有 name //v , ok := users[name]</span></span><br><span class="line"><span class="keyword">if</span> users[name] != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//有这个用户</span></span><br><span class="line">users[name][<span class="string">"pwd"</span>] = <span class="string">"888888"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有这个用户</span></span><br><span class="line">users[name] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line">users[name][<span class="string">"pwd"</span>] = <span class="string">"888888"</span></span><br><span class="line">users[name][<span class="string">"nickname"</span>] = <span class="string">"昵称~"</span> + name <span class="comment">//示意</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">users := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">users[<span class="string">"smith"</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line">users[<span class="string">"smith"</span>][<span class="string">"pwd"</span>] = <span class="string">"999999"</span></span><br><span class="line">users[<span class="string">"smith"</span>][<span class="string">"nickname"</span>] = <span class="string">"小花猫"</span></span><br><span class="line"></span><br><span class="line">modifyUser(users, <span class="string">"tom"</span>)</span><br><span class="line">modifyUser(users, <span class="string">"mary"</span>)</span><br><span class="line">modifyUser(users, <span class="string">"smith"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(users)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4uu5y8o6rj20od00uaa4.jpg" alt="image-20220804165636270"></p><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><blockquote><p>  激动人心的面向对象编程他来喽~</p></blockquote><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><ul><li><p><code>Golang</code>也支持<code>面向对象编程</code>(OOP)，但是和传统的面向对象编程有区别，并不是纯粹的面向对象语言。所以我们说 Golang 支持<code>面向对象编程特性</code>是比较准确的。</p></li><li><p>Golang<strong>没有</strong><code>类</code>(class)，Go语言的结构体(struct)和其它编程语言的类(class)有同等的地位，你可以理解 Golang 是基于 <code>struct</code> 来实现 OOP 特性的。</p></li><li><p>Golang面向对象编程<code>非常简洁</code>，去掉了传统OOP语言的继承、方法重载、构造函数和析构函数、隐藏的 this 指针等等</p></li><li><p>Golang仍然有<code>面向对象编程</code>的<code>继承</code>，<code>封装</code>和<code>多态</code>的特性，只是实现的方式和其它OOP语言不一样，比如继承 :Golang 没有 extends 关键字，继承是通过匿名字段来实现。</p></li><li><p>Golang面向对象(OOP)很优雅，OOP本身就是语言类型系统(typesystem)的一部分，通过<code>接口</code>(interface)关联，耦合性低，也非常灵活。后面会充分体会到这个特点。也就是说在 Golang 中面向接口编程是非常重要的特性。</p></li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="快速入门-6"><a href="#快速入门-6" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Cat结构体,将Cat的各个字段/属性信息,放入到Cat结构体进行管理</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">Color <span class="keyword">string</span></span><br><span class="line">Hobby <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Cat的变量</span></span><br><span class="line"><span class="keyword">var</span> cat1 Cat</span><br><span class="line">cat1.Name = <span class="string">"cat1"</span></span><br><span class="line">cat1.Age = <span class="number">3</span></span><br><span class="line">cat1.Color = <span class="string">"white"</span></span><br><span class="line">cat1.Hobby = <span class="string">"eat"</span></span><br><span class="line">fmt.Println(<span class="string">"cat1="</span>, cat1)</span><br><span class="line">fmt.Println(<span class="string">"cat1的详细信息如下:"</span>)</span><br><span class="line">fmt.Println(<span class="string">"name="</span>, cat1.Name)</span><br><span class="line">fmt.Println(<span class="string">"Age="</span>, cat1.Age)</span><br><span class="line">fmt.Println(<span class="string">"Color="</span>, cat1.Color)</span><br><span class="line">fmt.Println(<span class="string">"hobby="</span>, cat1.Hobby)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4vvmz38msj20dc02sdfw.jpg" alt="image-20220805143305506"></p><h3 id="结构体的声明"><a href="#结构体的声明" class="headerlink" title="结构体的声明"></a>结构体的声明</h3><blockquote><p>  结构体是一个<code>值类型</code>,并不是引用类型(引用类型指的是通过地址找到值),这一点需要注意</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 结构体名称 <span class="keyword">struct</span> &#123;</span><br><span class="line">field1 <span class="keyword">type</span></span><br><span class="line">field2 <span class="keyword">type</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段-属性"><a href="#字段-属性" class="headerlink" title="字段/属性"></a>字段/属性</h3><ul><li>基本介绍</li></ul><p>1) 从概念或叫法上看: 结构体字段 = 属性 = field (即授课中，统一叫字段)<br>2) 字段是结构体的一个组成部分，一般是基本数据类型、数组,也可是引用类型。比如我们前面定义猫结构体的Name string 就是属性</p><h4 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h4><ol><li><p>字段声明语法同变量，示例:<code>字段名 字段类型</code></p></li><li><p>字段的类型可以为: <code>基本类型</code>、<code>数组</code>或<code>引用</code>类型</p></li><li><p>在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)，规则同前面讲的一样:</p><ul><li><p>布尔类型是 <code>false</code> ，数值是 <code>0</code> ，字符串是 <code>&quot;&quot;</code>。 </p></li><li><p><code>数组</code>类型的默认值和它的元素类型相关，比如 score [3]int 则为[0, 0, 0] </p></li><li><p>指针，slice，和 map 的零值都是 nil ，即还没有分配空间。</p></li></ul></li></ol><ul><li>演示案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">scores [<span class="number">5</span>]<span class="keyword">float64</span></span><br><span class="line">ptr    *<span class="keyword">int</span>              <span class="comment">//指针</span></span><br><span class="line">slice  []<span class="keyword">int</span>             <span class="comment">//切片</span></span><br><span class="line">map1   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">//map</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义结构体变量</span></span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line">fmt.Println(p1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.ptr == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ptr is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.map1 == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"map1 is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1.slice == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"slice is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用slice,再次说明,一定要make</span></span><br><span class="line">p1.slice = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">p1.slice[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用map,一定要先make</span></span><br><span class="line">p1.map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">p1.map1[<span class="string">"key1"</span>] = <span class="string">"tom~"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4vwlszlapj20dx02dt8t.jpg" alt="image-20220805150635987"></p><ol start="4"><li>不同结构体变量的字段是独立，互不影响，一个结构体变量字段的更改，不影响另外一个, 结构体是值类型。</li></ol><h3 id="创建结构体变量和访问结构体字段"><a href="#创建结构体变量和访问结构体字段" class="headerlink" title="创建结构体变量和访问结构体字段"></a>创建结构体变量和访问结构体字段</h3><ul><li>方式一: 直接声明</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"><span class="comment">//上面已经演示过</span></span><br></pre></td></tr></table></figure><ul><li>方式二: { }</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p2 := Person&#123;<span class="string">"poker"</span>, <span class="string">"26"</span>&#125;</span><br><span class="line"><span class="comment">//p2.Name = "tom"</span></span><br><span class="line"><span class="comment">//p2.Age = 26</span></span><br></pre></td></tr></table></figure><ul><li>方式三: &amp;</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var person *Person = new (Person)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 *Person = <span class="built_in">new</span> (Person)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为p3是一个指针,因此标准的给字段赋值方式</span></span><br><span class="line"><span class="comment">(*p3).Name = "smith" 也可以这样写=&gt; p3.Name = "smith"</span></span><br><span class="line"><span class="comment">原因: go的设计者,为了程序员使用方便,底层会对 p3.Name = "smith" 进行处理</span></span><br><span class="line"><span class="comment">会给 p3 加上取值运算 (*p3).Name = "smith"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(*p3).Name= <span class="string">"smith"</span></span><br><span class="line">p3.Name = <span class="string">"john"</span></span><br><span class="line"></span><br><span class="line">(*p3).Age = <span class="number">30</span></span><br><span class="line">p3.Age = <span class="number">100</span></span><br><span class="line">fmt.Println(*p3)</span><br></pre></td></tr></table></figure><ul><li>方式四: &amp;{ }</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var person *Person = &amp;Person&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p4 *Person = &amp;Person&#123;&#125;</span><br><span class="line">(*p4).Name = <span class="string">"scott"</span></span><br><span class="line">p4.Name = <span class="string">"scott~"</span></span><br><span class="line"></span><br><span class="line">(*p4).Age = <span class="number">88</span></span><br><span class="line">p4.Age = <span class="number">10</span></span><br><span class="line">fmt.Println(*p4)</span><br></pre></td></tr></table></figure><ul><li>说明<ul><li>第<code>3</code> 种和第 <code>4</code> 种方式返回的是<code>结构体指针</code>。</li><li>结构体指针访问字段的标准方式应该是: <code>(*结构体指针).字段名</code> ，比如 (*person).Name = “tom” </li><li>但 go 做了一个简化，也支持<code>结构体指针.字段名</code>, 比如 person.Name = “tom”。更加符合程序员使用的习惯，go 编译器底层对 person.Name 做了转化 (*person).Name。</li></ul></li></ul><h3 id="struct-类型的内存分配机制"><a href="#struct-类型的内存分配机制" class="headerlink" title="struct 类型的内存分配机制"></a>struct 类型的内存分配机制</h3><blockquote><p>  前面提到过,struct结构体的类型为值类型,当我们拷贝struct的一个实例时,会划分出一个新的地址空间存放值,所以两者不会影响</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">scores [<span class="number">5</span>]<span class="keyword">float64</span></span><br><span class="line">ptr    *<span class="keyword">int</span>              <span class="comment">//指针</span></span><br><span class="line">slice  []<span class="keyword">int</span>             <span class="comment">//切片</span></span><br><span class="line">map1   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">//map</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line">p1.Name = <span class="string">"tom"</span></span><br><span class="line">p1.Age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制实例p1</span></span><br><span class="line"><span class="keyword">var</span> p2 Person = p1</span><br><span class="line">fmt.Println(<span class="string">"p2.Age="</span>, p2.Age)</span><br><span class="line">fmt.Println(<span class="string">"p2.Name="</span>, p2.Name)</span><br><span class="line">    <span class="comment">//修改p2的值,观察p1的值是否会被修改</span></span><br><span class="line">p2.Name = <span class="string">"jack"</span></span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v, p1.Name=%v\n"</span>, p2.Name, p1.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4w067o95hj20dj01ndfu.jpg" alt="image-20220805171000477"></p><blockquote><p>  从上面的结果来看,p1与p2根本毫无关联,谁修改谁都不会变化</p><p>  那么如何做才能产生关联呢?请看下面的代码!</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">scores [<span class="number">5</span>]<span class="keyword">float64</span></span><br><span class="line">ptr    *<span class="keyword">int</span>              <span class="comment">//指针</span></span><br><span class="line">slice  []<span class="keyword">int</span>             <span class="comment">//切片</span></span><br><span class="line">map1   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">//map</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line">p1.Name = <span class="string">"tom"</span></span><br><span class="line">p1.Age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 *Person = &amp;p1</span><br><span class="line">fmt.Println(<span class="string">"p2.Age="</span>, (*p2).Age)</span><br><span class="line">fmt.Println(<span class="string">"p2.Name="</span>, p2.Name)</span><br><span class="line">p2.Name = <span class="string">"jack"</span></span><br><span class="line">fmt.Printf(<span class="string">"p2.Name=%v, p1.Name=%v\n"</span>, p2.Name, p1.Name)</span><br><span class="line">fmt.Printf(<span class="string">"p1的地址为%p\n"</span>, &amp;p1)</span><br><span class="line">fmt.Printf(<span class="string">"p2的地址为%p, p2的值为%p\n"</span>, &amp;p2, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4w0ii52d4j20dl028wej.jpg" alt="image-20220805172148956"></p><p>可以看到,<code>p1.Name</code>与<code>p2.Name</code>同时发生了变化,因为两者指向了同一个内存地址</p><h3 id="结构体的注意事项与细节说明"><a href="#结构体的注意事项与细节说明" class="headerlink" title="结构体的注意事项与细节说明"></a>结构体的注意事项与细节说明</h3><ol><li>结构体的所有字段在内存中是连续的</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">x <span class="keyword">int</span></span><br><span class="line">y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩形的左上角和右下角,两个点的坐标</span></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">leftUp, rightDown Point</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect2 <span class="keyword">struct</span> &#123;</span><br><span class="line">leftUp, rightDown *Point</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r1 := Rect&#123;Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, Point&#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//r1有四个int, 在内存中是连续分布</span></span><br><span class="line"><span class="comment">//打印地址</span></span><br><span class="line">fmt.Printf(<span class="string">"r1.ledtUp.x 地址=%p, r1.leftUp.y 地址=%p, r1.rightDown.x 地址=%p, r1.rr1.rightDown.yr1 地址=%p \n"</span>, &amp;r1.leftUp.x, &amp;r1.leftUp.y, &amp;r1.rightDown.x, &amp;r1.rightDown.y)</span><br><span class="line"></span><br><span class="line"><span class="comment">//r2有两个 *Point 类型, 这两个*Point类型的本身地址也是连续的</span></span><br><span class="line"><span class="comment">//但是他们指向的地址不一定是连续</span></span><br><span class="line">r2 := Rect2&#123;&amp;Point&#123;<span class="number">10</span>, <span class="number">20</span>&#125;, &amp;Point&#123;<span class="number">30</span>, <span class="number">40</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"r2.leftUp 本身地址=%p, r2.rightDown 本身地址=%p \n"</span>, &amp;r2.leftUp, &amp;r2.rightDown)</span><br><span class="line"><span class="comment">//他们指向的地址不一定是连续,这个要看系统在运行时是如何分配的</span></span><br><span class="line">fmt.Printf(<span class="string">"r2.leftUp 指向地址=%p, r2.rightDown 指向地址=%p \n"</span>, r2.leftUp, r2.rightDown)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4w137zflrj20qn01k74l.jpg" alt="image-20220805174144136"></p><p>可以看到,上面结果中第一行和第二行的地址是连续的,但是第三行并不一定是连续的,a0和b0在十六进制上差了16个字节</p><ol start="2"><li>结构体是用户单独定义的类型，和其它类型进行转换时需要有完全相同的字段(名字、个数和类型)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">Num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">Num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a A</span><br><span class="line"><span class="keyword">var</span> b B</span><br><span class="line">a = A(b) <span class="comment">//强制转换类型,但是结构体的字段必须要保证一样(名字 个数 类型)</span></span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4wvt3wpp6j20db00rt8m.jpg" alt="image-20220806112433067"></p><ol start="3"><li>结构体进行 type 重新定义(相当于取别名)，Golang 认为是新的数据类型，但是相互间可以强转</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stu Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 Student</span><br><span class="line"><span class="keyword">var</span> s2 Stu</span><br><span class="line"><span class="comment">//s1 = s2, 这是不对的</span></span><br><span class="line">s2 = Stu(s1) <span class="comment">//这样是正确的</span></span><br><span class="line">fmt.Println(s1, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>struct 的每个字段上，可以写上一个 tag, 该 tag 可以通过反射机制获取，常见的使用场景就是序列化和反序列化。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name"`</span><span class="comment">//打标签,注意冒号后面不要加空格</span></span><br><span class="line">Age   <span class="keyword">int</span>    <span class="string">`json:"age"`</span></span><br><span class="line">Skill <span class="keyword">string</span> <span class="string">`json:"skill"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">monster := Monster&#123;<span class="string">"牛魔王"</span>, <span class="number">500</span>, <span class="string">"芭蕉扇"</span>&#125;</span><br><span class="line"><span class="comment">//将monster变量序列化为 json 格式字符串</span></span><br><span class="line"><span class="comment">//json.Marshal 函数中使用反射,这个讲解反射时,再详细介绍</span></span><br><span class="line">jsonStr, err := json.Marshal(monster)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json 处理错误"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"> fmt.Println(<span class="string">"jsonStr"</span>, jsonStr)<span class="comment">//输出byte</span></span><br><span class="line">fmt.Println(<span class="string">"jsonStr"</span>, <span class="keyword">string</span>(jsonStr))<span class="comment">//byte转字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4x0hd9p1jj20r901kaab.jpg" alt="image-20220806140617419"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>  在某些情况下，我们要需要声明(定义)方法。比如 Person 结构体:除了有一些字段外( 年龄，姓名..),Person 结构体还有一些行为比如:可以说话、跑步…, 通过学习，还可以做算术题。这时就要用方法才能完成。</p><p>  Golang 中的方法是作用在指定的数据类型上的(即:和指定的数据类型绑定)，因此自定义类型，都可以有方法，而不仅仅是 struct。</p></blockquote><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    Num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a A)</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fmt.Println(a.Num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明<ul><li><code>func (a A) test() {}</code> 表示 <code>A</code> 结构体有一方法，方法名为 <code>test</code></li><li><code>(a A)</code> 体现 <code>test</code> 方法是和 <code>A</code> 类型绑定的</li></ul></li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Person类型绑定一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"test() name="</span>, p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">p.Name = <span class="string">"tom"</span></span><br><span class="line">p.test() <span class="comment">//调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4x1jcwfhhj20ek00tglk.jpg" alt="image-20220806144248481"></p><ul><li>说明</li></ul><p>1) test方法和Person类型绑定<br>2) test 方法只能通过 Person 类型的变量来调用，而不能直接调用，也不能使用其它类型变量来调用<br>3) func (p Person) test() {}… p 表示哪个 Person 变量调用，这个 p 就是它的副本, 这点和函数传参非 常相似。<br>4) p 这个名字，有程序员指定，不是固定, 比如修改成 person 也是可以</p><h3 id="方法快速入门"><a href="#方法快速入门" class="headerlink" title="方法快速入门"></a>方法快速入门</h3><ul><li>给 Person 结构体添加 speak 方法,输出 xxx 是一个好人</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(p.Name, <span class="string">"是一个好人"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给 Person 结构体添加 jisuan 方法,可以计算从 1+..+1000 的结果, 说明方法体内可以函数一样， 进行各种运算</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">jisuan</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(p.Name, <span class="string">"计算的结果是="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给 Person 结构体 jisuan2 方法,该方法可以接收一个数 n，计算从 1+…+n 的结果</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">jisuan2</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(p.Name, <span class="string">"计算的结果是="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给 Person 结构体添加 getSum 方法,可以计算两个数的和，并返回结果</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">getSum</span><span class="params">(n1 <span class="keyword">int</span>, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main主体调用方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">p.Name = <span class="string">"tom"</span></span><br><span class="line">p.test() <span class="comment">//调用方法</span></span><br><span class="line">p.jisuan()</span><br><span class="line">p.jisuan2(<span class="number">50</span>)</span><br><span class="line">res := p.getSum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h4z3yw0i0uj20ef020wej.jpg" alt="image-20220808093800846"></p><h3 id="方法的调用和传参机制原理"><a href="#方法的调用和传参机制原理" class="headerlink" title="方法的调用和传参机制原理"></a>方法的调用和传参机制原理</h3><blockquote><p>  方法的调用和传参机制和函数基本一样，不一样的地方是方法调用时，会将调用方法的变量，当做实参也传递给方法。下面我们举例说明。</p></blockquote><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>==画出前面 getSum 方法的执行过程+说明==</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4x6gp1qdnj20lo09bdgd.jpg" alt="image-20220806173314395"></p><ul><li>说明:<br>1) 在通过一个变量去调用方法时，其调用机制和函数一样<br>2) 不一样的地方时，变量调用方法时，该变量本身也会作为一个参数传递到方法(如果变量是值类型，则进行值拷贝，如果变量是引用类型，则进行地址拷贝)</li></ul><h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><p>请编写一个程序，要求如下:<br>1) 声明一个结构体 Circle, 字段为 radius<br>2) 声明一个方法 area 和 Circle 绑定，可以返回面积。<br>3) 提示: 画出 area 执行过程+说明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c Circle</span><br><span class="line">c.radius = <span class="number">4.0</span></span><br><span class="line">res := c.area()</span><br><span class="line">fmt.Println(<span class="string">"面积是="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4z47pvi7uj20be0a60sx.jpg" alt="image-20220808094632707"></p><h3 id="方法的声明-定义"><a href="#方法的声明-定义" class="headerlink" title="方法的声明(定义)"></a>方法的声明(定义)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recevier <span class="keyword">type</span>)</span> <span class="title">methodName</span><span class="params">(参数列表)</span> <span class="params">(返回值列表)</span></span> &#123; </span><br><span class="line">    方法体</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><p>1) 参数列表:表示方法输入<br>2) recevier type : 表示这个方法和 type 这个类型进行绑定，或者说该方法作用于 type 类型<br>3) receiver type : type 可以是结构体，也可以其它的自定义类型<br>4) receiver : 就是 type 类型的一个变量(实例)，比如 :Person 结构体 的一个变量(实例)<br>5) 返回值列表:表示返回的值，可以多个<br>6) 方法主体:表示为了实现某一功能代码块<br>7) return 语句不是必须的。</p><h3 id="方法的注意事项和细节"><a href="#方法的注意事项和细节" class="headerlink" title="方法的注意事项和细节"></a>方法的注意事项和细节</h3><ol><li>结构体类型是<code>值类型</code>，在方法调用中，遵守<code>值类型</code>的传递机制，是<code>值拷贝</code>传递方式</li><li>如程序员希望在方法中，修改结构体变量的值，可以通过结构体<code>指针</code>的方式来处理(这里可能不是太好理解)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了提高效率,通常我们方法和结构体的指针类型绑定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">area2</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="comment">//因为c是指针,因此我们标准的访问其字段的方式是(*c)</span></span><br><span class="line"><span class="comment">//return 3.14 * (*c).radius * (*c).radius</span></span><br><span class="line"><span class="comment">// (*c).radius 等价 c.radius</span></span><br><span class="line">c.radius = <span class="number">10</span>   <span class="comment">//这里为指针,直接指向main中的c的地址,相当于直接将main中c.radius的地址对应的值给修改掉了</span></span><br><span class="line">    <span class="comment">//下面使用 fmt 打印指针c的地址, 验证func方法中指针c是否指向main中c的地址</span></span><br><span class="line">fmt.Printf(<span class="string">"func方法中的c.radius =%v, c的地址为%p \n"</span>, c.radius, c) <span class="comment">//这里取c的地址时,不需要加 &amp; 符号,因为c本身就是一个指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c Circle</span><br><span class="line">c.radius = <span class="number">7.0</span> <span class="comment">//此时会在内存中生成一个地址</span></span><br><span class="line"><span class="comment">//res2 := (&amp;c).area2()</span></span><br><span class="line"><span class="comment">//编译器底层做了优化 (&amp;c).area2() 等价 c.area()</span></span><br><span class="line"><span class="comment">//因为编译器会自动的给加上 &amp;c</span></span><br><span class="line">fmt.Printf(<span class="string">"调用方法前, main中c.radius =%v, c的地址为%p \n"</span>, c.radius, &amp;c)</span><br><span class="line">res2 := c.area2() <span class="comment">//调用方法</span></span><br><span class="line"><span class="comment">//当执行上面方法的时候,指针是指向方法中的c的地址,而不是main中的 c.radius = 7.0</span></span><br><span class="line">fmt.Printf(<span class="string">"调用方法后, main中c.radius =%v, c的地址为%p \n"</span>, c.radius, &amp;c)</span><br><span class="line">fmt.Println(<span class="string">"面积是="</span>, res2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4z6qsaz6nj20e701x74g.jpg" alt="image-20220808111403865"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4z6rbwj9vj209r09mjrf.jpg" alt="image-20220808111435136"></p><ol start="3"><li>Golang中的方法作用在指定的数据类型上的(即:和指定的数据类型绑定)，因此自定义类型， 都可以有方法, 而不仅仅是 struct， 比如 int , float32 等都可以有方法</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> integer <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i integer)</span> <span class="title">print</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i="</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个方法,可以改变i的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *integer)</span> <span class="title">change</span><span class="params">()</span></span> &#123;</span><br><span class="line">*i = *i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i integer = <span class="number">10</span></span><br><span class="line">i.<span class="built_in">print</span>()</span><br><span class="line">i.change()</span><br><span class="line">fmt.Println(<span class="string">"i="</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4z7fr7xx6j20ea013t8m.jpg" alt="image-20220808113804128"></p><ol start="4"><li>方法的访问范围控制的规则，和函数一样。方法名首字母小写，只能在本包访问; 方法首字母大写，可以在本包和其它包访问。</li><li>如果一个类型实现了 String()这个方法，那么 fmt.Println 默认会调用这个变量的 String()进行输出</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 *String 实现方法String()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">str := fmt.Sprintf(<span class="string">"Name=[%v], Age=[%v]"</span>, stu.Name, stu.Age)</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义一个Student变量</span></span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name: <span class="string">"tom"</span>,</span><br><span class="line">Age:  <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果实现了 *Student 类型的 String 方法,就会自动调用</span></span><br><span class="line">fmt.Println(&amp;stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4z7wsm92zj20ek00sq2v.jpg" alt="image-20220808115426710"></p><h3 id="方法练习"><a href="#方法练习" class="headerlink" title="方法练习"></a>方法练习</h3><ul><li>编写结构体(MethodUtils)，编程一个方法，方法不需要参数，在方法中打印一个 10*8 的矩形，在 main 方法中调用该方法。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MethodUtils <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mu MethodUtils)</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">8</span>; j++ &#123;</span><br><span class="line">fmt.Print(<span class="string">"*"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> mu MethodUtils</span><br><span class="line">mu.Print()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4z8jr1knaj20gf03wmx8.jpg" alt="image-20220808121630190"></p><ul><li>编写一个方法，提供 m 和 n 两个参数，方法中打印一个 m*n 的矩形</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MethodUtils <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mu MethodUtils)</span> <span class="title">Print</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= m; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= n; j++ &#123;</span><br><span class="line">fmt.Print(<span class="string">"*"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> mu MethodUtils</span><br><span class="line">mu.Print(<span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义小小计算器结构体(Calcuator)，实现加减乘除四个功能 实现形式 <ul><li>实现形式1: 分四个方法完成:</li><li>实现形式2: 用一个方法搞定</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Calcuator <span class="keyword">struct</span> &#123;</span><br><span class="line">Num1 <span class="keyword">float64</span></span><br><span class="line">Num2 <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现形式1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(calcuator *Calcuator)</span> <span class="title">getSum</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> calcuator.Num1 + calcuator.Num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(calcuator *Calcuator)</span> <span class="title">getSub</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> calcuator.Num1 - calcuator.Num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现形式2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(calcuator *Calcuator)</span> <span class="title">getRes</span><span class="params">(operator <span class="keyword">byte</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">res := <span class="number">0.0</span></span><br><span class="line"><span class="keyword">switch</span> operator &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">res = calcuator.Num1 + calcuator.Num2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">res = calcuator.Num1 - calcuator.Num2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">res = calcuator.Num1 * calcuator.Num2</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">res = calcuator.Num1 / calcuator.Num2</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"运算符输入有误!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Calcuator &#123;</span><br><span class="line">Num1 : <span class="number">10</span>,</span><br><span class="line">Num2 : <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方式二计算乘法</span></span><br><span class="line">res := c.getRes(<span class="string">'*'</span>)</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4zaxg2epcj20g600v0sp.jpg" alt="image-20220808133851814"></p><h3 id="方法和函数区别"><a href="#方法和函数区别" class="headerlink" title="方法和函数区别"></a>方法和函数区别</h3><ul><li><p>调用方式不一样</p><ul><li><p><strong>函数的调用方式:</strong> <code>函数名</code>(实参列表)</p></li><li><p><strong>方法的调用方式:</strong> <code>变量.方法名</code>(实参列表)</p></li></ul></li><li><p>对于普通函数，接收者为值类型时，不能将指针类型的数据直接传递，反之亦然</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test01</span><span class="params">(p Person)</span></span> &#123;</span><br><span class="line">fmt.Println(p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">(p *Person)</span></span> &#123;</span><br><span class="line">fmt.Println(p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;<span class="string">"tom"</span>&#125;</span><br><span class="line">test01(p)</span><br><span class="line">test02(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4zb93l2h3j20e8016a9z.jpg" alt="image-20220808135003870"></p><ul><li>对于方法(如 struct 的方法)，接收者为值类型时，可以直接用指针类型的变量调用方法，反过来同样也可以</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">test03</span><span class="params">()</span></span> &#123;</span><br><span class="line">p.Name = <span class="string">"jack"</span></span><br><span class="line">fmt.Println(<span class="string">"test03()="</span>, p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">test04</span><span class="params">()</span></span> &#123;</span><br><span class="line">p.Name = <span class="string">"mary"</span></span><br><span class="line">fmt.Println(<span class="string">"test04()="</span>, p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;<span class="string">"tom"</span>&#125;</span><br><span class="line">test01(p)</span><br><span class="line">test02(&amp;p)</span><br><span class="line"></span><br><span class="line">p.test03()</span><br><span class="line">fmt.Println(<span class="string">"main() p.Name="</span>, p.Name)</span><br><span class="line">(&amp;p).test03() <span class="comment">//形式上是传入地址,但是本质仍然是值拷贝</span></span><br><span class="line">fmt.Println(<span class="string">"main() p.name="</span>, p.Name)</span><br><span class="line"></span><br><span class="line">(&amp;p).test04()</span><br><span class="line">fmt.Println(<span class="string">"main() p.Name="</span>, p.Name)</span><br><span class="line">p.test04() <span class="comment">//等价 (&amp;p).test04, 从形式上是传入值类型,但是本质上仍然是地址拷贝</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4zbr9mqorj205v02r747.jpg" alt="image-20220808140731655"></p><p><strong>总结:</strong></p><p>1) 不管调用形式如何，真正决定是值拷贝还是地址拷贝，看这个方法是和哪个类型绑定.<br>2) 如果是和值类型，比如 (p Person) , 则是值拷贝， 如果和指针类型，比如是 (p *Person) 则<br>    是地址拷贝。</p><h2 id="面向对象编程应用实例"><a href="#面向对象编程应用实例" class="headerlink" title="面向对象编程应用实例"></a>面向对象编程应用实例</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><p>1) 声明(定义)结构体，确定结构体名<br>2) 编写结构体的字段<br>3) 编写结构体的方法</p><h3 id="学生案例"><a href="#学生案例" class="headerlink" title="学生案例"></a>学生案例</h3><p>1) 编写一个 Student 结构体，包含 name、gender、age、id、score 字段，分别为 string、string、int、 int、float64 类型。<br>2) 结构体中声明一个 say 方法，返回 string 类型，方法返回信息中包含所有字段值。<br>3) 在 main 方法中，创建 Student 结构体实例(变量)，并访问 say 方法，并将调用结果打印输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1) 编写一个 Student 结构体，包含 name、gender、age、id、score 字段，分别为 string、string、int、 int、float64 类型。</span></span><br><span class="line"><span class="comment">2) 结构体中声明一个 say 方法，返回 string 类型，方法返回信息中包含所有字段值。</span></span><br><span class="line"><span class="comment">3) 在 main 方法中，创建 Student 结构体实例(变量)，并访问 say 方法，并将调用结果打印输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Gender <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">Id     <span class="keyword">int</span></span><br><span class="line">Score  <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span> <span class="title">say</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">res := fmt.Sprintf(<span class="string">"Name=%v\nGender=%v\nAge=%v\nId=%v\nScore=%v"</span>, stu.Name, stu.Gender, stu.Age, stu.Id, stu.Score)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;</span><br><span class="line"><span class="string">"poker"</span>,</span><br><span class="line"><span class="string">"man"</span>,</span><br><span class="line"><span class="number">26</span>,</span><br><span class="line"><span class="number">01</span>,</span><br><span class="line"><span class="number">99.99</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res := stu.say()</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建结构体变量时指定字段值"><a href="#创建结构体变量时指定字段值" class="headerlink" title="创建结构体变量时指定字段值"></a>创建结构体变量时指定字段值</h2><h3 id="方式一-2"><a href="#方式一-2" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//在创建结构体变量时,就直接指定字段的值</span></span><br><span class="line"><span class="keyword">var</span> stu1 = Stu&#123;<span class="string">"小明"</span>, <span class="number">19</span>&#125; <span class="comment">//stu1, 结构体数据空间</span></span><br><span class="line"></span><br><span class="line">stu2 := Stu&#123;<span class="string">"小明"</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在创建结构体变量时, 把字段名和字段值写在一起, 就不会依赖字段的定义顺序</span></span><br><span class="line"><span class="keyword">var</span> stu3 = Stu&#123;</span><br><span class="line">Name: <span class="string">"jack"</span>,</span><br><span class="line">Age:  <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">stu4 := Stu&#123;</span><br><span class="line">Age:  <span class="number">30</span>,</span><br><span class="line">Name: <span class="string">"mary"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(stu1, stu2, stu3, stu4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二-2"><a href="#方式二-2" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式二, 返回结构体的指针类型</span></span><br><span class="line"><span class="keyword">var</span> stu5 *Stu = &amp;Stu&#123;<span class="string">"小王"</span>, <span class="number">29</span>&#125;</span><br><span class="line">stu6 := &amp;Stu&#123;<span class="string">"小王"</span>, <span class="number">39</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu7 = &amp;Stu &#123;</span><br><span class="line">Name : <span class="string">"小李"</span>,</span><br><span class="line">Age : <span class="number">49</span>,</span><br><span class="line">&#125;</span><br><span class="line">stu8 := &amp;Stu &#123;</span><br><span class="line">Age : <span class="number">59</span>,</span><br><span class="line">Name : <span class="string">"小李~"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(*stu5, *stu6, *stu7, *stu8)</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>  Golang 的结构体没有构造函数，通常可以使用工厂模式来解决这个问题。</p></blockquote><h3 id="为什么会有工厂模式"><a href="#为什么会有工厂模式" class="headerlink" title="为什么会有工厂模式"></a>为什么会有工厂模式</h3><p>例如现在有一个结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这个结构体的名称的首字母为大写,所以我们可以在外部进行调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/factory/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu model.Student</span><br><span class="line">stu.Name = <span class="string">"tom"</span></span><br><span class="line">stu.Age = <span class="number">26</span></span><br><span class="line"></span><br><span class="line">fmt.Println(stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如果这个结构体的名称首字母为小写时,其他文件就没有办法进行引用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;<span class="comment">//s为小写,外部无法调用</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以就出现了”工厂模式”</p><h3 id="工厂模式的使用方法"><a href="#工厂模式的使用方法" class="headerlink" title="工厂模式的使用方法"></a>工厂模式的使用方法</h3><ul><li>案例</li></ul><p>model外部模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为student结构体首字母是小写,因此只能在model使用</span></span><br><span class="line"><span class="comment">//我们通过工厂模式来解决</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(n <span class="keyword">string</span>, s <span class="keyword">float64</span>)</span> *<span class="title">student</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;student&#123;</span><br><span class="line">Name:  n,</span><br><span class="line">Score: s,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main主函数进行调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/factory/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu = model.NewStudent(<span class="string">"tom"</span>, <span class="number">99.8</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(*stu) <span class="comment">//stu接受的是NewStudent返回的一个指针</span></span><br><span class="line">fmt.Println(<span class="string">"name"</span>, stu.Name, <span class="string">" score="</span>, stu.Score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h50d0iqrrjj20ff015jrc.jpg" alt="image-20220809113632923"></p><blockquote><p>  type student struct {<br>      Name  string<br>      Score float64<br>  }</p><p>  如果这一段代码中的<code>Score</code>改为<code>score</code>的话,外部同样无法进行调用,这里我们应该如何处理呢?</p></blockquote><p>model外部模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为student结构体首字母是小写,因此只能在model使用</span></span><br><span class="line"><span class="comment">//我们通过工厂模式来解决</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span><span class="params">(n <span class="keyword">string</span>, s <span class="keyword">float64</span>)</span> *<span class="title">student</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;student&#123;</span><br><span class="line">Name:  n,</span><br><span class="line">score: s,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *student)</span> <span class="title">GetScore</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.score</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main主函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/factory/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu = model.NewStudent(<span class="string">"tom"</span>, <span class="number">99.8</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(*stu) <span class="comment">//stu接受的是NewStudent返回的一个指针</span></span><br><span class="line">fmt.Println(<span class="string">"name"</span>, stu.Name, <span class="string">" score="</span>, stu.GetScore())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象编程思想-抽象"><a href="#面向对象编程思想-抽象" class="headerlink" title="面向对象编程思想-抽象"></a>面向对象编程思想-抽象</h2><blockquote><p>  我们在前面去定义一个结构体时候，实际上就是把一类事物的共有的属性(字段)和行为(方法)提取出来，形成一个物理模型(结构体)。这种研究问题的方法称为抽象。</p></blockquote><p>案例</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h50h3qjflzj20lo06ajrr.jpg" alt="image-20220809135803801"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Account <span class="keyword">struct</span> &#123;</span><br><span class="line">AccountNo <span class="keyword">string</span></span><br><span class="line">Pwd       <span class="keyword">string</span></span><br><span class="line">Balance   <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="comment">//存款</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(account *Account)</span> <span class="title">SaveMoney</span><span class="params">(money <span class="keyword">float64</span>, pwd <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查输入的密码是否正确</span></span><br><span class="line"><span class="keyword">if</span> pwd != account.Pwd &#123;</span><br><span class="line">fmt.Println(<span class="string">"你输入的密码不正确"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//价差输入的存款金额是否正确</span></span><br><span class="line"><span class="keyword">if</span> money &lt;= <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"输入的金额不正确!"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.Balance += money</span><br><span class="line">fmt.Println(<span class="string">"存款成功"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取款</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(account *Account)</span> <span class="title">WithDraw</span><span class="params">(money <span class="keyword">float64</span>, pwd <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查输入的密码是否正确</span></span><br><span class="line"><span class="keyword">if</span> pwd != account.Pwd &#123;</span><br><span class="line">fmt.Println(<span class="string">"你输入的密码不正确"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//价差输入的取款金额是否正确</span></span><br><span class="line"><span class="keyword">if</span> money &lt;= <span class="number">0</span> || money &gt; account.Balance &#123;</span><br><span class="line">fmt.Println(<span class="string">"输入的金额不正确!"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.Balance -= money</span><br><span class="line">fmt.Println(<span class="string">"取款成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(account *Account)</span> <span class="title">QueryMoney</span><span class="params">(pwd <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pwd != account.Pwd &#123;</span><br><span class="line">fmt.Println(<span class="string">"你输入的密码不正确"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"你的账号为%v 余额为%v \n"</span>, account.AccountNo, account.Balance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> account = Account&#123;</span><br><span class="line">AccountNo: <span class="string">"gs123456"</span>,</span><br><span class="line">Pwd:       <span class="string">"123456"</span>,</span><br><span class="line">Balance:   <span class="number">100.0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">accountNo := <span class="string">""</span></span><br><span class="line">passwd := <span class="string">""</span></span><br><span class="line">fmt.Println(<span class="string">"请输入账户: "</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v"</span>, &amp;accountNo)</span><br><span class="line">fmt.Println(<span class="string">"请输入密码: "</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v"</span>, &amp;passwd)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建变量 i ,当 i == 1 时,程序退出</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于 while 循环</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断用户名与密码是否正确</span></span><br><span class="line"><span class="keyword">if</span> accountNo == account.AccountNo &amp;&amp; passwd == account.Pwd &#123;</span><br><span class="line">operate := <span class="string">""</span></span><br><span class="line">fmt.Println(<span class="string">"==============================="</span>)</span><br><span class="line">fmt.Println(<span class="string">"请选择您要进行的操作:[1|2|3|q] "</span>)</span><br><span class="line">fmt.Println(<span class="string">"1. 查询余额\n2. 存款操作\n3. 取款操作\nq. 退出"</span>)</span><br><span class="line">fmt.Println(<span class="string">"==============================="</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v"</span>, &amp;operate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> operate &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">account.QueryMoney(account.Pwd)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">money := <span class="number">0.00</span></span><br><span class="line">fmt.Println(<span class="string">"请输入存款金额: "</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v"</span>, &amp;money)</span><br><span class="line">account.SaveMoney(money, account.Pwd)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">money := <span class="number">0.00</span></span><br><span class="line">fmt.Println(<span class="string">"请输入取款金额: "</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v"</span>, &amp;money)</span><br><span class="line">account.WithDraw(money, account.Pwd)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"q"</span>:</span><br><span class="line">fmt.Println(<span class="string">"欢迎您下次光临~"</span>)</span><br><span class="line">i = <span class="number">1</span> <span class="comment">//退出循环</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入正确的选项!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"您输入的账户或密码错误!"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h50k2vt9eyj20fn0okwg0.jpg" alt="image-20220809154102839"></p><h2 id="面向对象编程三大特性-封装"><a href="#面向对象编程三大特性-封装" class="headerlink" title="面向对象编程三大特性-封装"></a>面向对象编程三大特性-封装</h2><blockquote><p>  Golang 仍然有面向对象编程的继承，封装和多态的特性，只是实现的方式和其它 OOP 语言不一样，下面我们一一进行详细的讲解 Golang 的三大特性是如何实现的。</p><p>  封装(encapsulation)就是把抽象出的字段和对字段的操作封装在一起,数据被保护在内部,程序的其它包只有通过被授权的操作(方法),才能对字段进行操作</p></blockquote><h3 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h3><p>1) 隐藏实现细节<br>2) 提可以对数据进行验证，保证安全合理(Age)</p><h3 id="如何实现封装"><a href="#如何实现封装" class="headerlink" title="如何实现封装"></a>如何实现封装</h3><p>1) 对结构体中的属性进行封装<br>2) 通过方法，包实现封装</p><h3 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h3><p>1) 将结构体、字段(属性)的首字母小写(不能导出了，其它包不能使用，类似 private)<br>2) 给结构体所在包提供一个工厂模式的函数，首字母大写。类似一个构造函数。<br>3) 提供一个首字母大写的 Set 方法(类似其它语言的 public)，用于对属性判断并赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(<span class="keyword">var</span> 结构体类型名)</span> <span class="title">SetXxx</span><span class="params">(参数列表)</span> <span class="params">(返回值列表)</span></span> &#123;</span><br><span class="line"><span class="comment">//加入数据验证的业务逻辑</span></span><br><span class="line"><span class="keyword">var</span>.字段 = 参数 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>提供一个首字母大写的 Get 方法(类似其它语言的 public)，用于获取属性的值</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(<span class="keyword">var</span> 结构体类型名)</span> <span class="title">GetXxx</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">var</span>.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><blockquote><p>  请大家看一个程序(person.go),不能随便查看人的年龄,工资等隐私，并对输入的年龄进行合理的验证。设计: model 包(person.go) main 包(main.go 调用 Person 结构体)</p></blockquote><p>model外部模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">age    <span class="keyword">int</span></span><br><span class="line">salary <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个工厂模式的函数,相当于构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">person</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">Name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了访问age和sal 我们编写一对 Setxxx 的方法和Getxxx的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">SetAge</span><span class="params">(age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span> &#123;</span><br><span class="line">p.age = age</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"年龄范围不正确!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">GetAge</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">SetSalary</span><span class="params">(salary <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">p.salary = salary</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">GetSalary</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.salary</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/FengZhuang/01/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := model.NewPerson(<span class="string">"poker"</span>)</span><br><span class="line">p.SetAge(<span class="number">26</span>)</span><br><span class="line">p.SetSalary(<span class="number">10000.0</span>)</span><br><span class="line">fmt.Println(p)</span><br><span class="line">fmt.Println(<span class="string">"Name="</span>, p.Name, <span class="string">"age="</span>, p.GetAge(), <span class="string">"salary="</span>, p.GetSalary())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h51jls02vqj20iy01974d.jpg" alt="image-20220810121009618"></p><h3 id="练习案例"><a href="#练习案例" class="headerlink" title="练习案例"></a>练习案例</h3><blockquote><p>  1) 创建程序,在 model 包中定义 Account 结构体:在 main 函数中体会 Golang 的封装性。<br>  2) Account结构体要求具有字段:账号(长度在6-10之间)、余额(必须&gt;20)、密码(必须是六<br>  3) 通过 SetXxx 的方法给 Account 的字段赋值。(同学们自己完成<br>  4) 在 main 函数中测试</p></blockquote><p>model外部模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> account <span class="keyword">struct</span> &#123;</span><br><span class="line">accountNo <span class="keyword">string</span></span><br><span class="line">pwd       <span class="keyword">string</span></span><br><span class="line">balance   <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAccount</span><span class="params">(accountNo <span class="keyword">string</span>, pwd <span class="keyword">string</span>, balance <span class="keyword">float64</span>)</span> *<span class="title">account</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对输入的内容进行判断</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(accountNo) &lt; <span class="number">6</span> || <span class="built_in">len</span>(accountNo) &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"账号的长度不正确!"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(pwd) != <span class="number">6</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"账号的密码长度不正确!"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> balance &lt; <span class="number">20</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"余额的数目不正确!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;account&#123;</span><br><span class="line">accountNo: accountNo,</span><br><span class="line">pwd:       pwd,</span><br><span class="line">balance:   balance,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="comment">//存款</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(account *account)</span> <span class="title">SaveMoney</span><span class="params">(money <span class="keyword">float64</span>, pwd <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查输入的密码是否正确</span></span><br><span class="line"><span class="keyword">if</span> pwd != account.pwd &#123;</span><br><span class="line">fmt.Println(<span class="string">"你输入的密码不正确"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//价差输入的存款金额是否正确</span></span><br><span class="line"><span class="keyword">if</span> money &lt;= <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"输入的金额不正确!"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.balance += money</span><br><span class="line">fmt.Println(<span class="string">"存款成功"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取款</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(account *account)</span> <span class="title">WithDraw</span><span class="params">(money <span class="keyword">float64</span>, pwd <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查输入的密码是否正确</span></span><br><span class="line"><span class="keyword">if</span> pwd != account.pwd &#123;</span><br><span class="line">fmt.Println(<span class="string">"你输入的密码不正确"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//价差输入的取款金额是否正确</span></span><br><span class="line"><span class="keyword">if</span> money &lt;= <span class="number">0</span> || money &gt; account.balance &#123;</span><br><span class="line">fmt.Println(<span class="string">"输入的金额不正确!"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.balance -= money</span><br><span class="line">fmt.Println(<span class="string">"取款成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(account *account)</span> <span class="title">QueryMoney</span><span class="params">(pwd <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pwd != account.pwd &#123;</span><br><span class="line">fmt.Println(<span class="string">"你输入的密码不正确"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"你的账号为%v 余额为%v \n"</span>, account.accountNo, account.balance)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/FengZhuang/02/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建一个 account 变量</span></span><br><span class="line">account := model.NewAccount(<span class="string">"jzh11111"</span>, <span class="string">"000000"</span>, <span class="number">40</span>)</span><br><span class="line"><span class="keyword">if</span> account != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"创建成功="</span>, account)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"创建失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h51jlaxavhj20k700uq2z.jpg" alt="image-20220810120940064"></p><h2 id="面向对象编程三大特性-继承"><a href="#面向对象编程三大特性-继承" class="headerlink" title="面向对象编程三大特性-继承"></a>面向对象编程三大特性-继承</h2><h3 id="为什么使用继承"><a href="#为什么使用继承" class="headerlink" title="为什么使用继承"></a>为什么使用继承</h3><ul><li>通过一个案例来说明</li></ul><p>model外部模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/JICheng/01/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> pupil = &amp;model.Pupil&#123;</span><br><span class="line">Name: <span class="string">"tom"</span>,</span><br><span class="line">Age:  <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pupil.Testing()</span><br><span class="line">pupil.SetScore(<span class="number">90</span>)</span><br><span class="line">pupil.ShowInfo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> graduate = &amp;model.Graduate&#123;</span><br><span class="line">Name: <span class="string">"tom"</span>,</span><br><span class="line">Age:  <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">graduate.Testing()</span><br><span class="line">graduate.SetScore(<span class="number">90</span>)</span><br><span class="line">graduate.ShowInfo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个学生考试系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小学生</span></span><br><span class="line"><span class="keyword">type</span> Pupil <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示他的成绩</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pupil)</span> <span class="title">ShowInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"学生名=%v 年龄=%v 成绩=%v \n"</span>, p.Name, p.Age, p.Score)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pupil)</span> <span class="title">SetScore</span><span class="params">(score <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//业务判断</span></span><br><span class="line">p.Score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pupil)</span> <span class="title">Testing</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"小学生正在考试中..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大学生</span></span><br><span class="line"><span class="keyword">type</span> Graduate <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示他的成绩</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Graduate)</span> <span class="title">ShowInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"学生名=%v 年龄=%v 成绩=%v \n"</span>, p.Name, p.Age, p.Score)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Graduate)</span> <span class="title">SetScore</span><span class="params">(score <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//业务判断</span></span><br><span class="line">p.Score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Graduate)</span> <span class="title">Testing</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"大学生正在考试中..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h51m6xkvuij20i601zaa7.jpg" alt="image-20220810133941739"></p><ul><li>对上面代码的总结</li></ul><p>1) <code>Pupil</code> 和 <code>Graduate</code> 两个结构体的字段和方法几乎，但是我们却写了两份相同的代码，代码复用性不<br>    强<br>2) 出现<code>代码冗余</code>，而且代码不利于维护，同时也不利于功能的扩展。<br>3) 解决方法: 通过<code>继承方式</code>来解决</p><h3 id="继承的介绍"><a href="#继承的介绍" class="headerlink" title="继承的介绍"></a>继承的介绍</h3><blockquote><p>  继承可以解决代码复用,让我们的编程更加靠近人类思维。<br>  当多个结构体存在相同的属性(字段)和方法时,可以从这些结构体中抽象出结构体(比如刚才的Student),在该结构体中定义这些相同的属性和方法。</p></blockquote><p>其它的结构体不需要重新定义这些属性(字段)和方法，只需嵌套一个 Student 匿名结构体即可</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h51opype5ij20ex099dg8.jpg" alt="image-20220810150710847"></p><blockquote><p>  也就是说: 在 Golang 中，如果一个 struct 嵌套了另一个匿名结构体，那么这个结构体可以直接访问匿名结构体的字段和方法，从而实现了继承特性。</p></blockquote><h3 id="嵌套匿名结构体的基本语法"><a href="#嵌套匿名结构体的基本语法" class="headerlink" title="嵌套匿名结构体的基本语法"></a>嵌套匿名结构体的基本语法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">Goods <span class="comment">//这里就是嵌套匿名结构体 Goods Writer string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速入门案例-1"><a href="#快速入门案例-1" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p>model外部函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个学生考试系统</span></span><br><span class="line"><span class="comment">//实现继承</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">Score <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示他的成绩</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Student)</span> <span class="title">ShowInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"学生名=%v 年龄=%v 成绩=%v \n"</span>, p.Name, p.Age, p.Score)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Student)</span> <span class="title">SetScore</span><span class="params">(score <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//业务判断</span></span><br><span class="line">p.Score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小学生</span></span><br><span class="line"><span class="keyword">type</span> Pupil <span class="keyword">struct</span> &#123;</span><br><span class="line">Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pupil)</span> <span class="title">Testing</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"小学生正在考试中..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大学生</span></span><br><span class="line"><span class="keyword">type</span> Graduate <span class="keyword">struct</span> &#123;</span><br><span class="line">Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Graduate)</span> <span class="title">Testing</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"大学生正在考试中..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/JICheng/01/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pupil = &amp;model.Pupil&#123;&#125;</span><br><span class="line">pupil.Student.Name = <span class="string">"tom"</span></span><br><span class="line">pupil.Student.Age = <span class="number">10</span></span><br><span class="line">pupil.Testing()</span><br><span class="line">pupil.Student.SetScore(<span class="number">90</span>)</span><br><span class="line">pupil.Student.ShowInfo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> graduate = &amp;model.Graduate&#123;&#125;</span><br><span class="line">graduate.Student.Name = <span class="string">"jack"</span></span><br><span class="line">graduate.Student.Age = <span class="number">11</span></span><br><span class="line">graduate.Testing()</span><br><span class="line">graduate.Student.SetScore(<span class="number">90</span>)</span><br><span class="line">graduate.Student.ShowInfo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h51p7lii0dj20i601y0su.jpg" alt="image-20220810152407939"></p><h3 id="继承的深入讨论"><a href="#继承的深入讨论" class="headerlink" title="继承的深入讨论"></a>继承的深入讨论</h3><ul><li>结构体可以使用<code>嵌套匿名结构体</code>所有的字段和方法，即:首字母大写或者小写的字段、方法，<br>都可以使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b B</span><br><span class="line">b.A.Name = <span class="string">"tom"</span></span><br><span class="line">b.A.age = <span class="number">19</span></span><br><span class="line">b.A.SayOk()</span><br><span class="line">b.A.Hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名结构体字段访问可以简化</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b B</span><br><span class="line">b.A.Name = <span class="string">"tom"</span></span><br><span class="line">b.A.age = <span class="number">19</span></span><br><span class="line">b.A.SayOk()</span><br><span class="line">b.A.Hello()</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的写法可以进行简化</span></span><br><span class="line">b.Name = <span class="string">"jack"</span></span><br><span class="line">b.age = <span class="number">20</span></span><br><span class="line">b.SayOk()</span><br><span class="line">b.Hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对上面代码的总结:</strong></p><p>(1) 当我们直接通过 <code>b</code> 访问字段或方法时，其执行流程如下比如 <code>b.Name</code><br>(2) 编译器会先看 <code>b</code> 对应的类型有没有 <code>Name</code>, 如果有，则直接调用 <code>B</code> 类型的 <code>Name</code> 字段<br>(3) 如果没有就去看 <code>B</code> 中嵌入的匿名结构体 <code>A</code> 有没有声明 <code>Name</code> 字段，如果有就调用,如果没有继续查找..如果都找不到就报错</p><ul><li>当<code>结构体</code>和<code>匿名结构体</code>有<code>相同的字段或者方法时</code>，编译器采用<code>就近访问原则</code>访问，如希望访问<code>匿名结构体</code>的字段和方法，可以通过<code>匿名结构体名</code>来区分</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b B</span><br><span class="line">b.A.Name = <span class="string">"tom"</span></span><br><span class="line">b.A.age = <span class="number">19</span></span><br><span class="line">b.A.SayOk()</span><br><span class="line">b.A.Hello()</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试就近原则</span></span><br><span class="line">b.Name = <span class="string">"poker"</span></span><br><span class="line">b.age = <span class="number">26</span></span><br><span class="line">b.SayOk()</span><br><span class="line">b.Hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h51sdrxt6uj20ha01x0sr.jpg" alt="image-20220810171352523"></p><ul><li>结构体嵌入两个(或多个)匿名结构体，如两个<code>匿名结构体</code>有<code>相同的字段和方法</code>(同时结构体本身没有同名的字段和方法)，在访问时，就必须明确<code>指定匿名结构体名字</code>，否则编译<strong>报错</strong>。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入一个新的结构体</span></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c C</span><br><span class="line">c.A.Name = <span class="string">"jenny"</span></span><br><span class="line">c.B.Name = <span class="string">"john"</span></span><br><span class="line"><span class="comment">//c.Name = "test" //错误写法</span></span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h51slbi2rkj20he00taa2.jpg" alt="image-20220810172107115"></p><ul><li>如果一个<code>struct</code> 嵌套了一个<code>有名结构体</code>，这种模式就是<code>组合</code>，如果是<code>组合</code>关系，那么在访问<code>组合的结构体的字段或方法</code>时，必须带上结构体的名字</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> D <span class="keyword">struct</span> &#123;</span><br><span class="line">a A</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意下面的写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> d D</span><br><span class="line">d.a.Name = <span class="string">"tom"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>嵌套匿名结构体后，也可以在创建结构体变量(实例)时，<code>直接指定</code>各个匿名结构体字段的值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line">c1 := C&#123;A&#123;<span class="string">"tom"</span>, <span class="number">10</span>&#125;, B&#123;<span class="string">"jack"</span>, <span class="number">100.0</span>&#125;&#125;</span><br><span class="line">    <span class="comment">//方式二: 不需要担心顺序问题</span></span><br><span class="line">c2 := C&#123;</span><br><span class="line">A&#123;</span><br><span class="line">Name: <span class="string">"tom1"</span>,</span><br><span class="line">age:  <span class="number">20</span>,</span><br><span class="line">&#125;,</span><br><span class="line">B&#123;</span><br><span class="line">Name:  <span class="string">"jack1"</span>,</span><br><span class="line">score: <span class="number">99.0</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"c1="</span>, c1)</span><br><span class="line">fmt.Println(<span class="string">"c2="</span>, c2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h51th1xwsij20h5016q2z.jpg" alt="image-20220810175137486"></p><ul><li>下面这段代码,会输出什么结果</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> E <span class="keyword">struct</span> &#123;</span><br><span class="line">Monster</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">n <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> e E</span><br><span class="line">e.Name = <span class="string">"kkk"</span></span><br><span class="line">e.Age = <span class="number">300</span></span><br><span class="line">e.<span class="keyword">int</span> = <span class="number">20</span></span><br><span class="line">e.n = <span class="number">40</span></span><br><span class="line">fmt.Println(<span class="string">"e="</span>, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h51tmhmx8dj20hb00t74a.jpg" alt="image-20220810175650660"></p><p>说明:</p><p>1)   如果一个结构体有 int 类型的匿名字段，就<code>不能</code>有<code>第二个</code>。<br>2)   如果需要有多个 int 的字段，则必须给 int 字段<code>指定名字</code></p><h2 id="面向对象编程三大特性-多重继承"><a href="#面向对象编程三大特性-多重继承" class="headerlink" title="面向对象编程三大特性-多重继承"></a>面向对象编程三大特性-多重继承</h2><blockquote><p>  多重继承其实在前面的案例中已经体现过了</p><p>  如一个 <code>struct</code> 嵌套了<code>多个匿名结构体</code>，那么该结构体可以直接访问嵌套的匿名结构体的字段和方法，从而实现了多重继承。</p></blockquote><ul><li>案例说明</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B SayOk"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *B)</span> <span class="title">Hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"B Hello"</span>, a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面这就是多重继承</span></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>  按顺序,我们应该讲解多态,但是在讲解多态前,我们需要讲解接口(interface)，因为在 Golang 中多态特性主要是通过接口来体现的。</p></blockquote><h3 id="接口快速入门"><a href="#接口快速入门" class="headerlink" title="接口快速入门"></a>接口快速入门</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">//声明两个没有实现的方法</span></span><br><span class="line">Start()</span><br><span class="line">Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让 Phone实现 Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"手机开始工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"手机停止工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Camera <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让 Camera 实现 Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"相机开始工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"相机停止工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">Working</span><span class="params">(usb Usb)</span></span> &#123;</span><br><span class="line">usb.Start()</span><br><span class="line">usb.Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">computer := Computer&#123;&#125;</span><br><span class="line">phone := Phone&#123;&#125;</span><br><span class="line">camera := Camera&#123;&#125;</span><br><span class="line"></span><br><span class="line">computer.Working(phone)</span><br><span class="line">computer.Working(camera)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h52tssg7ruj20hq01wdfv.jpg" alt="image-20220811144826030"></p><blockquote><p>  理解接口是什么东西了吗?</p><p>  我的理解就是,如果一个<code>结构体</code>想要用<code>其它结构体</code>的函数,就需要声明一个<code>接口</code>,接口中写入跟<code>被使用结构体</code>同名的<code>函数名称</code>,然后在<code>目前结构体</code>的<code>方法</code>中声明<code>接口</code>的一个<code>实例</code>,然后使用该<code>实例</code>来调用<code>被使用结构体</code>的<code>方法</code>,可能理解起来比较抽象</p><p>  interface 类型可以定义一组方法，但是这些不需要实现。并且 interface 不能包含任何变量。到某个自定义类型(比如结构体 Phone)要使用的时候,在根据具体情况把这些方法写出来(实现)</p></blockquote><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h52uisnto3j20mz04a3yr.jpg" alt="image-20220811151327049"></p><h3 id="小结说明"><a href="#小结说明" class="headerlink" title="小结说明"></a>小结说明</h3><p>1) 接口里的所有方法都没有方法体，即接口的方法都是没有实现的方法。接口体现了程序设计的多态和高内聚低偶合的思想。<br>2) Golang中的接口，不需要显式的实现。只要一个变量，含有接口类型中的所有方法，那么这个变量就实现这个接口。因此，Golang 中没有 implement 这样的关键字</p><h3 id="注意事项和细节-2"><a href="#注意事项和细节-2" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li><code>接口本身</code>不能创建实例,但是可以指向一个<code>实现了该接口</code>的自定义类型的<code>变量</code>(实例)</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">SayOk()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu SayOk()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Stu</span><br><span class="line"><span class="keyword">var</span> a Interface = stu<span class="comment">//相当与stu实例将它的 SayOk 方法的具体实现,传递给了接口类型变量 a</span></span><br><span class="line">a.SayOk()<span class="comment">//然后 a 就可以自由使用 SayOk 方法了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>接口中所有的方法都<code>没有</code>方法体,即都是<code>没有实现的方法</code>。</p></li><li><p>在 Golang 中，一个<code>自定义类型</code>需要将某个接口的<code>所有方法</code>都实现，我们说这个<code>自定义类型</code>实现了该接口。</p></li><li><p>一个<code>自定义类型</code>只有实现了某个接口，才能将该自定义类型的<code>实例</code>(变量)赋给接口类型</p></li><li><p>只要是<code>自定义数据类型</code>，就可以实现接口，<code>不仅仅</code>是结构体类型。</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">SayOk()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> integer <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i integer)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"integer SayOk i ="</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i integer = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b Interface = i</span><br><span class="line">b.SayOk()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>一个<code>自定义类型</code>可以实现多个接口</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InterfaceA <span class="keyword">interface</span> &#123;</span><br><span class="line">SayOk()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InterfaceB <span class="keyword">interface</span> &#123;</span><br><span class="line">SayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span> <span class="title">SayOk</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu SayOk()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span> <span class="title">SayHello</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu SayHello()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Stu</span><br><span class="line"><span class="keyword">var</span> a InterfaceA = stu</span><br><span class="line"><span class="keyword">var</span> b InterfaceB = stu</span><br><span class="line">a.SayOk()</span><br><span class="line">b.SayHello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>Golang<code>接口</code>中不能有<code>任何变量</code></p></li><li><p>一个接口(比如 A 接口)可以继承多个别的接口(比如 B,C 接口)，这时如果要实现 A 接口，也必须将 B,C 接口的方法也全部实现。</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InterfaceA <span class="keyword">interface</span> &#123;</span><br><span class="line">SayA()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InterfaceB <span class="keyword">interface</span> &#123;</span><br><span class="line">SayB()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InterfaceC <span class="keyword">interface</span> &#123;</span><br><span class="line">InterfaceA</span><br><span class="line">InterfaceB</span><br><span class="line">SayC()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果需要实现InterfaceA, 就需要将 InterfaceB 与 InterfaceC 的方法都实现</span></span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span> <span class="title">SayA</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu SayA()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span> <span class="title">SayB</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu SayB()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span> <span class="title">SayC</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Stu SayC()"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu Stu</span><br><span class="line"><span class="keyword">var</span> a InterfaceA = stu</span><br><span class="line">a.SayA()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li><p>interface类型默认是一个<code>指针</code>(引用类型)，如果没有对interface<code>初始化</code>就使用，那么会输出nil</p></li><li><p>空接口 interface{} 没有任何方法，所以所有类型都实现了空接口, 即我们可以把任何一个变量赋给空接口。</p></li></ol><h3 id="接口编程的最佳实践"><a href="#接口编程的最佳实践" class="headerlink" title="接口编程的最佳实践"></a>接口编程的最佳实践</h3><blockquote><p>  实现对 Hero 结构体切片的排序: sort.Sort(data Interface)</p><p>  根据官网提供的sort方法我们可以知道:</p><p>  1.接口类型已经在Sort包中定义好了</p><p>  2.调用接口中抽象方法的函数已经在Sort自己的包中定义好了(<code>sort.Sort(接口实例)</code>这个就是)</p><p>  3.需要我们自己实现 Len() Less() Swap() 三个方法来实现Sort接口中的抽象类</p><p>  4.我们只需要直接使用 sort.Sort() 传入自己结构体的实例即可</p><p>  官网链接: <a href="https://pkg.go.dev/sort#Interface" target="_blank" rel="noopener">https://pkg.go.dev/sort#Interface</a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h53zzm41o6j20wv04ngm3.jpg" alt="image-20220812150811059"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h53yqwkcegj21220jfdjf.jpg" alt="image-20220812142509163"></p><blockquote><p>  <a href="https://cs.opensource.google/go/go/+/refs/tags/go1.19:src/sort/sort.go;l=14" target="_blank" rel="noopener">https://cs.opensource.google/go/go/+/refs/tags/go1.19:src/sort/sort.go;l=14</a></p><p>  下面是官网 sort.Sort() 中的一个例子,我们可以进行套用</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h53z2actc8j20vl0o7te6.jpg" alt="image-20220812143608564"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Hero <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个数组结构体</span></span><br><span class="line"><span class="keyword">type</span> HeroSlice []Hero</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x HeroSlice)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x HeroSlice)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">//按照Age进行升序排序</span></span><br><span class="line"><span class="keyword">return</span> x[i].Age &lt; x[j].Age<span class="comment">//这里小于号当做是升序排列,大于号当做是降序排列</span></span><br><span class="line"><span class="comment">//按照Name进行升序排序</span></span><br><span class="line"><span class="comment">//return x[i].Name &lt; x[j].Name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x HeroSlice)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x[i], x[j] = x[j], x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> heroes HeroSlice <span class="comment">//HeroSlice 是一个数组结构体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环进行初始化赋值操作</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">hero := Hero&#123;</span><br><span class="line">Name: fmt.Sprintf(<span class="string">"英雄|%d"</span>, rand.Intn(<span class="number">100</span>)),</span><br><span class="line">Age:  rand.Intn(<span class="number">100</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将初始化好的新一条数据加入到heroes数组中</span></span><br><span class="line">heroes = <span class="built_in">append</span>(heroes, hero)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"对Age字段排序前"</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> heroes &#123;</span><br><span class="line">fmt.Println(<span class="string">"Name="</span>, v.Name, <span class="string">"Age="</span>, v.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对数组 heroes 进行排序</span></span><br><span class="line">sort.Sort(heroes)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"对Age字段排序后"</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> heroes &#123;</span><br><span class="line">fmt.Println(<span class="string">"Name="</span>, v.Name, <span class="string">"Age="</span>, v.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h53zwcoq9xj20hp08yjs2.jpg" alt="image-20220812150502416"></p><h3 id="实现接口-vs-继承"><a href="#实现接口-vs-继承" class="headerlink" title="实现接口 vs 继承"></a>实现接口 vs 继承</h3><blockquote><p>  现在有一只猴子,它只会爬树,但是他想学会飞翔和游泳</p><p>  请使用接口实现这个案例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Skill <span class="keyword">interface</span> &#123;</span><br><span class="line">Flying()</span><br><span class="line">Swimming()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础结构体</span></span><br><span class="line"><span class="keyword">type</span> Monkey <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monkey)</span> <span class="title">climbing</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(m.Name, <span class="string">"猴子生来会爬树..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现抽象方法</span></span><br><span class="line"><span class="keyword">type</span> SuperMonkey <span class="keyword">struct</span> &#123;</span><br><span class="line">Monkey<span class="comment">//继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SuperMonkey)</span> <span class="title">Flying</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"你现在可以飞了!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SuperMonkey)</span> <span class="title">Swimming</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"你现在可以游泳了!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承Monkey</span></span><br><span class="line"><span class="keyword">type</span> LittleMonkey <span class="keyword">struct</span> &#123;</span><br><span class="line">Monkey <span class="comment">//继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LittleMonkey)</span> <span class="title">getSkill</span><span class="params">(skill Skill)</span></span> &#123;</span><br><span class="line">skill.Flying()</span><br><span class="line">skill.Swimming()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">monkey := LittleMonkey&#123;Monkey&#123;<span class="string">"悟空"</span>&#125;&#125;</span><br><span class="line">superMonkey := SuperMonkey&#123;Monkey&#123;<span class="string">"卡卡罗特"</span>&#125;&#125;</span><br><span class="line">monkey.climbing()</span><br><span class="line">monkey.getSkill(&amp;superMonkey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5448u8uobj20hj01lq2z.jpg" alt="image-20220812173524727"></p><p><strong>说明:</strong></p><ul><li>继承的价值主要在于:解决代码的复用性和可维护性。</li><li>接口的价值主要在于:设计，设计好各种规范(方法)，让其它自定义类型去实现这些方法。</li></ul><h2 id="面向对象编程-多态"><a href="#面向对象编程-多态" class="headerlink" title="面向对象编程-多态"></a>面向对象编程-多态</h2><blockquote><p>  变量(实例)具有多种形态。面向对象的第三大特征，在 Go 语言，多态特征是通过接口实现的。可以按照统一的接口来调用不同的实现。这时接口变量就呈现不同的形态。</p></blockquote><h3 id="快速入门-7"><a href="#快速入门-7" class="headerlink" title="快速入门"></a>快速入门</h3><blockquote><p>  在前面的 Usb 接口案例，Usb usb ，既可以接收手机变量，又可以接收相机变量，就体现了 Usb 接口多态特性</p></blockquote><p>详情参考本文:<a href="###接口快速入门">接口快速入门</a></p><h3 id="接口体现多态的两种形式"><a href="#接口体现多态的两种形式" class="headerlink" title="接口体现多态的两种形式"></a>接口体现多态的两种形式</h3><ul><li>多态参数</li></ul><blockquote><p>  在前面的 Usb 接口案例，Usb usb ，即可以接收手机变量，又可以接收相机变量，就体现了 Usb 接口多态。</p></blockquote><ul><li>多态数组</li></ul><blockquote><p>  演示一个案例:给 Usb 数组中，存放 Phone 结构体 和 Camera 结构体变量</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">//声明两个没有实现的方法</span></span><br><span class="line">Start()</span><br><span class="line">Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让 Phone实现 Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"手机开始工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"手机停止工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Camera <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让 Camera 实现 Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"相机开始工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"相机停止工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">Working</span><span class="params">(usb Usb)</span></span> &#123;</span><br><span class="line">usb.Start()</span><br><span class="line">usb.Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Usb接口数组,可以存放 Phone 和 Camera 的结构体变量</span></span><br><span class="line"><span class="comment">//这里就体现出多态数组</span></span><br><span class="line"><span class="keyword">var</span> arrUsb [<span class="number">3</span>]Usb</span><br><span class="line">arrUsb[<span class="number">0</span>] = Phone&#123;<span class="string">"iphone"</span>&#125;</span><br><span class="line">arrUsb[<span class="number">1</span>] = Phone&#123;<span class="string">"vivo"</span>&#125;</span><br><span class="line">arrUsb[<span class="number">2</span>] = Camera&#123;<span class="string">"尼康"</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(arrUsb)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h54xqk79gnj20ov0bnta6.jpg" alt="image-20220813103548917"></p><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p>  类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型，就需要使用类型断言</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b2 <span class="keyword">float32</span> = <span class="number">1.1</span></span><br><span class="line">x = b2<span class="comment">//空接口,可以接收任何类型</span></span><br><span class="line">y := x.(<span class="keyword">float32</span>)</span><br><span class="line">fmt.Printf(<span class="string">"y的类型是 %T, 值是 %v\n"</span>, y, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h54xyroz29j20h700tmx5.jpg" alt="image-20220813104344257"></p><p><strong>说明:</strong></p><ul><li>在进行类型断言时，如果类型不匹配，就会报 panic, 因此进行类型断言时，要确保原来的空接口指向的就是断言的类型</li><li>如何在进行断言时，带上检测机制，如果成功就 ok,否则也不要报 panic</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b2 <span class="keyword">float32</span> = <span class="number">6.5</span></span><br><span class="line">x = b2 <span class="comment">//空接口,可以接收任何类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型断言(带检测)</span></span><br><span class="line"><span class="keyword">if</span> y, ok := x.(<span class="keyword">float32</span>); ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"convert success"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"y的类型是 %T , 值是=%v\n"</span>, y, y)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"convert fail"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"继续执行..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h54y6pcdl2j20h601jwei.jpg" alt="image-20220813105121739"></p><h3 id="最佳实践一"><a href="#最佳实践一" class="headerlink" title="最佳实践一"></a>最佳实践一</h3><blockquote><p>  在前面的 Usb 接口案例做改进:<br>  给 Phone 结构体增加一个特有的方法 call(), 当 Usb 接口接收的是 Phone 变量时，还需要调用 call</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">//声明两个没有实现的方法</span></span><br><span class="line">Start()</span><br><span class="line">Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让 Phone实现 Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"手机开始工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"手机停止工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有Phone拥有此方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Call</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"手机正在打电话"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Camera <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让 Camera 实现 Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"相机开始工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Camera)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"相机停止工作..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span> <span class="title">Working</span><span class="params">(usb Usb)</span></span> &#123;</span><br><span class="line">usb.Start()</span><br><span class="line"><span class="comment">//如果 usb 是指向 Phone 结构体变量, 则还需要调用Call方法</span></span><br><span class="line"><span class="keyword">if</span> phone, ok := usb.(Phone); ok &#123;</span><br><span class="line">phone.Call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usb.Stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Usb接口数组,可以存放 Phone 和 Camera 的结构体变量</span></span><br><span class="line"><span class="comment">//这里就体现出多态数组</span></span><br><span class="line"><span class="keyword">var</span> arrUsb [<span class="number">3</span>]Usb</span><br><span class="line">arrUsb[<span class="number">0</span>] = Phone&#123;<span class="string">"iphone"</span>&#125;</span><br><span class="line">arrUsb[<span class="number">1</span>] = Phone&#123;<span class="string">"vivo"</span>&#125;</span><br><span class="line">arrUsb[<span class="number">2</span>] = Camera&#123;<span class="string">"尼康"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历 arrUsb 数组</span></span><br><span class="line"><span class="keyword">var</span> computer Computer</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> arrUsb &#123;</span><br><span class="line">computer.Working(v)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h552s5vrm8j20h704baa7.jpg" alt="image-20220813133022782"></p><h3 id="最佳实践二"><a href="#最佳实践二" class="headerlink" title="最佳实践二"></a>最佳实践二</h3><blockquote><p>  写一函数，循环判断传入参数的类型:</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeJudge</span><span class="params">(items ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> index, x := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">fmt.Printf(<span class="string">"第%v个参数是 bool 类型, 值是%v\n"</span>, index, x)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float32</span>:</span><br><span class="line">fmt.Printf(<span class="string">"第%v个参数是 float32 类型, 值是%v\n"</span>, index, x)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">fmt.Printf(<span class="string">"第%v个参数是 float64 类型, 值是%v\n"</span>, index, x)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>, <span class="keyword">int32</span>, <span class="keyword">int64</span>:</span><br><span class="line">fmt.Printf(<span class="string">"第%v个参数是 整数类型, 值是%v\n"</span>, index, x)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">"第%v个参数是 string 类型, 值是%v\n"</span>, index, x)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">"第%v个参数是  不确定的类型, 值是%v\n"</span>, index, x)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> v1 <span class="keyword">float32</span> = <span class="number">1.1</span></span><br><span class="line"><span class="keyword">var</span> v2 <span class="keyword">float64</span> = <span class="number">1.2</span></span><br><span class="line"><span class="keyword">var</span> v3 <span class="keyword">int32</span> = <span class="number">30</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">"tom"</span></span><br><span class="line">address := <span class="string">"北京"</span></span><br><span class="line">v4 := <span class="number">300</span></span><br><span class="line"></span><br><span class="line">TypeJudge(v1, v2, v3, name, address, v4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h553als143j20hb02pdg2.jpg" alt="image-20220813134806710"></p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="家庭收支记账软件项目"><a href="#家庭收支记账软件项目" class="headerlink" title="家庭收支记账软件项目"></a>家庭收支记账软件项目</h2><h3 id="项目开发流程说明"><a href="#项目开发流程说明" class="headerlink" title="项目开发流程说明"></a>项目开发流程说明</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57kaux6yaj20lx0aygmk.jpg" alt="image-20220815170739823"></p><h3 id="项目需求说明"><a href="#项目需求说明" class="headerlink" title="项目需求说明"></a>项目需求说明</h3><p>1) 模拟实现基于文本界面的《家庭记账软件》<br>2) 该软件能够记录家庭的收入、支出，并能够打印收支明细表</p><h3 id="项目代码实现-面向过程"><a href="#项目代码实现-面向过程" class="headerlink" title="项目代码实现-面向过程"></a>项目代码实现-面向过程</h3><blockquote><p>  目前只实现其过程,等完成这个项目需求之后,我们再将其改为面向对象方式实现</p><p>  目前只在一个main.go中实现功能</p></blockquote><h4 id="功能一-实现主菜单"><a href="#功能一-实现主菜单" class="headerlink" title="功能一:实现主菜单"></a>功能一:实现主菜单</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//key接收用户输入的操作</span></span><br><span class="line">key := <span class="string">""</span></span><br><span class="line"><span class="comment">//loop控制是否退出</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------家庭收支记账软件----------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"1. 收支明细"</span>)</span><br><span class="line">fmt.Println(<span class="string">"2. 登记收入"</span>)</span><br><span class="line">fmt.Println(<span class="string">"3. 登记支出"</span>)</span><br><span class="line">fmt.Println(<span class="string">"q. 退出软件"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请选择1|2|3|q: "</span>)</span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">fmt.Println(<span class="string">"----------------当前收支明细记录----------------"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">fmt.Println(<span class="string">"登记收入"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">fmt.Println(<span class="string">"登记支出"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"q"</span>:</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入正确的选项!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"您已退出[家庭记账软件]"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57l9l24egj20j20ct753.jpg" alt="image-20220815174102141"></p><h4 id="功能二-显示明细和登记收入"><a href="#功能二-显示明细和登记收入" class="headerlink" title="功能二:显示明细和登记收入"></a>功能二:显示明细和登记收入</h4><ul><li>定义变量来记录余额(balance)、每次收支的金额(money), 每次收支的说明(note)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key接收用户输入的操作</span></span><br><span class="line">key := <span class="string">""</span></span><br><span class="line"><span class="comment">//loop控制是否退出</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance := <span class="number">10000.0</span></span><br><span class="line"><span class="comment">//每次每次收支的金额</span></span><br><span class="line">money := <span class="number">0.0</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note := <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line"><span class="comment">//当有收支时,只需要对details进行拼接处理即可</span></span><br><span class="line">title := <span class="string">"收支\t账户金额\t收支金额\t说    明"</span> <span class="comment">//收支明细的标题</span></span><br><span class="line">details := <span class="string">""</span></span><br></pre></td></tr></table></figure><ul><li>收入明细实现</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">fmt.Println(<span class="string">"----------------当前收支明细记录----------------"</span>)</span><br><span class="line">fmt.Println(details)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入收入金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line">balance += money</span><br><span class="line">fmt.Println(<span class="string">"本次收入说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将这个收入情况拼接到details变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">"\n收入\t%v\t\t%v\t\t%v"</span>, balance, money, note)</span><br></pre></td></tr></table></figure><h4 id="功能三-登记支出的功能"><a href="#功能三-登记支出的功能" class="headerlink" title="功能三:登记支出的功能"></a>功能三:登记支出的功能</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入支出金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line"><span class="keyword">if</span> money &gt; balance &#123;</span><br><span class="line">fmt.Println(<span class="string">"余额不足"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">balance -= money</span><br><span class="line">fmt.Println(<span class="string">"本次支出说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将这个收入情况拼接到details变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">"\n支出\t%v\t\t%v\t\t%v"</span>, balance, money, note)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57lvf6sybj20k10ay0tg.jpg" alt="image-20220815180202077"></p><h4 id="代码改进"><a href="#代码改进" class="headerlink" title="代码改进"></a>代码改进</h4><ul><li>用户输入 <code>q</code>退出时，给出提示<code>确定要退出吗?(y/n)</code>，必须输入正确的 <code>y/n</code> ，否则循环输入指令，直到输入 y 或者 n</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"q"</span>:</span><br><span class="line">exit_key := <span class="string">""</span></span><br><span class="line">fmt.Println(<span class="string">"确定要退出吗?(y/n)"</span>)</span><br><span class="line">fmt.Scanln(&amp;exit_key)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> exit_key == <span class="string">"y"</span> &#123;</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> exit_key == <span class="string">"n"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"你的输入有误,请重新输入!(y/n)"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当没有任何收支明细时，提示 <code>当前没有收支明细... 来一笔吧!</code></li></ul><blockquote><p>  下面是完整的一段代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//key接收用户输入的操作</span></span><br><span class="line">key := <span class="string">""</span></span><br><span class="line"><span class="comment">//loop控制是否退出</span></span><br><span class="line">loop := <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户的余额</span></span><br><span class="line">balance := <span class="number">10000.0</span></span><br><span class="line"><span class="comment">//每次每次收支的金额</span></span><br><span class="line">money := <span class="number">0.0</span></span><br><span class="line"><span class="comment">//每次收支的说明</span></span><br><span class="line">note := <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line"><span class="comment">//当有收支时,只需要对details进行拼接处理即可</span></span><br><span class="line">title := <span class="string">"收支\t账户金额\t收支金额\t说    明"</span> <span class="comment">//收支明细的标题</span></span><br><span class="line">details := <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------家庭收支记账软件----------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"1. 收支明细"</span>)</span><br><span class="line">fmt.Println(<span class="string">"2. 登记收入"</span>)</span><br><span class="line">fmt.Println(<span class="string">"3. 登记支出"</span>)</span><br><span class="line">fmt.Println(<span class="string">"q. 退出软件"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请选择1|2|3|q: "</span>)</span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">fmt.Println(<span class="string">"----------------当前收支明细记录----------------"</span>)</span><br><span class="line"><span class="keyword">if</span> details == <span class="string">""</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"当前没有收支明细... 来一笔吧!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(title)</span><br><span class="line">fmt.Println(details)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入收入金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line">balance += money</span><br><span class="line">fmt.Println(<span class="string">"本次收入说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将这个收入情况拼接到details变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">"收入\t%v\t\t%v\t\t%v"</span>, balance, money, note)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入支出金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;money)</span><br><span class="line"><span class="keyword">if</span> money &gt; balance &#123;</span><br><span class="line">fmt.Println(<span class="string">"余额不足"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">balance -= money</span><br><span class="line">fmt.Println(<span class="string">"本次支出说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;note)</span><br><span class="line"><span class="comment">//将这个收入情况拼接到details变量</span></span><br><span class="line">details += fmt.Sprintf(<span class="string">"支出\t%v\t\t%v\t\t%v"</span>, balance, money, note)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"q"</span>:</span><br><span class="line">exit_key := <span class="string">""</span></span><br><span class="line">fmt.Println(<span class="string">"确定要退出吗?(y/n)"</span>)</span><br><span class="line">fmt.Scanln(&amp;exit_key)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> exit_key == <span class="string">"y"</span> &#123;</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> exit_key == <span class="string">"n"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"你的输入有误,请重新输入!(y/n)"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入正确的选项!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"您已退出[家庭记账软件]"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目代码实现-面向对象"><a href="#项目代码实现-面向对象" class="headerlink" title="项目代码实现-面向对象"></a>项目代码实现-面向对象</h3><blockquote><p>  实现思路:</p><ol><li>更改上面面向过程的代码来实现</li><li>创建新的结构体,将各个功能分割为该结构体的方法</li><li>将各个方法存放到各自单独的文件中,由main主函数进行调用</li></ol></blockquote><ul><li>总体代码</li></ul><blockquote><p>  自行将不同的部分放入不同的文件中即可(需要自己引入包),也可以都放入main.go中执行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//model模块</span></span><br><span class="line"><span class="keyword">type</span> FamilyAccount <span class="keyword">struct</span> &#123;</span><br><span class="line">key     <span class="keyword">string</span>  <span class="comment">//key接收用户输入的操作</span></span><br><span class="line">loop    <span class="keyword">bool</span>    <span class="comment">//loop控制是否退出</span></span><br><span class="line">balance <span class="keyword">float64</span> <span class="comment">//定义账户的余额</span></span><br><span class="line">money   <span class="keyword">float64</span> <span class="comment">//每次每次收支的金额</span></span><br><span class="line">note    <span class="keyword">string</span>  <span class="comment">//每次收支的说明</span></span><br><span class="line"><span class="comment">//收支的详情使用字符串来记录</span></span><br><span class="line">title   <span class="keyword">string</span> <span class="comment">//收支明细的标题</span></span><br><span class="line">details <span class="keyword">string</span> <span class="comment">//当有收支时,只需要对details进行拼接处理即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFmailyAccount</span><span class="params">()</span> *<span class="title">FamilyAccount</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;FamilyAccount&#123;</span><br><span class="line">key:     <span class="string">""</span>,</span><br><span class="line">loop:    <span class="literal">true</span>,</span><br><span class="line">balance: <span class="number">10000.0</span>,</span><br><span class="line">money:   <span class="number">0.0</span>,</span><br><span class="line">note:    <span class="string">""</span>,</span><br><span class="line">title:   <span class="string">"收支\t账户金额\t收支金额\t说    明"</span>,</span><br><span class="line">details: <span class="string">""</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FamilyAccount)</span> <span class="title">showDetails</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------当前收支明细记录----------------"</span>)</span><br><span class="line"><span class="keyword">if</span> f.details == <span class="string">""</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"当前没有收支明细... 来一笔吧!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Print(f.title)</span><br><span class="line">fmt.Println(f.details)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FamilyAccount)</span> <span class="title">income</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"请输入收入金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;f.money)</span><br><span class="line">f.balance += f.money</span><br><span class="line">fmt.Println(<span class="string">"本次收入说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;f.note)</span><br><span class="line"><span class="comment">//将这个收入情况拼接到details变量</span></span><br><span class="line">f.details += fmt.Sprintf(<span class="string">"\n收入\t%v\t\t%v\t\t%v"</span>, f.balance, f.money, f.note)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FamilyAccount)</span> <span class="title">pay</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag := <span class="literal">true</span> <span class="comment">//判断余额是否足够</span></span><br><span class="line">fmt.Println(<span class="string">"请输入支出金额:"</span>)</span><br><span class="line">fmt.Scanln(&amp;f.money)</span><br><span class="line"><span class="keyword">if</span> f.money &gt; f.balance &#123;</span><br><span class="line">fmt.Println(<span class="string">"余额不足"</span>)</span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果余额不足,则跳过下面的步骤</span></span><br><span class="line"><span class="keyword">if</span> flag == <span class="literal">true</span> &#123;</span><br><span class="line">f.balance -= f.money</span><br><span class="line">fmt.Println(<span class="string">"本次支出说明:"</span>)</span><br><span class="line">fmt.Scanln(&amp;f.note)</span><br><span class="line"><span class="comment">//将这个收入情况拼接到details变量</span></span><br><span class="line">f.details += fmt.Sprintf(<span class="string">"\n支出\t%v\t\t%v\t\t%v"</span>, f.balance, f.money, f.note)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FamilyAccount)</span> <span class="title">exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">exit_key := <span class="string">""</span></span><br><span class="line">fmt.Println(<span class="string">"确定要退出吗?(y/n)"</span>)</span><br><span class="line">fmt.Scanln(&amp;exit_key)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> exit_key == <span class="string">"y"</span> &#123;</span><br><span class="line">f.loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> exit_key == <span class="string">"n"</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"你的输入有误,请重新输入!(y/n)"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FamilyAccount)</span> <span class="title">MainMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------------家庭收支记账软件----------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"1. 收支明细"</span>)</span><br><span class="line">fmt.Println(<span class="string">"2. 登记收入"</span>)</span><br><span class="line">fmt.Println(<span class="string">"3. 登记支出"</span>)</span><br><span class="line">fmt.Println(<span class="string">"q. 退出软件"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"请选择1|2|3|q: "</span>)</span><br><span class="line">fmt.Scanln(&amp;f.key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> f.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">f.showDetails()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">f.income()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">f.pay()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"q"</span>:</span><br><span class="line">f.exit()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"请输入正确的选项!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !f.loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = NewFmailyAccount()</span><br><span class="line"></span><br><span class="line">p1.MainMenu()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户信息关系系统项目"><a href="#客户信息关系系统项目" class="headerlink" title="客户信息关系系统项目"></a>客户信息关系系统项目</h2><h3 id="项目需求分析"><a href="#项目需求分析" class="headerlink" title="项目需求分析"></a>项目需求分析</h3><p>1) 模拟实现基于文本界面的《客户信息管理软件》。<br>2) 该软件能够实现对客户对象的插入、修改和删除(用切片实现)，并能够打印客户明细表</p><h3 id="项目界面设计"><a href="#项目界面设计" class="headerlink" title="项目界面设计"></a>项目界面设计</h3><ul><li>主菜单界面</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58gkq0xsij20h407y0st.jpg" alt="image-20220816114416811"></p><ul><li>添加客户界面</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58glfd5euj20ju06qq34.jpg" alt="image-20220816114459544"></p><ul><li>修改客户界面</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58gm2fgjwj20ja0753yy.jpg" alt="image-20220816114535614"></p><ul><li>删除客户界面</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58gmqie2ij20il03kaa6.jpg" alt="image-20220816114614195"></p><ul><li>客户列表界面</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58gn9uc3ej20ii04kt92.jpg" alt="image-20220816114645413"></p><h3 id="客户关系管理系统的程序框架图"><a href="#客户关系管理系统的程序框架图" class="headerlink" title="客户关系管理系统的程序框架图"></a>客户关系管理系统的程序框架图</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58mp9liydj20mk0asq3w.jpg" alt="image-20220816151616530"></p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="显示主菜单和退出软件功能"><a href="#显示主菜单和退出软件功能" class="headerlink" title="显示主菜单和退出软件功能"></a>显示主菜单和退出软件功能</h4><ul><li>model/customer.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个customer结构体,表示一个客户信息</span></span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">Id     <span class="keyword">int</span></span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Gender <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">Phone  <span class="keyword">string</span></span><br><span class="line">Email  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用工程模式,返回一个Customer的实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomer</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>, gender <span class="keyword">string</span>, age <span class="keyword">int</span>, phone <span class="keyword">string</span>, email <span class="keyword">string</span>)</span> <span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Customer&#123;</span><br><span class="line">Id:     id,</span><br><span class="line">Name:   name,</span><br><span class="line">Gender: gender,</span><br><span class="line">Age:    age,</span><br><span class="line">Phone:  phone,</span><br><span class="line">Email:  email,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service/customerService.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"golang_study/object_oriented_programming/KeHuGuanXiGuanLiXiTong/model"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//该 customerService,完成对 customer 的操作,包括</span></span><br><span class="line"><span class="comment">//增删改查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customerService <span class="keyword">struct</span> &#123;</span><br><span class="line">customers []model.Customer</span><br><span class="line"><span class="comment">//声明一个字段,表示当前切片含有多少个客户</span></span><br><span class="line"><span class="comment">//该字段后面,还可以作为新客户的 id+1</span></span><br><span class="line">customerNum <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>view/customerView.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CustomerView <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//定义必要字段</span></span><br><span class="line">key  <span class="keyword">string</span> <span class="comment">//接收用户信息</span></span><br><span class="line">loop <span class="keyword">bool</span>   <span class="comment">//表示是否循环显示主菜单</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">mainMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"-----------------客户信息管理软件-----------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                 1 添 加 客 户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                 2 修 改 客 户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                 3 删 除 客 户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                 4 客 户 列 表"</span>)</span><br><span class="line">fmt.Println(<span class="string">"                 5 退      出"</span>)</span><br><span class="line">fmt.Println(<span class="string">"-----------------------------------------------"</span>)</span><br><span class="line">fmt.Print(<span class="string">"请选择(1-5):"</span>)</span><br><span class="line">fmt.Scanln(&amp;c.key)</span><br><span class="line"><span class="keyword">switch</span> c.key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">fmt.Println(<span class="string">"添 加 客 户"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">fmt.Println(<span class="string">"修 改 客 户"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">fmt.Println(<span class="string">"删 除 客 户"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">fmt.Println(<span class="string">"客 户 列 表"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">c.loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"你的输入有误，请重新输入..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !c.loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"你退出了客户关系管理系统..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//在main中,创建一个customerView,并运行显示主菜单</span></span><br><span class="line">customerView := customerView &#123;</span><br><span class="line">key: <span class="string">""</span>,</span><br><span class="line">loop: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示主菜单</span></span><br><span class="line">customerView.mainMenu()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="显示客户列表的功能"><a href="#显示客户列表的功能" class="headerlink" title="显示客户列表的功能"></a>显示客户列表的功能</h4><ul><li>model/customer.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回用户的信息,格式化的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Customer)</span> <span class="title">GetInfo</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">info := fmt.Sprintf(<span class="string">"%v\t%v\t%v\t%v\t%v\t%v"</span>, c.id, c.name, c.age, c.gender, c.phone, c.email)</span><br><span class="line"><span class="keyword">return</span> info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service/customerService.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写一个函数,可以返回 *CustomerService</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomerService</span><span class="params">()</span> *<span class="title">CustomerService</span></span> &#123;</span><br><span class="line"><span class="comment">//为了能够看到有客户在切片中,我们初始化一个客户</span></span><br><span class="line">CustomerService := &amp;CustomerService&#123;&#125;</span><br><span class="line">CustomerService.customerNum = <span class="number">1</span></span><br><span class="line">customer := model.NewCustomer(<span class="number">1</span>, <span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">20</span>, <span class="string">"112"</span>, <span class="string">"syz15822409222@126.com"</span>)</span><br><span class="line">CustomerService.customers = <span class="built_in">append</span>(CustomerService.customers, customer)</span><br><span class="line"><span class="keyword">return</span> CustomerService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">List</span><span class="params">()</span> []<span class="title">model</span>.<span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.customers</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>view/customerView.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示所有客户的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">list</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//首先获取到当前所有的客户信息(在切片中)</span></span><br><span class="line">customers := c.customerService.List()</span><br><span class="line">fmt.Println(<span class="string">"---------------------客户列表--------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"编号\t姓名\t性别\t年龄\t电话\t邮箱"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(customers); i++ &#123;</span><br><span class="line">fmt.Println(customers[i].GetInfo())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"-------------------客户列表完成-------------------"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h59xde7vi4j20j70kdwg7.jpg" alt="image-20220817181101019"></p><h4 id="添加客户的功能"><a href="#添加客户的功能" class="headerlink" title="添加客户的功能"></a>添加客户的功能</h4><ul><li>实现思路</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h59x4uqtefj20of0awdhf.jpg" alt="image-20220817180245661"></p><ul><li>model/customer.go</li></ul><blockquote><p>  增加下面的内容(不手动指定id号,让其自动累加)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种创建Customer实例方法,不带id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomer2</span><span class="params">(name <span class="keyword">string</span>, gender <span class="keyword">string</span>, age <span class="keyword">int</span>, phone <span class="keyword">string</span>, email <span class="keyword">string</span>)</span> <span class="title">Customer</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Customer&#123;</span><br><span class="line">Name:   name,</span><br><span class="line">Gender: gender,</span><br><span class="line">Age:    age,</span><br><span class="line">Phone:  phone,</span><br><span class="line">Email:  email,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>service/customerService.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加客户端到customer切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Add</span><span class="params">(customer model.Customer)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">//我们确定一个分配id的规则,就是添加的顺序</span></span><br><span class="line">c.customerNum++ <span class="comment">//这样我们就不用写id了</span></span><br><span class="line">customer.Id = c.customerNum</span><br><span class="line">c.customers = <span class="built_in">append</span>(c.customers, customer)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>view/customerView.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到用户的输入,信息构建新的客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------添加客户--------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"姓名:"</span>)</span><br><span class="line">name := <span class="string">""</span></span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">fmt.Println(<span class="string">"性别"</span>)</span><br><span class="line">gender := <span class="string">""</span></span><br><span class="line">fmt.Scanln(&amp;gender)</span><br><span class="line">fmt.Println(<span class="string">"年龄"</span>)</span><br><span class="line">age := <span class="number">0</span></span><br><span class="line">fmt.Scanln(&amp;age)</span><br><span class="line">fmt.Println(<span class="string">"电话"</span>)</span><br><span class="line">phone := <span class="string">""</span></span><br><span class="line">fmt.Scanln(&amp;phone)</span><br><span class="line">fmt.Println(<span class="string">"邮件"</span>)</span><br><span class="line">email := <span class="string">""</span></span><br><span class="line">fmt.Scanln(&amp;email)</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建一个新的Customer实例</span></span><br><span class="line"><span class="comment">//注意id号,没有让用户输入,id是唯一的,需要系统分配</span></span><br><span class="line">customer := model.NewCustomer2(name, gender, age, phone, email)</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">if</span> c.customerService.Add(customer) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------添加完成--------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------添加失败--------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h59xbwesfrj20k70kxdhr.jpg" alt="image-20220817180934415"></p><h4 id="删除客户的功能"><a href="#删除客户的功能" class="headerlink" title="删除客户的功能"></a>删除客户的功能</h4><ul><li>实现思路</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5aoomjz3tj20oo0ajtab.jpg" alt="image-20220818095556737"></p><ul><li>model/customer.go(没有变化)</li><li>service/customerService.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据客户的id删除客户的信息</span></span><br><span class="line"><span class="comment">//首先实现查找客户的id是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">FindById</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">index := <span class="number">-1</span></span><br><span class="line"><span class="comment">//遍历 c.customers 切片</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c.customers); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> c.customers[i].Id == id &#123;</span><br><span class="line">index = i <span class="comment">//找到</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果id存在,那么删除该用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Delete</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">index := c.FindById(id)</span><br><span class="line"><span class="comment">//如果 index = -1, 说明没有这个客户</span></span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从切片中删除一个元素</span></span><br><span class="line">c.customers = <span class="built_in">append</span>(c.customers[:index], c.customers[index+<span class="number">1</span>:]...)<span class="comment">//注意这里的写法</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>view/customerView.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到用户的id后,删除该id对应的客户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">delete</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除客户--------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请输入待删除客户的id编号(-1退出):"</span>)</span><br><span class="line">id := <span class="number">-1</span></span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line"><span class="keyword">if</span> id == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//放弃删除操作</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"确认是否删除(Y/N):"</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//定义一个变量,接收下面的for循环是否退出</span></span><br><span class="line">flag := <span class="literal">false</span></span><br><span class="line">choice := <span class="string">""</span></span><br><span class="line">fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">switch</span> choice &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"y"</span>, <span class="string">"Y"</span>:</span><br><span class="line"><span class="keyword">if</span> c.customerService.Delete(id) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除完成--------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------删除失败--------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"n"</span>, <span class="string">"N"</span>:</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"您的输入有误,请输入正确的选项!(Y/N)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 flag == true, 则退出for循环</span></span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5apykw7pvj20kb0jc75z.jpg" alt="image-20220818104008935"></p><h4 id="完善退出确认功能"><a href="#完善退出确认功能" class="headerlink" title="完善退出确认功能"></a>完善退出确认功能</h4><ul><li>view/customerView.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出软件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">exit</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">n := <span class="number">0</span> <span class="comment">//给主函数返回一个变量用于判断是否退出</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//定义一个变量,接收下面的for循环是否退出</span></span><br><span class="line">flag := <span class="literal">true</span> <span class="comment">//true代表退出循环</span></span><br><span class="line">fmt.Println(<span class="string">"确认是否退出(Y/N):"</span>)</span><br><span class="line">choice := <span class="string">""</span></span><br><span class="line">fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">switch</span> choice &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"y"</span>, <span class="string">"Y"</span>:</span><br><span class="line">fmt.Println(<span class="string">"感谢您的使用,下次再见~"</span>)</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"n"</span>, <span class="string">"N"</span>:</span><br><span class="line">fmt.Println(<span class="string">"感谢您的喜欢与支持~"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"您的输入有误,请输入正确的选项!(Y/N)"</span>)</span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 flag == true, 则退出for循环</span></span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5armr7kftj20ik0lutah.jpg" alt="image-20220818113759580"></p><h4 id="修改客户信息"><a href="#修改客户信息" class="headerlink" title="修改客户信息"></a>修改客户信息</h4><blockquote><p>  修改客户信息,需要在<code>customerService</code>与<code>customerView</code>中进行编写</p></blockquote><ul><li>service/customerService.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据客户提供的id,对客户的相关个人信息进行修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CustomerService)</span> <span class="title">Alter</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>, gender <span class="keyword">string</span>, age <span class="keyword">int</span>, phone <span class="keyword">string</span>, email <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">index := c.FindById(id)</span><br><span class="line"><span class="comment">//如果 index = -1, 说明没有这个客户</span></span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改客户信息,按下回车表示不修改</span></span><br><span class="line"><span class="keyword">if</span> c.customers[index].Name != <span class="string">"\n"</span> &#123;</span><br><span class="line">c.customers[index].Name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.customers[index].Gender != <span class="string">"\n"</span> &#123;</span><br><span class="line">c.customers[index].Gender = gender</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.customers[index].Age != <span class="number">0</span> &#123; <span class="comment">//0表示没有修改</span></span><br><span class="line">c.customers[index].Age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.customers[index].Phone != <span class="string">"\n"</span> &#123;</span><br><span class="line">c.customers[index].Phone = phone</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.customers[index].Email != <span class="string">"\n"</span> &#123;</span><br><span class="line">c.customers[index].Email = email</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>view/customerView.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改客户信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customerView)</span> <span class="title">alter</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------修改客户--------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请输入待删除客户的id编号(-1退出):"</span>)</span><br><span class="line">id := <span class="number">-1</span></span><br><span class="line">fmt.Scanln(&amp;id)</span><br><span class="line"><span class="keyword">if</span> id == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">//放弃修改操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index := c.customerService.FindById(id) <span class="comment">//获取对应id的数组的索引</span></span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;                        <span class="comment">//如果index == -1,说明没有这个用户</span></span><br><span class="line">fmt.Println(<span class="string">"-----------该id不存在,请检查后重新尝试-----------"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">customers := c.customerService.List() <span class="comment">//获取数组的所有信息</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"姓名(%v):"</span>, customers[index].Name)</span><br><span class="line">name := customers[index].Name</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"性别(%v):"</span>, customers[index].Gender)</span><br><span class="line">gender := customers[index].Gender</span><br><span class="line">fmt.Scanln(&amp;gender)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"年龄(%v):"</span>, customers[index].Age)</span><br><span class="line">age := customers[index].Age</span><br><span class="line">fmt.Scanln(&amp;age)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"电话(%v):"</span>, customers[index].Phone)</span><br><span class="line">phone := customers[index].Phone</span><br><span class="line">fmt.Scanln(&amp;phone)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"邮箱(%v):"</span>, customers[index].Email)</span><br><span class="line">email := customers[index].Email</span><br><span class="line">fmt.Scanln(&amp;email)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"确认是否修改(Y/N):"</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//定义一个变量,接收下面的for循环是否退出</span></span><br><span class="line">flag := <span class="literal">false</span></span><br><span class="line">choice := <span class="string">""</span></span><br><span class="line">fmt.Scanln(&amp;choice)</span><br><span class="line"><span class="keyword">switch</span> choice &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"y"</span>, <span class="string">"Y"</span>:</span><br><span class="line"><span class="keyword">if</span> c.customerService.Alter(id, name, gender, age, phone, email) &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------修改完成--------------------"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"---------------------修改失败--------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"n"</span>, <span class="string">"N"</span>:</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"您的输入有误,请输入正确的选项!(Y/N)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 flag == true, 则退出for循环</span></span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5ayet6s5rj20js0llgnb.jpg" alt="image-20220818153232485"></p><blockquote><p>  至此,客户信息关系系统完成~</p></blockquote><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="打开-关闭文件用到的方法"><a href="#打开-关闭文件用到的方法" class="headerlink" title="打开/关闭文件用到的方法"></a>打开/关闭文件用到的方法</h2><h3 id="func-Open"><a href="#func-Open" class="headerlink" title="func Open"></a>func <a href="https://cs.opensource.google/go/go/+/go1.19:src/os/file.go;l=316" target="_blank" rel="noopener">Open</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Open(name string) (*File, error)</span><br></pre></td></tr></table></figure><p>打开指定文件进行读取。如果成功，则可以使用返回文件上的方法进行读取;关联的文件描述符具有O_RDONLY模式。如果有错误，它的类型将是* pathror。</p><h3 id="func-File-Close"><a href="#func-File-Close" class="headerlink" title="func (*File) Close"></a>func (*File) <a href="https://cs.opensource.google/go/go/+/go1.19:src/os/file_posix.go;l=21" target="_blank" rel="noopener">Close</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (f *File) Close() error</span><br></pre></td></tr></table></figure><p>关闭关闭文件，使其无法用于I/O。在支持SetDeadline的文件中，任何等待的I/O操作将被取消，并立即返回ErrClosed错误。如果Close已经被调用，将返回一个错误。</p><h2 id="演示案例-1"><a href="#演示案例-1" class="headerlink" title="演示案例"></a>演示案例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">概念说明: file的叫法</span></span><br><span class="line"><span class="comment">1. file 叫 file 对象</span></span><br><span class="line"><span class="comment">2. file 叫 file 指针</span></span><br><span class="line"><span class="comment">3. file 叫 file 文件句柄</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">file, err := os.Open(<span class="string">"/usr/local/go/src/golang_study/14-File/filedemo/demo.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Open file err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过输出结果可以得知,file就是一个指针</span></span><br><span class="line">fmt.Printf(<span class="string">"file=%v\n"</span>, file)</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">err = file.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Close file err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=&amp;&#123;0xc0000ae120&#125;</span><br></pre></td></tr></table></figure><h2 id="读文件操作应用实例"><a href="#读文件操作应用实例" class="headerlink" title="读文件操作应用实例"></a>读文件操作应用实例</h2><ul><li>读取文件的内容并显示在终端(带缓冲区的方式)</li></ul><blockquote><p>   使用 os.Open, file.Close, bufio.NewReader(), reader.ReadString 函数和方法.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">file, err := os.Open(<span class="string">"/usr/local/go/src/golang_study/14-File/filedemo/demo.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Open file err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当函数退出时, 要及时关闭file</span></span><br><span class="line"><span class="keyword">defer</span> file.Close() <span class="comment">//要及时关闭file句柄, 否则会有内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个 *Reader, 是带缓冲的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const (</span></span><br><span class="line"><span class="comment">defaultBufSize = 4096//默认的缓冲区为 4096</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="comment">//循环的读取文件的内容</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">//读到一个换行就结束</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;                  <span class="comment">//io.EOF 表示文件的末尾</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(str)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件读取结束..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123123</span><br><span class="line">456456</span><br><span class="line">789789</span><br><span class="line">文件读取结束...</span><br></pre></td></tr></table></figure><ul><li>读取文件的内容并显示在终端(使用 ioutil 一次将整个文件读入到内存中)，这种方式<code>适用于文件不大的情况</code>。</li></ul><blockquote><p>   相关方法和函数: ioutil.ReadFile</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用ioutil.ReadFile一次性将文件读取到位</span></span><br><span class="line">file := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo/demo.txt"</span></span><br><span class="line">content, err := ioutil.ReadFile(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"read file err=%v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将读取到的内容显示到终端</span></span><br><span class="line"><span class="comment">//fmt.Println("%v", content)//[]byte</span></span><br><span class="line">fmt.Printf(<span class="string">"%v"</span>, <span class="keyword">string</span>(content)) <span class="comment">//byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们没有显示的Open文件,因此也不需要显示的Close文件</span></span><br><span class="line"><span class="comment">//因为, 文件的Open和Close被封装到 ReadFile 函数内部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123123</span><br><span class="line">456456</span><br><span class="line">789789</span><br></pre></td></tr></table></figure><h2 id="写文件操作应用实例"><a href="#写文件操作应用实例" class="headerlink" title="写文件操作应用实例"></a>写文件操作应用实例</h2><h3 id="func-OpenFile"><a href="#func-OpenFile" class="headerlink" title="func OpenFile"></a>func <a href="https://cs.opensource.google/go/go/+/go1.19:src/os/file.go;l=335" target="_blank" rel="noopener">OpenFile</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func OpenFile(name string, flag int, perm FileMode) (*File, error)</span><br></pre></td></tr></table></figure><p>OpenFile是广义的open调用;大多数用户会使用Open或Create。它打开指定标志(O_RDONLY等)的命名文件。如果文件不存在，并且传递了O_CREATE标志，则使用perm模式(在umask之前)创建它。如果成功，就可以使用返回File上的方法进行I/O操作。如果有错误，它的类型将是* pathror。</p><ul><li>第一个参数: 表示文件的路径</li><li>第二个参数: 选项如下(可组合使用)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (  </span><br><span class="line">    <span class="comment">// O_RDONLY、O_WRONLY或O_RDWR必须指定一个。</span></span><br><span class="line">    O_RDONLY <span class="keyword">int</span> = sycall.O_RDONLY <span class="comment">//只读模式打开文件。</span></span><br><span class="line">    O_WRONLY <span class="keyword">int</span> = sycall.O_WRONLY <span class="comment">//只写模式打开文件</span></span><br><span class="line">    O_RDWR <span class="keyword">int</span> = sycall.O_RDWR <span class="comment">//读写模式打开文件</span></span><br><span class="line">    <span class="comment">//剩下的值可以输入或输入以控制行为。</span></span><br><span class="line">    O_APPEND <span class="keyword">int</span> = sycall.O_APPEND <span class="comment">//写入文件时追加数据。</span></span><br><span class="line">    O_CREATE <span class="keyword">int</span> = sycall.O_CREAT <span class="comment">//如果文件不存在，则创建一个新文件。</span></span><br><span class="line">    O_EXCL   <span class="keyword">int</span> = syscall.O_EXCL <span class="comment">//与 O_CREATE 一起使用，文件必须不存在。</span></span><br><span class="line">    O_SYNC <span class="keyword">int</span> = sycall.O_SYNC <span class="comment">//打开用于同步I/O。</span></span><br><span class="line">    O_TRUNC <span class="keyword">int</span> = sycall.O_TRUNC <span class="comment">//如果可能,打开时清空文件</span></span><br><span class="line">）</span><br></pre></td></tr></table></figure><ul><li>第三个参数: 权限控制(同Linux)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r =&gt; <span class="number">4</span></span><br><span class="line">w =&gt; <span class="number">2</span></span><br><span class="line">x =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="方式一-3"><a href="#方式一-3" class="headerlink" title="方式一"></a>方式一</h3><ul><li>创建一个新文件，写入内容 5 句 “hello, Gardon”</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建一个新文件,写入内容 5句 "hello, Gardon"</span></span><br><span class="line"><span class="comment">//1. 打开文件 /usr/local/go/src/golang_study/14-File/filedemo3/demo.txt</span></span><br><span class="line">filePath := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo3/demo.txt"</span></span><br><span class="line">file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"open file err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//及时关闭file句柄</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//准备写入5句 "hello, Gardon"</span></span><br><span class="line">str := <span class="string">"hello, Gardon\n"</span></span><br><span class="line"><span class="comment">//写入时, 使用带缓存的 *Writer</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为weiter是带缓存, 因此在调用WriterString方法时,</span></span><br><span class="line"><span class="comment">其实内容是先写入到缓存的,所以需要调用Flush方法, </span></span><br><span class="line"><span class="comment">将缓冲的数据真正写入到文件中, 否则文件中会没有数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开一个<code>存在的文件</code>，将原来的内容覆盖成新的内容 10 句 “你好，世界!”</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">filePath := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo3/demo.txt"</span></span><br><span class="line">    <span class="comment">//O_TRUNC //如果可能,打开时清空文件</span></span><br><span class="line">file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_TRUNC, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"open file err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//及时关闭file句柄</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//准备写入10句 "你好,世界"</span></span><br><span class="line">str := <span class="string">"你好,世界\r\n"</span> <span class="comment">//  \r\n 表示换行</span></span><br><span class="line"><span class="comment">//写入时, 使用带缓存的 *Writer</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开一个<code>存在的文件</code>，在原来的内容追加内容 ‘ABC! ENGLISH!’</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开已经存在的文件</span></span><br><span class="line">filePath := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo3/demo.txt"</span></span><br><span class="line">    <span class="comment">//O_APPEND //写入文件时追加数据</span></span><br><span class="line">file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"open file err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//及时关闭file句柄</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"><span class="comment">//准备写入10句 "你好,世界"</span></span><br><span class="line">str := <span class="string">"ABC! ENGLISH!\r\n"</span> <span class="comment">//  \r\n 表示换行</span></span><br><span class="line"><span class="comment">//写入时, 使用带缓存的 *Writer</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开一个<code>存在的文件</code>，将原来的内容读出显示在终端，并且追加 5 句”hello,北京!”</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">filePath := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo3/demo.txt"</span></span><br><span class="line">file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"open file err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//及时关闭file句柄</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//读</span></span><br><span class="line"><span class="comment">//先读取原来的文件内容,并显示在终端</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">'\n'</span>)<span class="comment">//\n在这里表示 reader 读到哪里结束</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示到终端</span></span><br><span class="line">fmt.Print(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="comment">//准备写入10句 "hello,北京!"</span></span><br><span class="line">str := <span class="string">"hello,北京!\r\n"</span> <span class="comment">//  \r\n 表示换行</span></span><br><span class="line"><span class="comment">//写入时, 使用带缓存的 *Writer</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(str)</span><br><span class="line">&#125;</span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二-3"><a href="#方式二-3" class="headerlink" title="方式二"></a>方式二</h3><ul><li>编程一个程序，将一个文件的内容，写入到另外一个文件。</li><li>注:这两个文件已经存在了</li></ul><blockquote><p>   <strong>说明:</strong> 使用 ioutil.ReadFile / ioutil.WriteFile 完成写文件的任务.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//将a.txt文件内容导入到b.txt</span></span><br><span class="line"><span class="comment">//1. 首先将 a.txt 内容读取到内存</span></span><br><span class="line"><span class="comment">//2. 将读取到的内容写入 b.txt(如果b.txt文件存在, 则直接覆盖)</span></span><br><span class="line">file1Path := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo5/main/a.txt"</span></span><br><span class="line">file2Path := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo5/main/b.txt"</span></span><br><span class="line"></span><br><span class="line">data, err := ioutil.ReadFile(file1Path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//说明读取文件有错误</span></span><br><span class="line">fmt.Printf(<span class="string">"read file err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(file2Path, data, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"write file error=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h2><p>golang判断<code>文件</code>或<code>文件夹</code>是否存在的方法为 <code>os.Stat()</code> 函数返回的错误值进行判断:</p><ol><li>如果返回的错误为nil, 说明文件或文件夹存在</li><li>如果返回的错误类型使用 os.IsNotExist() 判断为true, 说明文件或文件夹不存在</li><li>如果返回的错误为其他类型,则不确定是否存在</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PathExists</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">    _, err := os.Stat(path)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;<span class="comment">//文件或者目录存在</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件编程应用实例"><a href="#文件编程应用实例" class="headerlink" title="文件编程应用实例"></a>文件编程应用实例</h2><h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><p>说明: 将一个文件拷贝到另外一个文件</p><p>所需函数: <code>func Copy(dst Writer, src Reader) (written int64, err error)</code></p><p>注意: Copy 函数是 <code>io</code> 包提供的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自己编写一个函数, 接收两个文件的路径 (srcFileName, dstFileName)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyFile</span><span class="params">(dstFileName <span class="keyword">string</span>, srcFileName <span class="keyword">string</span>)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line">srcFile, err := os.Open(srcFileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"open file err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> srcFile.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过srcfile, 获取到 Reader</span></span><br><span class="line">reader := bufio.NewReader(srcFile)</span><br><span class="line"></span><br><span class="line"><span class="comment">//先创建目标文件, 打开 dstFileName</span></span><br><span class="line">dstFile, err := os.OpenFile(dstFileName, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"open file err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过dstFile, 获取到 Writer,将原文件的内容写入到目标文件中</span></span><br><span class="line">writer := bufio.NewWriter(dstFile)</span><br><span class="line"><span class="keyword">defer</span> dstFile.Close()</span><br><span class="line"><span class="keyword">return</span> io.Copy(writer, reader)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//将 a.txt 文件拷贝到 b.txt</span></span><br><span class="line"><span class="comment">//调用CopyFile 完成文件拷贝</span></span><br><span class="line">srcFile := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo6/main/a.txt"</span></span><br><span class="line">dstFile := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo6/main/b.txt"</span></span><br><span class="line">_, err := CopyFile(dstFile, srcFile)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"拷贝完成\n"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"拷贝错误 err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计英文、数字、空格和其他字符数量"><a href="#统计英文、数字、空格和其他字符数量" class="headerlink" title="统计英文、数字、空格和其他字符数量"></a>统计英文、数字、空格和其他字符数量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体, 用于保存统计结果</span></span><br><span class="line"><span class="keyword">type</span> CharCount <span class="keyword">struct</span> &#123;</span><br><span class="line">ChCount    <span class="keyword">int</span> <span class="comment">//记录英文个数</span></span><br><span class="line">NumCount   <span class="keyword">int</span> <span class="comment">//记录数字的个数</span></span><br><span class="line">SpaceCount <span class="keyword">int</span> <span class="comment">//记录空格的个数</span></span><br><span class="line">OtherCount <span class="keyword">int</span> <span class="comment">//记录其他字符的个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//思路: 打开一个文件,创建一个 Reader</span></span><br><span class="line"><span class="comment">//每读取一行, 就去统计该行有多少个 英文 数字 空格 和 其他字符</span></span><br><span class="line"><span class="comment">//然后将结果保存到一个结构体</span></span><br><span class="line">fileName := <span class="string">"/usr/local/go/src/golang_study/14-File/filedemo7/main/char.txt"</span></span><br><span class="line">file, err := os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"open file err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义个 CharCount 实例</span></span><br><span class="line"><span class="keyword">var</span> count CharCount</span><br><span class="line"><span class="comment">//创建一个 Reader</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始循环的读取 fileName 的内容</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了兼容中文字符, 可以将 str 转成 []rune</span></span><br><span class="line">str1 := []<span class="keyword">rune</span>(str)</span><br><span class="line"><span class="comment">//遍历 str, 进行统计</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> str1 &#123;</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">'a'</span> &amp;&amp; v &lt;= <span class="string">'z'</span>:</span><br><span class="line"><span class="keyword">fallthrough</span> <span class="comment">//穿透</span></span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">'A'</span> &amp;&amp; v &lt;= <span class="string">'Z'</span>:</span><br><span class="line">count.ChCount++</span><br><span class="line"><span class="keyword">case</span> v == <span class="string">' '</span> || v == <span class="string">'\t'</span>:</span><br><span class="line">count.SpaceCount++</span><br><span class="line"><span class="keyword">case</span> v &gt;= <span class="string">'0'</span> &amp;&amp; v &lt;= <span class="string">'9'</span>:</span><br><span class="line">count.NumCount++</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">count.OtherCount++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出统计的结果</span></span><br><span class="line">fmt.Printf(<span class="string">"字符的个数=%v, 数字的个数=%v, 空格的个数=%v, 其他字符个数=%v\n"</span>, count.ChCount, count.NumCount, count.SpaceCount, count.OtherCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><blockquote><p>  os.Args 是一个 string 的切片，用来存储所有的命令行参数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"命令行的参数有"</span>, <span class="built_in">len</span>(os.Args))</span><br><span class="line"><span class="comment">//遍历os.Args切片,就可以得到所有的命令行输入参数值</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> os.Args &#123;</span><br><span class="line">fmt.Printf(<span class="string">"args[%v]=%v\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fag9q0uej20hn021q33.jpg" alt="image-20220822093121250"></p><h3 id="flag-包用来解析命令行参数"><a href="#flag-包用来解析命令行参数" class="headerlink" title="flag 包用来解析命令行参数"></a>flag 包用来解析命令行参数</h3><blockquote><p>  说明: 前面的方式是比较原生的方式，对解析参数不是特别的方便，特别是带有指定参数形式的命令行。</p><p>  比如: cmd&gt;main.exe -f a.txt -p 200 -u root 这样的形式命令行，go 设计者给我们提供了 flag 包，可以方便的解析命令行参数，而且参数顺序可以随意</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义几个变量,用于接收命令行的参数值</span></span><br><span class="line"><span class="keyword">var</span> user <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> pwd <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> host <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> port <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;user 就是接收用户命令中输入的 -u 后面的参数值</span></span><br><span class="line"><span class="comment">//"u" 就是 -u 指定参数</span></span><br><span class="line"><span class="comment">//"" 默认值</span></span><br><span class="line"><span class="comment">//"用户名,默认为空" 说明</span></span><br><span class="line">flag.StringVar(&amp;user, <span class="string">"u"</span>, <span class="string">""</span>, <span class="string">"用户名,默认为空"</span>)</span><br><span class="line">flag.StringVar(&amp;pwd, <span class="string">"pwd"</span>, <span class="string">""</span>, <span class="string">"密码,默认为空"</span>)</span><br><span class="line">flag.StringVar(&amp;host, <span class="string">"h"</span>, <span class="string">"localhost"</span>, <span class="string">"主机名, 默认为localhost"</span>)</span><br><span class="line">flag.IntVar(&amp;port, <span class="string">"port"</span>, <span class="number">3306</span>, <span class="string">"端口号,默认为3306"</span>)</span><br><span class="line"><span class="comment">//这里有一个非常重要的操作, 转换, 必须调用该方法</span></span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">fmt.Printf(<span class="string">"user=%v pwd=%v host=%v port=%v\n"</span>, user, pwd, host, port)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fb2ixbl4j20eg00tweg.jpg" alt="image-20220822095246719"></p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><h3 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p>  JSON易于机器解析和生成,并有效的提升网络传输效率,通常程序在网络传输时,会先将数据(结构体/map等)序列化成json字符串,到接收方得到json字符串时,在反序列化恢复成原来的数据类型(结构体/map等)</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fbam9tnfj218h0gljum.jpg" alt="image-20220822100033091"></p><h3 id="json数据格式说明"><a href="#json数据格式说明" class="headerlink" title="json数据格式说明"></a>json数据格式说明</h3><blockquote><p>  在json语言中,一切都是对象.因此,任何的数据类型都可以通过json来表示,例如字符串,数字,对象,数组,map,结构体等</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"key1"</span>:val1, <span class="attr">"key2"</span>:val2&#125;,&#123;<span class="attr">"key1"</span>:val1, <span class="attr">"key2"</span>:val2, <span class="attr">"key3"</span>:[val3, val4]&#125;]</span><br></pre></td></tr></table></figure><h3 id="json的序列化"><a href="#json的序列化" class="headerlink" title="json的序列化"></a>json的序列化</h3><blockquote><p>  json 序列化是指，将有 key-value 结构的数据类型(比如结构体、map、切片)序列化成 json 字符串的操作。</p></blockquote><ul><li>应用案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="keyword">string</span></span><br><span class="line">Age      <span class="keyword">int</span></span><br><span class="line">Birthday <span class="keyword">string</span></span><br><span class="line">Sal      <span class="keyword">float64</span></span><br><span class="line">Skill    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//演示</span></span><br><span class="line">monster := Monster&#123;</span><br><span class="line">Name:     <span class="string">"牛魔王"</span>,</span><br><span class="line">Age:      <span class="number">500</span>,</span><br><span class="line">Birthday: <span class="string">"2022-08-23"</span>,</span><br><span class="line">Sal:      <span class="number">8000.0</span>,</span><br><span class="line">Skill:    <span class="string">"牛魔拳"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 monster 序列化</span></span><br><span class="line">data, err := json.Marshal(&amp;monster)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"序列号错误 err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">"monster 序列化后=%v\n"</span>, <span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 map 进行序列化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testMap</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义一个map</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//使用 map,需要 make</span></span><br><span class="line">a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">a[<span class="string">"name"</span>] = <span class="string">"红孩儿"</span></span><br><span class="line">a[<span class="string">"age"</span>] = <span class="number">30</span></span><br><span class="line">a[<span class="string">"address"</span>] = <span class="string">"洪崖洞"</span></span><br><span class="line"><span class="comment">//将 a 这个map进行序列化</span></span><br><span class="line"><span class="comment">//将 monster 序列化</span></span><br><span class="line">data, err := json.Marshal(a)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"序列化错误 err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">"a map 序列化后=%v\n"</span>, <span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示对切片进行序列化,我们这个切片 []map[string]interface&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testSlice</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//使用 map 前, 需要先 make</span></span><br><span class="line">m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m1[<span class="string">"name"</span>] = <span class="string">"jack"</span></span><br><span class="line">m1[<span class="string">"age"</span>] = <span class="string">"7"</span></span><br><span class="line">m1[<span class="string">"address"</span>] = <span class="string">"北京"</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, m1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m2 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//使用 map 前, 需要先 make</span></span><br><span class="line">m2 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m2[<span class="string">"name"</span>] = <span class="string">"tom"</span></span><br><span class="line">m2[<span class="string">"age"</span>] = <span class="string">"20"</span></span><br><span class="line">m2[<span class="string">"address"</span>] = [<span class="number">2</span>]<span class="keyword">string</span>&#123;<span class="string">"墨西哥"</span>, <span class="string">"夏威夷"</span>&#125;</span><br><span class="line">slice = <span class="built_in">append</span>(slice, m2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将切片进行序列化操作</span></span><br><span class="line">data, err := json.Marshal(slice)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"序列化错误 err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">"slice 序列化后=%v\n"</span>, <span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对基本数据类型序列化, 对基本数据类型进行序列化意义不大</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFloat64</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num1 <span class="keyword">float64</span> = <span class="number">2345.67</span></span><br><span class="line"><span class="comment">//对 num1 进行序列化</span></span><br><span class="line">data, err := json.Marshal(num1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"序列化错误 err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出序列化后的结果</span></span><br><span class="line">fmt.Printf(<span class="string">"num1 序列化后=%v\n"</span>, <span class="keyword">string</span>(data))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//演示将结构体,map,切片进行序列号</span></span><br><span class="line">testStruct()</span><br><span class="line">testMap()</span><br><span class="line">testSlice()   <span class="comment">//演示对切片的序列化</span></span><br><span class="line">testFloat64() <span class="comment">//演示对基本数据类型的序列化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fdyiq40dj20mp01v3yu.jpg" alt="image-20220822113243892"></p><ul><li>注意事项</li></ul><blockquote><p>  对于结构体的序列化，如果我们希望序列化后的 key 的名字，又我们自己重新制定，那么可以给 struct 指定一个 tag 标签.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="keyword">string</span> <span class="string">`json:"monster_name"`</span></span><br><span class="line">Age      <span class="keyword">int</span><span class="string">`json:"monster_age"`</span></span><br><span class="line">Birthday <span class="keyword">string</span></span><br><span class="line">Sal      <span class="keyword">float64</span></span><br><span class="line">Skill    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json的反序列化"><a href="#json的反序列化" class="headerlink" title="json的反序列化"></a>json的反序列化</h3><blockquote><p>  json 反序列化是指，将 json 字符串反序列化成对应的数据类型(比如结构体、map、切片)的操作</p></blockquote><ul><li>应用案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="keyword">string</span></span><br><span class="line">Age      <span class="keyword">int</span></span><br><span class="line">Birthday <span class="keyword">string</span></span><br><span class="line">Sal      <span class="keyword">float64</span></span><br><span class="line">Skill    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将json字符串,反序列化为 struct</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalStruct</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//说明: str 在项目开发中,是通过网络传输获取到..或者是读取到文件获取到</span></span><br><span class="line">str := <span class="string">"&#123;\"Name\":\"牛魔王\", \"Age\":500, \"Birthday\":\"2022-08-23\", \"Sal\":8000, \"Skill\":\"牛魔拳\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Monster实例</span></span><br><span class="line"><span class="keyword">var</span> monster Monster</span><br><span class="line">err := json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;monster)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"unmarshal err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"反序列化后 monster=%v monster.Name=%v\n"</span>, monster, monster.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将json字符串,反序列化成 map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"&#123;\"address\":\"洪崖洞\", \"age\":30, \"name\":\"红孩儿\"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line"><span class="comment">//注意: 反序列化 map, 不需要make, 因为 make 操作被封装到 Unmarshal 函数</span></span><br><span class="line">err := json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;a)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"unmarshal err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"反序列化后 a=%v\n"</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示将 json 字符串, 反序列化成切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshalSlice</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"[&#123;\"address\":\"北京\", \"age\":\"7\", \"name\":\"jack\"&#125;,"</span> + <span class="string">" &#123;\"address\":[\"墨西哥\", \"夏威夷\"], \"age\":\"20\", \"name\":\"tom\"&#125;]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个slice</span></span><br><span class="line"><span class="keyword">var</span> slice []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">//反序列化, 不需要 make, 因为 make 操作被封装到 Unmarshal 函数</span></span><br><span class="line">err := json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;slice)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"unmarshal err=%v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"反序列化后 slice=%v\n"</span>, slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">unmarshalStruct()</span><br><span class="line">unmarshalMap()</span><br><span class="line">unmarshalSlice()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fhq4c94gj20jd01lt8y.jpg" alt="image-20220822134302705"></p><p>对上面代码的说明<br>1) 在反序列化一个json字符串时，要确保<code>反序列化</code>后的数据类型和<code>原来序列化</code>前的数据类型一致。<br>1) 如果 json 字符串是通过程序获取到的，则不需要再对 <code>&quot;</code> 转义处理。</p><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><blockquote><p>  在工作中,我们经常会确认一个函数或模块的执行结果是否正确</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><blockquote><p>  在 main 函数中，调用 addUpper 函数，看看实际输出的结果是否和预期的结果一致，如果一致，则说明函数正确，否则函数有错误，然后修改错误</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUpper</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := addUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">55</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"addUpper错误 返回值=%v 期望值=%v\n"</span>, res, <span class="number">55</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"addUpper正确 返回值=%v 期望值=%v\n"</span>, res, <span class="number">55</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fijxkxerj20e9016t8o.jpg" alt="image-20220822141141425"></p><h2 id="传统方式的缺点"><a href="#传统方式的缺点" class="headerlink" title="传统方式的缺点"></a>传统方式的缺点</h2><ul><li>不方便, 我们需要在 main 函数中去调用，这样就需要去修改 main 函数，如果现在项目正在运行，就可能去停止项目</li><li>不利于管理，因为当我们测试多个函数或者多个模块时，都需要写在 main 函数，不利于我们管理和清晰我们思路</li><li>引出单元测试。=&gt; testing 测试框架可以很好解决问题。</li></ul><h2 id="单元测试基本介绍"><a href="#单元测试基本介绍" class="headerlink" title="单元测试基本介绍"></a>单元测试基本介绍</h2><blockquote><p>  Go 语言中自带有一个轻量级的测试框架 testing 和自带的 go test 命令来实现单元测试和性能测试，testing 框架和其他语言中的测试框架类似，可以基于这个框架写针对相应函数的测试用例，也可以基于该框架写相应的压力测试用例。通过单元测试，可以解决如下问题:</p><ul><li>确保每个函数是可运行，并且运行结果是正确的</li><li>确保写出来的代码性能是好的</li><li>单元测试能及时的发现程序设计或实现的逻辑错误，使问题及早暴露，便于问题的定位解决，而性能测试的重点在于发现程序设计上的一些问题，让程序能够在高并发的情况下还能保持稳定</li></ul></blockquote><h2 id="快速入门-8"><a href="#快速入门-8" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>文件目录结构</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fl869xwsj206y01qt8i.jpg" alt="image-20220822154411867"></p><ul><li>utils/cal.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUpper</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>utils/cal_test.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAddUpper</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">res := AddUpper(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">55</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf("AddUpper(10) 执行错误, 期望值=%v 实际值=%v\n", 55, res)</span></span><br><span class="line">t.Fatalf(<span class="string">"AddUpper(10) 执行错误, 期望值=%v 实际值=%v\n"</span>, <span class="number">55</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果正确,记录日志</span></span><br><span class="line">t.Logf(<span class="string">"AddUpper(10) 执行正确"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fl9sqtp1j20fc02f74g.jpg" alt="image-20220822154545558"></p><ul><li>运行原理</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5flmc7p7fj20ru07jdgk.jpg" alt="image-20220822155748554"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>1)   测试用例文件名必须以 _test.go 结尾。 比如 <code>cal_test.go</code> , <code>cal</code> 不是固定的。<br>2)   测试用例函数必须以 Test 开头，一般来说就是 <code>Test+被测试的函数名</code>，比如 TestAddUpper<br>3)   TestAddUpper(t <em>tesing.T) 的形参类型必须是 `</em>testing.T`,可以参考: <a href="https://pkg.go.dev/testing#T" target="_blank" rel="noopener">手册(需要科学上网)</a><br>4)   一个测试用例文件中，可以有多个测试用例函数，比如 TestAddUpper、TestSub<br>5)   运行测试用例指令</p><ul><li><p>cmd&gt; <code>go test</code> [<strong>如果运行正确，无日志，错误时，会输出日志</strong>] </p></li><li><p>cmd&gt; <code>go test -v</code> [<strong>运行正确或是错误，都输出日志</strong>]</p></li></ul><ol start="6"><li>当出现错误时，可以使用 <code>t.Fatalf</code> 来格式化输出错误信息，并退出程序</li><li><code>t.Logf</code> 方法可以输出相应的日志</li><li>测试用例函数，并没有放在 main 函数中，也执行了，这就是测试用例的方便之处[原理图参考上面的图片]</li><li><code>PASS</code> 表示测试用例运行<code>成功</code>，<code>FAIL</code> 表示测试用例运行<code>失败</code></li><li>测试单个文件，一定要带上被测试的原文件</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test -v cal_test.<span class="keyword">go</span> cal.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>11) 测试单个方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test -v -test.run TestAddUpper</span><br></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fn5jq7syj205t01tjr7.jpg" alt="image-20220822165051757"></p><ul><li>monster/monster.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> monster</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Age   <span class="keyword">int</span></span><br><span class="line">Skill <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 Monster 绑定方法 Store, 可以将一个 Monster 变量(对象), 序列化后保存到文件中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span> <span class="title">Store</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">//先序列化</span></span><br><span class="line">data, err := json.Marshal(m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存到文件</span></span><br><span class="line">filePath := <span class="string">"/usr/local/go/src/golang_study/15-test/testdemo2/monster.ser"</span></span><br><span class="line">err = ioutil.WriteFile(filePath, data, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"write file err="</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给 Monster 绑定方法 ReStore, 可以将一个序列化的 Monster, 从文件中读取</span></span><br><span class="line"><span class="comment">//并反序列化为 Monster 对象, 检查反序列化, 名字正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span> <span class="title">ReStore</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">//1.先从文件中,读取序列化的字符串</span></span><br><span class="line">filePath := <span class="string">"/usr/local/go/src/golang_study/15-test/testdemo2/monster.ser"</span></span><br><span class="line">data, err := ioutil.ReadFile(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ReadFile err="</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用读取到 data []byte, 对反序列化</span></span><br><span class="line">err = json.Unmarshal(data, m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Unmarshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>monster/monster_test.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> monster</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试用例, 测试 Store 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//先创建一个 Monster 实例</span></span><br><span class="line">monster := &amp;Monster&#123;</span><br><span class="line">Name:  <span class="string">"红孩儿"</span>,</span><br><span class="line">Age:   <span class="number">10</span>,</span><br><span class="line">Skill: <span class="string">"吐火~"</span>,</span><br><span class="line">&#125;</span><br><span class="line">res := monster.Store()</span><br><span class="line"><span class="keyword">if</span> !res &#123;</span><br><span class="line">t.Fatalf(<span class="string">"monster.Store() 错误, 希望为=%v 实际为=%v"</span>, <span class="literal">true</span>, res)</span><br><span class="line">&#125;</span><br><span class="line">t.Logf(<span class="string">"monster.Store() 测试成功!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">//先创建一个 Monster 实例, 不需要指定字段的值</span></span><br><span class="line"><span class="keyword">var</span> monster = &amp;Monster&#123;&#125;</span><br><span class="line">res := monster.ReStore()</span><br><span class="line"><span class="keyword">if</span> !res &#123;</span><br><span class="line">t.Fatalf(<span class="string">"monster.ReStore() 错误, 希望为=%v 实际为%v"</span>, <span class="literal">true</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进一步判断</span></span><br><span class="line"><span class="keyword">if</span> monster.Name != <span class="string">"红孩儿"</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"monster.ReStore() 错误, 希望为=%v 实际为=%v"</span>, <span class="string">"红孩儿"</span>, monster.Name)</span><br><span class="line">&#125;</span><br><span class="line">t.Logf(<span class="string">"monster.ReStore() 测试成功!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fn7z8687j20e203jt90.jpg" alt="image-20220822165312506"></p><p>执行后会在指定位置生成<code>monster.ser</code>文件</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fn8kr8yhj207w02hq2t.jpg" alt="image-20220822165346821"></p><p>文件内容如下</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fn9foyogj20gy02i3yh.jpg" alt="image-20220822165436440"></p><h1 id="goroutine-和-channel"><a href="#goroutine-和-channel" class="headerlink" title="goroutine 和 channel"></a>goroutine 和 channel</h1><h2 id="goroutine-协程"><a href="#goroutine-协程" class="headerlink" title="goroutine(协程)"></a>goroutine(协程)</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul><li>进程就是程序在操作系统中的一次执行过程, 是系统进行资源分配和调度的基本单位</li><li>线程是进程的一个执行实例, 是程序执行的基本单位</li><li>一个进程可以任意创建和销毁多个线程,同一个进程中的多个线程可以并发执行</li><li>一个程序至少有一个进程,一个进程至少有一个线程</li></ul><h3 id="程序、进程和线程的关系"><a href="#程序、进程和线程的关系" class="headerlink" title="程序、进程和线程的关系"></a>程序、进程和线程的关系</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">程序 =&gt;  进程<span class="number">1</span> =&gt; &#123;线程<span class="number">1</span>, 线程<span class="number">2.</span>..&#125;</span><br><span class="line">        进程<span class="number">2</span> =&gt; &#123;线程<span class="number">1</span>, 线程<span class="number">2.</span>..&#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><ul><li>多线程程序在单核上运行,就是<code>并发</code></li><li>多线程程序在多核上运行,就是<code>并行</code></li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5gitp6oxhj20pc0jwwg5.jpg" alt="image-20220823110638774"></p><h3 id="Go协程与Go主线程"><a href="#Go协程与Go主线程" class="headerlink" title="Go协程与Go主线程"></a>Go协程与Go主线程</h3><ul><li><p>Go 主线程(有程序员直接称为线程/也可以理解成进程): 一个 Go 线程上，可以起多个协程，你可以这样理解，协程是轻量级的线程[编译器做优化]。</p></li><li><p>Go协程的特点</p></li></ul><p>1) 有独立的栈空间<br>2) 共享程序堆空间<br>3) 调度由用户控制<br>4) 协程是轻量级的线程</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5gj9qierpj20ni060dg1.jpg" alt="image-20220823112203518"></p><h3 id="goroutine快速入门"><a href="#goroutine快速入门" class="headerlink" title="goroutine快速入门"></a>goroutine快速入门</h3><blockquote><p>  请编写一个程序，完成如下功能:<br>  1) 在主线程(可以理解成进程)中，开启一个 goroutine, 该协程每隔 1 秒输出 “hello,world”<br>  2) 在主线程中也每隔一秒输出”hello,golang”, 输出 10 次后，退出程序<br>  3) 要求主线程和 goroutine 同时执行.<br>  4) 画出主线程和协程执行流程图</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"test() hello world "</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> test() <span class="comment">//开启一个协程</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"main() hello golang"</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code> 主线程和 <code>test</code> 协程同时执行</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5gmhcwhj3j20du08ijry.jpg" alt="image-20220823131311170"></p><p>执行流程图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5gmxkse2pj20mb0h2ta7.jpg" alt="image-20220823132846539"></p><ul><li>小结</li></ul><p>1) 主线程是一个物理线程，直接作用在 cpu 上的。是重量级的，非常耗费 cpu 资源。<br>2) 协程从主线程开启的，是轻量级的线程，是逻辑态。对资源消耗相对小。<br>3) Golang的协程机制是重要的特点，可以轻松的<strong>开启上万个协程</strong>。其它编程语言的并发机制是一般基于线程的，开启过多的线程，资源耗费大，这里就突显 Golang 在并发上的优势了</p><h3 id="goroutine的调度模型"><a href="#goroutine的调度模型" class="headerlink" title="goroutine的调度模型"></a>goroutine的调度模型</h3><h4 id="MPG-模式-状态一"><a href="#MPG-模式-状态一" class="headerlink" title="MPG 模式-状态一"></a>MPG 模式-状态一</h4><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5hpwgtvjjj20z60g375j.jpg" alt="image-20220824115702034"></p><ol><li>当前程序有<strong>三个M</strong>,如果<strong>三个M</strong>都在一个CPU运行,就是<code>并发</code>,如果在不同的CPU运行就是<code>并行</code></li><li><strong>M1,M2,M3</strong>正在执行一个<strong>G</strong>,<strong>M1</strong>的协程队列有<strong>三个</strong>,<strong>M2</strong>的协程队列有<strong>三个</strong>,<strong>M3</strong>协程队列有<strong>两个</strong></li><li>从上图可以看到: Go的协程是<code>轻量级的线程</code>,是逻辑态的,Go可以容易的起<code>上万</code>个协程</li><li>其他程序c/java的多线程,往往是内核态的,比较重量级,<code>千个</code>线程可能耗光CPU</li></ol><h4 id="MPG模式-状态二"><a href="#MPG模式-状态二" class="headerlink" title="MPG模式-状态二"></a>MPG模式-状态二</h4><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5htca9ofbj20uy0g8dgq.jpg" alt="image-20220824135604314"></p><ol><li>分成两个部分来看</li><li>原来的情况是 M0 主线程正在执行G0协程,另外有三个协程在队列等待</li><li>如果G0协程阻塞,比如读取文件或者数据库等</li><li>这时就会创建M1主线程(也可能是从已有的线程池中取出M1),并且将等待的3个协程挂到M1下开始执行,M0的主线程下的G0仍然执行文件io的读写</li><li>这样的MPG调度模式,可以既让G0执行,同时也不会让队列的其他协程一直阻塞,仍然可以并发/并行执行</li><li>等到G0不阻塞了,M0会被放到空闲的主线程继续执行(从已有的线程池中取),同时G0又会被唤醒</li></ol><h3 id="设置golang运行的CPU数量"><a href="#设置golang运行的CPU数量" class="headerlink" title="设置golang运行的CPU数量"></a>设置golang运行的CPU数量</h3><blockquote><p>  为了充分了利用多 cpu 的优势，在 Golang 程序中，设置运行的 cpu 数目</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//获取当前系统CPU的数量</span></span><br><span class="line">num := runtime.NumCPU()</span><br><span class="line"><span class="comment">//设置num-1的cpu运行go程序</span></span><br><span class="line">runtime.GOMAXPROCS(num)</span><br><span class="line">fmt.Println(<span class="string">"num="</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5htny9vskj20dt01igln.jpg" alt="image-20220824140716803"></p><ol><li><strong>go1.8后:</strong> 默认让程序运行在多个核上,可以不用设置了</li><li><strong>go1.8前:</strong> 还是要设置一下,可以更高效的利用CPU</li></ol><h2 id="channel-管道"><a href="#channel-管道" class="headerlink" title="channel(管道)"></a>channel(管道)</h2><ul><li>先看一个需求</li></ul><blockquote><p>  需求: 现在要计算 1-200 的各个数的阶乘,并且把各个数的阶乘放入到 map 中, 最后显示出来, 要求使用 toroutine 完成</p><pre><code>*思路:**1.编写一个函数, 来计算各个数的阶乘,放入到 map 中**2.我们启动的协程多个,统计的将结果放入到 map 中**3.map 应该做出一个全局的*</code></pre></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求: 现在要计算 1-200 的各个数的阶乘,并且把各个数的阶乘放入到 map 中</span></span><br><span class="line"><span class="comment">//最后显示出来, 要求使用 toroutine 完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.编写一个函数, 来计算各个数的阶乘,放入到 map 中</span></span><br><span class="line"><span class="comment">2.我们启动的协程多个,统计的将结果放入到 map 中</span></span><br><span class="line"><span class="comment">3.map 应该做出一个全局的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">myMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// test 函数就是计算n!, 让将这个结果放入到 myMap</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里将 res 放入到 myMap</span></span><br><span class="line">myMap[n] = res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 开启多个协程完成这个任务</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">200</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> test(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠5秒钟(第二个问题)</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">"map[%d]=%d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时运行会报错</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5hvbrkft2j20ol053dgq.jpg" alt="image-20220824150446308"></p><p>报错的原因是<code>资源竞争</code>,因为我的笔记本电脑只有<code>8</code>个CPU,当200个协程同时进行写操作时,就会出现这个问题</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5hwgydwbuj20o709eq3g.jpg" alt="image-20220824154421473"></p><h3 id="不同-goroutine-之间如何通讯"><a href="#不同-goroutine-之间如何通讯" class="headerlink" title="不同 goroutine 之间如何通讯"></a>不同 goroutine 之间如何通讯</h3><ul><li>全局变量的互斥锁</li><li>使用管道 channel 来解决</li></ul><h3 id="全局变量加锁同步"><a href="#全局变量加锁同步" class="headerlink" title="全局变量加锁同步"></a>全局变量加锁同步</h3><ul><li><p>因为没有对全局变量 m <code>加锁</code>，因此会出现<code>资源争夺</code>问题，代码会出现错误，提示 <code>concurrent map writes</code></p></li><li><p>解决方案: 加入互斥锁</p></li><li><p>我们的数的阶乘很大，结果会越界,可以将求阶乘改成 <code>sum += uint64(i)</code></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求: 现在要计算 1-200 的各个数的阶乘,并且把各个数的阶乘放入到 map 中</span></span><br><span class="line"><span class="comment">//最后显示出来, 要求使用 toroutine 完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">1.编写一个函数, 来计算各个数的阶乘,放入到 map 中</span></span><br><span class="line"><span class="comment">2.我们启动的协程多个,统计的将结果放入到 map 中</span></span><br><span class="line"><span class="comment">3.map 应该做出一个全局的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">myMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">声明一个全局的互斥锁</span></span><br><span class="line"><span class="comment">lock 是一个全局的互斥锁</span></span><br><span class="line"><span class="comment">sync 是包: synchornized 同步</span></span><br><span class="line"><span class="comment">Mutex: 是互斥</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">lock sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// test 函数就是计算n!, 让将这个结果放入到 myMap</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里将 res 放入到 myMap</span></span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">lock.Lock()</span><br><span class="line">myMap[n] = res</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 开启多个协程完成这个任务</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">200</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> test(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠5秒钟(第二个问题)</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">fmt.Printf(<span class="string">"map[%d]=%d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5hx16xf6ij20e205iq38.jpg" alt="image-20220824160348389"></p><p>此时会发现,阶乘的结果会有<code>0</code>和<code>负数</code></p><p>因为我们给定的<code>200</code>太大了,会越界,改小一些即可</p><h3 id="channel的意义"><a href="#channel的意义" class="headerlink" title="channel的意义"></a>channel的意义</h3><ol><li><p>前面使用全局变量加锁同步来解决 goroutine 的通讯，但不完美</p></li><li><p>主线程在等待所有 goroutine 全部完成的时间<code>很难确定</code>，我们这里设置 10 秒，仅仅是估算。 </p></li><li><p>如果主线程休眠时间长了，会加长等待时间，如果等待时间短了，可能还有 goroutine 处于工作状态，这时也会随主线程的退出而销毁</p></li><li><p>通过全局变量加锁同步来实现通讯，也并不利用多个协程对全局变量的读写操作。 </p></li><li><p>上面种种分析都在呼唤一个新的通讯机制: <code>channel</code></p></li></ol><h3 id="channel的基本介绍"><a href="#channel的基本介绍" class="headerlink" title="channel的基本介绍"></a>channel的基本介绍</h3><ol><li><p>channle 本质就是一个数据结构-队列</p></li><li><p>数据是<code>先进先出</code>【FIFO : first in first out】</p></li><li><p>线程安全，多 goroutine 访问时，不需要加锁，就是说 channel 本身就是线程安全的</p></li><li><p>channel 有类型的，一个 string 的 channel 只能存放 string 类型数据。</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5hy365oq1j20pz07et9i.jpg" alt="image-20220824164017967"></p><h3 id="channel的声明"><a href="#channel的声明" class="headerlink" title="channel的声明"></a>channel的声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="keyword">int</span> (intChan 用于存放 <span class="keyword">int</span> 数据)</span><br><span class="line"><span class="keyword">var</span> mapChan <span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> (mapChan 用于存放 <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> 类型) </span><br><span class="line"><span class="keyword">var</span> perChan <span class="keyword">chan</span> Person</span><br><span class="line"><span class="keyword">var</span> perChan2 <span class="keyword">chan</span> *Person</span><br></pre></td></tr></table></figure><blockquote><p>  channel 是<code>引用类型</code></p><p>  channel 必须初始化才能写入数据, 即 <code>make 后才能使用</code></p><p>  <code>管道是有类型的</code>，intChan 只能写入 整数 int</p></blockquote><h3 id="channel应用案例"><a href="#channel应用案例" class="headerlink" title="channel应用案例"></a>channel应用案例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//演示一下管道的使用</span></span><br><span class="line"><span class="comment">//1. 创建一个可以存放 3 个 int 类型的管道</span></span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 看看 intChan 是什么</span></span><br><span class="line">fmt.Printf(<span class="string">"intChan 的值=%v intChan 本身的地址=%p\n"</span>, intChan, &amp;intChan)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 向管道写入数据</span></span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">num := <span class="number">211</span></span><br><span class="line">intChan &lt;- num</span><br><span class="line">intChan &lt;- <span class="number">50</span></span><br><span class="line"><span class="comment">//intChan &lt;- 98//注意点, 当我们给管道写入数据时,不能超过其容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 看看管道的长度和cap(容量)</span></span><br><span class="line">fmt.Printf(<span class="string">"channel len=%v cap=%v \n"</span>, <span class="built_in">len</span>(intChan), <span class="built_in">cap</span>(intChan))</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 从管道中读取数据</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="keyword">int</span></span><br><span class="line">num2 = &lt;-intChan</span><br><span class="line">fmt.Println(<span class="string">"num2="</span>, num2)<span class="comment">//先进先出,所以是10</span></span><br><span class="line">fmt.Printf(<span class="string">"channel len=%v cap=%v \n"</span>, <span class="built_in">len</span>(intChan), <span class="built_in">cap</span>(intChan)) <span class="comment">//2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 在没有使用协程的情况下, 如果我们的管道数据已经全部取出,再取就会报告 deadlock</span></span><br><span class="line">num3 := &lt;-intChan</span><br><span class="line">num4 := &lt;-intChan</span><br><span class="line">num5 := &lt;-intChan</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"num3="</span>, num3, <span class="string">"num4="</span>, num4, <span class="string">"num5="</span>, num5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5hysft9otj20f8047glx.jpg" alt="image-20220824170435168"></p><p>当我们从intChan取出第一个数据时, intChan的长度就 -1</p><p>正如我们所料, 当程序执行到num3时,就报错了</p><h3 id="channel的注意事项"><a href="#channel的注意事项" class="headerlink" title="channel的注意事项"></a>channel的注意事项</h3><ol><li><p>channel中只能存放指定的数据类型</p></li><li><p>channle的数据放满后，就不能再放入了</p></li><li><p>如果从 channel 取出数据后，可以继续放入</p></li><li><p>在没有使用协程的情况下，如果 channel 数据取完了，再取，就会报 dead lock</p></li></ol><h3 id="读写channel案例演示"><a href="#读写channel案例演示" class="headerlink" title="读写channel案例演示"></a>读写channel案例演示</h3><ul><li>创建一个intChan, 最多可以存放3个int, 演示存3个数据到intChan, 然后再取出这三个int</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">intChan &lt;- <span class="number">20</span></span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line"><span class="comment">//因为 intChan 的容量为3, 再存放会报告 dead lock</span></span><br><span class="line"><span class="comment">//intChan &lt;- 50</span></span><br><span class="line">num1 := &lt;-intChan</span><br><span class="line">num2 := &lt;-intChan</span><br><span class="line">num3 := &lt;-intChan</span><br><span class="line"><span class="comment">//因为 intChan 这时已经没有数据了, 再取就会报告 deadlock</span></span><br><span class="line"><span class="comment">//num4 := &lt;- intChan</span></span><br><span class="line">fmt.Printf(<span class="string">"num1=%v num2=%v num3=%v\n"</span>, num1, num2, num3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个mapChan,最多可以存放10个map[string]string, 的 key-value,演示写入和读取</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> mapChan <span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">mapChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">20</span>)</span><br><span class="line">m1[<span class="string">"city1"</span>] = <span class="string">"北京"</span></span><br><span class="line">m1[<span class="string">"city2"</span>] = <span class="string">"天津"</span></span><br><span class="line"></span><br><span class="line">m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">20</span>)</span><br><span class="line">m2[<span class="string">"hero1"</span>] = <span class="string">"宋江"</span></span><br><span class="line">m2[<span class="string">"hero2"</span>] = <span class="string">"武松"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入channel</span></span><br><span class="line">mapChan &lt;- m1</span><br><span class="line">mapChan &lt;- m2</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个数组接收channel数值</span></span><br><span class="line"><span class="keyword">var</span> arr []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> = []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">arr = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">l := <span class="built_in">len</span>(mapChan) <span class="comment">//提前记录好channel的长度,因为每一次循环,channel的长度都会发生变化</span></span><br><span class="line"><span class="comment">//循环输出</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; l; i++ &#123;</span><br><span class="line">arr[i] = &lt;-mapChan</span><br><span class="line">fmt.Printf(<span class="string">"第 %v 个值为 %v \n"</span>, i+<span class="number">1</span>, arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5i0j54r0bj20ds017wei.jpg" alt="image-20220824180451127"></p><ul><li>创建一个catChan,最多可以存放10个Cat结构体变量,演示写入和读取的方法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> catChan <span class="keyword">chan</span> Cat</span><br><span class="line">catChan = <span class="built_in">make</span>(<span class="keyword">chan</span> Cat, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">cat1 := Cat&#123;Name: <span class="string">"tom"</span>&#125;</span><br><span class="line">cat2 := Cat&#123;Name: <span class="string">"jerry"</span>&#125;</span><br><span class="line">catChan &lt;- cat1</span><br><span class="line">catChan &lt;- cat2</span><br><span class="line"></span><br><span class="line">cat11 := &lt;-catChan</span><br><span class="line">cat22 := &lt;-catChan</span><br><span class="line"></span><br><span class="line">fmt.Println(cat11, cat22)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5iyr8kt79j20e700swef.jpg" alt="image-20220825134857715"></p><ul><li>创建一个catChan,最多可以存放10个 *Cat 结构体变量,演示写入和读取的方法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> catChan <span class="keyword">chan</span> *Cat</span><br><span class="line">catChan = <span class="built_in">make</span>(<span class="keyword">chan</span> *Cat, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">cat1 := Cat&#123;Name: <span class="string">"tom"</span>&#125;</span><br><span class="line">cat2 := Cat&#123;Name: <span class="string">"jerry"</span>&#125;</span><br><span class="line">catChan &lt;- &amp;cat1</span><br><span class="line">catChan &lt;- &amp;cat2</span><br><span class="line"></span><br><span class="line">cat11 := &lt;-catChan</span><br><span class="line">cat22 := &lt;-catChan</span><br><span class="line"></span><br><span class="line">fmt.Println(cat11, cat22)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5iyueduboj20dx00u3yg.jpg" alt="image-20220825135202335"></p><ul><li>创建一个allChan,最多可以存放10个任意数据类型变量,演示写入和读取的方法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> allChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">allChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">cat1 := Cat&#123;Name: <span class="string">"tom"</span>&#125;</span><br><span class="line">cat2 := Cat&#123;Name: <span class="string">"jerry"</span>&#125;</span><br><span class="line">allChan &lt;- cat1</span><br><span class="line">allChan &lt;- cat2</span><br><span class="line">allChan &lt;- <span class="number">10</span></span><br><span class="line">allChan &lt;- <span class="string">"fuck"</span></span><br><span class="line"></span><br><span class="line">cat11 := &lt;-allChan</span><br><span class="line">cat22 := &lt;-allChan</span><br><span class="line">v1 := &lt;-allChan</span><br><span class="line">v2 := &lt;-allChan</span><br><span class="line"></span><br><span class="line">fmt.Println(cat11, cat22, v1, v2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5izdtyzidj20dw00t748.jpg" alt="image-20220825141042792"></p><ul><li>观察以下代码,会出现什么问题?</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> allChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">allChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">cat1 := Cat&#123;Name: <span class="string">"tom"</span>&#125;</span><br><span class="line">cat2 := Cat&#123;Name: <span class="string">"jerry"</span>&#125;</span><br><span class="line">allChan &lt;- cat1</span><br><span class="line">allChan &lt;- cat2</span><br><span class="line">allChan &lt;- <span class="number">10</span></span><br><span class="line">allChan &lt;- <span class="string">"fuck"</span></span><br><span class="line"></span><br><span class="line">cat11 := &lt;-allChan</span><br><span class="line"></span><br><span class="line">fmt.Println(cat11.Name)<span class="comment">//直接调用会出现问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码改进</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> allChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">allChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">cat1 := Cat&#123;Name: <span class="string">"tom"</span>&#125;</span><br><span class="line">cat2 := Cat&#123;Name: <span class="string">"jerry"</span>&#125;</span><br><span class="line">allChan &lt;- cat1</span><br><span class="line">allChan &lt;- cat2</span><br><span class="line">allChan &lt;- <span class="number">10</span></span><br><span class="line">allChan &lt;- <span class="string">"fuck"</span></span><br><span class="line"></span><br><span class="line">cat11 := &lt;-allChan</span><br><span class="line">name := cat11.(Cat)</span><br><span class="line"></span><br><span class="line">fmt.Println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5j0npbdgyj20dp00rgli.jpg" alt="image-20220825145447755"></p><h3 id="channel的遍历和关闭"><a href="#channel的遍历和关闭" class="headerlink" title="channel的遍历和关闭"></a>channel的遍历和关闭</h3><h4 id="channel的关闭"><a href="#channel的关闭" class="headerlink" title="channel的关闭"></a>channel的关闭</h4><blockquote><p>  使用内置函数 close 可以关闭 channel, 当 channel 关闭后，就不能再向 channel 写数据了，但是仍然可以从该 channel 读取数据</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">intChan &lt;- <span class="number">100</span></span><br><span class="line">intChan &lt;- <span class="number">200</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="comment">//这时不能够再写入数到 channel</span></span><br><span class="line"><span class="comment">//intChan &lt;- 300</span></span><br><span class="line">fmt.Println(<span class="string">"ok~"</span>)</span><br><span class="line"><span class="comment">//当管道关闭后,可以读取数据</span></span><br><span class="line">n1 := &lt;-intChan</span><br><span class="line">fmt.Println(<span class="string">"n1="</span>, n1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="channel的遍历"><a href="#channel的遍历" class="headerlink" title="channel的遍历"></a>channel的遍历</h4><p>channel 支持 for–range 的方式进行遍历，请注意两个细节:</p><ol><li><p>在遍历时，如果 channel 没有关闭，则回出现 deadlock 的错误</p></li><li><p>在遍历时，如果 channel 已经关闭，则会正常遍历数据，遍历完后，就会退出遍历。</p></li></ol><ul><li>演示案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">//for i := 0; i &lt; len(intChan); i++ &#123;&#125;//遍历管道不能使用普通的 for 循环</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i * <span class="number">2</span> <span class="comment">//放入100个数据到管道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在遍历时,如果channel没有关闭, 则会出现deadlock的错误</span></span><br><span class="line"><span class="comment">//在遍历时,如果channel已经关闭, 则会正常遍历数据, 遍历完后, 就会退出遍历</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan &#123;</span><br><span class="line">fmt.Println(<span class="string">"v="</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>应用实例1</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5j2o9jzqpj20j003wq3e.jpg" alt="image-20220825160432841"></p><blockquote><p>  请完成goroutine和channel协同工作的案例,具体要求:</p><p>  1)   开启一个writeData协程,向管道intChan中读取writeData写入的数据<br>  2)   开启一个readData协程,从管道intChan中读取writeData写入的数据<br>  3)   注意: writeData和readData操作的是同一个管道<br>  4)   主线程需要等待writeData和readData协程都完成工作才能退出管道</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++ &#123;</span><br><span class="line"><span class="comment">//放入数据</span></span><br><span class="line">intChan &lt;- i</span><br><span class="line">fmt.Println(<span class="string">"writeData "</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan) <span class="comment">//关闭</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="keyword">int</span>, exitChan <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;-intChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"readData 读到数据=%v\n"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//readData 读取完数据后, 即任务完成</span></span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line"><span class="built_in">close</span>(exitChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建两个管道</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">50</span>)</span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> writeData(intChan)</span><br><span class="line"><span class="keyword">go</span> readData(intChan, exitChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, ok := &lt;-exitChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5j48gncymj20p109jmy2.jpg" alt="image-20220825165832881"></p><ul><li>应用实例2-阻塞</li></ul><blockquote><p>  如果将上面代码中的<code>readData</code>协程注释掉,不进行读操作,会怎么样?</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建两个管道</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">50</span>)</span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> writeData(intChan)</span><br><span class="line"><span class="comment">//go readData(intChan, exitChan)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, ok := &lt;-exitChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做的话,程序只是向管道内写入数据,而没有进行读取,就会出现阻塞deadlock, 原因是intChan容量是10,而代码writeData会写入50个数据,因此会阻塞在 writeData 的 channel &lt;- i</p><ul><li>应用实例3</li></ul><blockquote><p>  要求统计 1-200000 的数字中，哪些是素数?这个问题在本章开篇就提出了，现在我们有 goroutine 和 channel 的知识后，就可以完成了 [测试数据: 80000]</p></blockquote><p>传统的方法，就是使用一个循环，循环的判断各个数是不是素数【ok】。</p><p> 使用并发/并行的方式，将统计素数的任务分配给多个(4 个)goroutine 去完成，完成任务时间短。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5j4xtn7yaj20ph0aa3zo.jpg" alt="image-20220825172254870"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向 intChan 放入 1-8000个数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">putNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">8000</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭 intChan</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从 intChan 取出数据, 并判断是否为素数,如果是, 就放入到 primeChan</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">primeNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="keyword">int</span>, primeChan <span class="keyword">chan</span> <span class="keyword">int</span>, exitChan <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环读取数据,进行素数的判断</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">num, ok := &lt;-intChan <span class="comment">//读取数据</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;             <span class="comment">//intChan取不到</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 num 是不是素数</span></span><br><span class="line"><span class="comment">//取余数,除了1和其本身以外,结果都不能为0的话,那么这个数就为素数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; num; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> num%i == <span class="number">0</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line"><span class="comment">//将这个数放入到 primeChan</span></span><br><span class="line">primeChan &lt;- num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"有一个 primeNum 协程因为取不到数据, 退出"</span>)</span><br><span class="line"><span class="comment">//这里我们还不能关闭 primeChan</span></span><br><span class="line"><span class="comment">//向 exitChan 写入 true</span></span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//声明管道</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1000</span>)</span><br><span class="line">primeChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2000</span>) <span class="comment">//放入结果</span></span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">4</span>)    <span class="comment">//因为有4个协程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启一个协程, 向 intChan 放入 1-8000 个数</span></span><br><span class="line"><span class="keyword">go</span> putNum(intChan)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启 4 个协程, 从 intChan 取出数据, 并判断是否为素数, 如果是,则放入到 primeChan</span></span><br><span class="line"><span class="comment">//4 个协程都是使用的同一个管道</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> primeNum(intChan, primeChan, exitChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里我们主线程, 进行处理</span></span><br><span class="line"><span class="comment">//这里利用协程go去跑(相当于在后台跑),我们就可以马上在下面输出素数的结果</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">&lt;-exitChan <span class="comment">//当管道 exitChan 没有数据时,这个循环就会一直处于等待状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当我们从 exitChan 取出了 4 个结果, 就可以放心的关闭 primeChan</span></span><br><span class="line"><span class="built_in">close</span>(primeChan)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"开始输出素数..."</span>)</span><br><span class="line"><span class="comment">//遍历我们的 primeChan, 把结果取出</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">res, ok := &lt;-primeChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将结果输出</span></span><br><span class="line">fmt.Printf(<span class="string">"素数=%d\n"</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"main 线程退出"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5k3jm7w6kj209y03lq30.jpg" alt="image-20220826132011866"></p><h4 id="channel注意事项"><a href="#channel注意事项" class="headerlink" title="channel注意事项"></a>channel注意事项</h4><ul><li>channel可以声明为只读，或者只写性质</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//1.在默认情况下, 管道时双向的</span></span><br><span class="line"><span class="comment">//var chan1 chan int//可读可写</span></span><br><span class="line"><span class="comment">//2.声明为只写</span></span><br><span class="line">chan2 := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">chan2 &lt;- <span class="number">20</span></span><br><span class="line"><span class="comment">//num := &lt;-chan2//error</span></span><br><span class="line">fmt.Println(<span class="string">"chan2="</span>, chan2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.声明为只读</span></span><br><span class="line"><span class="keyword">var</span> chan3 &lt;-<span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">num2 := &lt;-chan3</span><br><span class="line"><span class="comment">//chan3&lt;- 30//error</span></span><br><span class="line">fmt.Println(<span class="string">"num2="</span>, num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>channel只读和只写的最佳实践案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>, exitChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">exitChan &lt;- a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只读</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recv</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, exitChan <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;-ch</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">exitChan &lt;- a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> send(ch, exitChan)</span><br><span class="line"><span class="keyword">go</span> recv(ch, exitChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> exitChan &#123;</span><br><span class="line">total++</span><br><span class="line"><span class="keyword">if</span> total == <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"结束..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5k53eg7zvj20e304p749.jpg" alt="image-20220826141350828"></p><ul><li>使用 select 可以解决从管道取数据的阻塞问题</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//使用 select 可以解决从管道取数据的阻塞问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个管道; 10个数据 int</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义一个管道; 5个数据 string</span></span><br><span class="line">stringChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">stringChan &lt;- <span class="string">"hello"</span> + fmt.Sprintf(<span class="string">"%d"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统的方法在遍历管道时, 如果不关闭会阻塞而导致 deadlock</span></span><br><span class="line"><span class="comment">//问题: 在实际开发中, 可能我们不好确定什么时候关闭该管道</span></span><br><span class="line"><span class="comment">//可以使用 select 方式来解决</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">//注意, 如果 intChan 一直没有关闭, 不会一直阻塞而 deadlock</span></span><br><span class="line"><span class="comment">//会自动到下一个 case 匹配</span></span><br><span class="line"><span class="keyword">case</span> v := &lt;-intChan:</span><br><span class="line">fmt.Printf(<span class="string">"从 intChan 读取的数据%d\n"</span>, v)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">case</span> v := &lt;-stringChan:</span><br><span class="line">fmt.Printf(<span class="string">"从 stringChan 读取的数据%s\n"</span>, v)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">"都取不到了, 不玩儿了, 程序员可以加入逻辑\n"</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5k5s7as6sj20dz06l3z3.jpg" alt="image-20220826143741097"></p><ul><li>goroutine中使用recover，解决协程中出现panic，导致程序崩溃问题</li></ul><blockquote><p>  如果我们启动了一个协程, 但是这个协程出现了panic, 如果我们没有捕获到这和panic,就会造成整个程序崩溃,这时我们可以在 goroutine 中使用 recover 来捕获 panic, 进行处理,这样即使这个协程发生了问题,但是主线程仍然不受影响,可以继续执行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这里我们可以使用 defer + recover</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//捕获 test 抛出的 panic</span></span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"test() 发生错误"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 map</span></span><br><span class="line"><span class="keyword">var</span> myMap <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"><span class="comment">// myMap = make(map[int]string, 0)</span></span><br><span class="line">myMap[<span class="number">0</span>] = <span class="string">"golang"</span> <span class="comment">//error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> sayHello()</span><br><span class="line"><span class="keyword">go</span> test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"main() ok="</span>, i)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5k6ip1kt0j20e608lq3b.jpg" alt="image-20220826150308756"></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射的基本介绍"><a href="#反射的基本介绍" class="headerlink" title="反射的基本介绍"></a>反射的基本介绍</h2><p>1) 反射可以在运行时<strong>动态获取变量的各种信息</strong>, 比如变量的类型(type)，类别(kind)<br>2) 如果是结构体变量，还可以获取到结构体本身的信息(包括结构体的<strong>字段、方法</strong>)<br>3) 通过反射，可以修改变量的值，可以调用关联的方法。<br>4) 使用反射，需要 <strong>import (“reflect”)</strong></p><blockquote><p>包反射实现运行时反射，允许程序操作具有任意类型的对象。典型的用法是使用静态类型接口{}获取一个值，并通过调用TypeOf提取其动态类型信息，它返回一个type。</p><p>对ValueOf的调用将返回一个表示运行时数据的Value。Zero接受一个Type并返回一个Value，表示该类型的0值。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5k7xzsuxwj20kl0dp0tl.jpg" alt="image-20220826155226051"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>常见的反射应用场景有以下两种</p><ol><li>不知道接口调用哪个<code>函数</code>,根据传入参数在运行时确定调用的具体接口,这种需要对<strong>函数</strong>或<strong>方法</strong><code>反射</code>,例如以下这种桥接模式,比如我前面提出问题</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bridge</span><span class="params">(funcPtr <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>  第一个参数 funcPtr 以接口的形式传入函数指针,函数参数 args 以可变参数的形式传入,bridge 函数中可以用反射来动态执行 funcPtr 函数</p></blockquote><ol start="2"><li>对结构体序列化时, 如果结构体有指定Tag,也会使用到反射生成对应的字符串</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name"`</span><span class="comment">//打标签,注意冒号后面不要加空格</span></span><br><span class="line">Age   <span class="keyword">int</span>    <span class="string">`json:"age"`</span></span><br><span class="line">Skill <span class="keyword">string</span> <span class="string">`json:"skill"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">monster := Monster&#123;<span class="string">"牛魔王"</span>, <span class="number">500</span>, <span class="string">"芭蕉扇"</span>&#125;</span><br><span class="line"><span class="comment">//将monster变量序列化为 json 格式字符串</span></span><br><span class="line"><span class="comment">//json.Marshal 函数中使用反射,这个讲解反射时,再详细介绍</span></span><br><span class="line">jsonStr, err := json.Marshal(monster)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json 处理错误"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"> fmt.Println(<span class="string">"jsonStr"</span>, jsonStr)<span class="comment">//输出byte</span></span><br><span class="line">fmt.Println(<span class="string">"jsonStr"</span>, <span class="keyword">string</span>(jsonStr))<span class="comment">//byte转字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射重要的函数和概念"><a href="#反射重要的函数和概念" class="headerlink" title="反射重要的函数和概念"></a>反射重要的函数和概念</h2><ol><li>reflect.TypeOf(变量名), 获取变量名的类型,返回reflect.Type类型</li><li>reflect.ValueOf(变量名), 获取变量的值,返回reflect.Value类型;reflect.Value 是一个结构体类型,通过 reflect.Value, 可以获取到关于该变量的很多信息</li><li>变量、interface{} 和 reflect.Value 是可以相互转换的,这点在实际开发中,会经常使用到</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5k9akglc2j20pz09yab5.jpg" alt="image-20220826163907646"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5k9k5j4u3j20nd067q3h.jpg" alt="image-20220826164820453"></p><h2 id="反射的快速入门"><a href="#反射的快速入门" class="headerlink" title="反射的快速入门"></a>反射的快速入门</h2><blockquote><p>  请编写一个案例，演示对(结构体类型、interface{}、reflect.Value)进行反射的基本操作</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest01</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取的传入的变量的 type, kind 值</span></span><br><span class="line"><span class="comment">//1. 先获取到 reflect.Type</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">"rType="</span>, rType)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line">n2 := <span class="number">2</span> + rVal.Int()</span><br><span class="line">fmt.Println(<span class="string">"n2="</span>, n2)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"rVal=%v rVal type=%T\n"</span>, rVal, rVal)</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面我们将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line"><span class="comment">//将 interface&#123;&#125; 通过断言转成需要的类型</span></span><br><span class="line">num2 := iV.(<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(<span class="string">"num2="</span>, num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示反射(对结构体的反射)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectTest02</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//通过反射获取的传入的变量 type kind 值</span></span><br><span class="line"><span class="comment">//1. 先获取到 reflect.Type</span></span><br><span class="line">rType := reflect.TypeOf(b)</span><br><span class="line">fmt.Println(<span class="string">"rType="</span>, rType)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取到 reflect.Value</span></span><br><span class="line">rVal := reflect.ValueOf(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面我们将 rVal 转成 interface&#123;&#125;</span></span><br><span class="line">iV := rVal.Interface()</span><br><span class="line">fmt.Printf(<span class="string">"iv=%v iv type=%T\n"</span>, iV, iV)</span><br><span class="line"><span class="comment">//将 interface&#123;&#125; 通过断言转成 需要的类型</span></span><br><span class="line"><span class="comment">//这里,我们就简单使用了一带检测的类型断言</span></span><br><span class="line"><span class="comment">//可以使用 switch 的断言形式来做的更加的灵活</span></span><br><span class="line">stu, ok := iV.(Student)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">"stu.Name=%v\n"</span>, stu.Name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//编写一个案例</span></span><br><span class="line"><span class="comment">//演示对(基本数据类型/interface&#123;&#125;/reflect.Value)进行反射的基本操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.先定义一个 int</span></span><br><span class="line"><span class="comment">//var num int = 0</span></span><br><span class="line"><span class="comment">//reflectTest01(num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义一个 Student 的实例</span></span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name: <span class="string">"tom"</span>,</span><br><span class="line">Age:  <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reflectTest02(stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5kaoow6psj20dc01jgll.jpg" alt="image-20220826172718494"></p><p>可以参考文章<a href="https://blog.csdn.net/u011957758/article/details/81193806?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-81193806-blog-124157357.pc_relevant_vip_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-81193806-blog-124157357.pc_relevant_vip_default&utm_relevant_index=1" target="_blank" rel="noopener">golang反射案例</a></p><h2 id="反射的注意事项"><a href="#反射的注意事项" class="headerlink" title="反射的注意事项"></a>反射的注意事项</h2><ol><li>reflect.Value.Kind，获取变量的类别，返回的是一个常量</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5l50ln74xj20kk0n3gmi.jpg" alt="image-20220827105639952"></p><ol start="2"><li>Type 和 Kind 的区别</li></ol><p>Type 是<code>类型</code>, Kind 是<code>类别</code>， Type 和 Kind 可能是相同的，也可能是不同的.<br><strong>比如(相同):</strong> <code>var num int = 10</code>, num的Type是int , Kind也是int<br><strong>比如(不同):</strong> <code>var stu Student</code>, stu 的 Type 是 pkg1.Student , Kind 是 struct</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int64</span> = <span class="number">10</span></span><br><span class="line">nType := reflect.TypeOf(n)</span><br><span class="line">nKind := reflect.Kind(n)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"n的Type=%v n的Kind=%v\n"</span>, nType, nKind)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n的Type=<span class="keyword">int64</span> n的Kind=<span class="keyword">uint32</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>通过反射可以在让变量在 <code>interface{}</code> 和 <code>reflect.Value</code> 之间相互转换</p></li><li><p>使用反射的方式来获取变量的值(并返回对应的类型),要求数据类型匹配,比如 x 是 int类型,那么就应该使用 <code>reflect.Value(x).Int()</code>, 而不能使用其他的,否则报<code>panic</code></p></li><li><p>通过反射的来修改变量, 注意当使用 <code>SetXxx</code> 方法来设置需要通过对应的指针类型来完成, 这样才能改变传入的变量的值, 同时需要使用到 <code>reflect.Value.Elem()</code></p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testInt</span><span class="params">(b <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">val := reflect.ValueOf(b)</span><br><span class="line">fmt.Printf(<span class="string">"val type=%T\n"</span>, val)</span><br><span class="line">val.Elem().SetInt(<span class="number">110</span>) <span class="comment">//修改传入的值</span></span><br><span class="line">fmt.Printf(<span class="string">"val=%v\n"</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">20</span></span><br><span class="line">testInt(&amp;num) <span class="comment">//指向地址</span></span><br><span class="line">fmt.Println(<span class="string">"num="</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val <span class="keyword">type</span>=reflect.Value</span><br><span class="line">val=<span class="number">0xc0000140a0</span></span><br><span class="line">num= <span class="number">110</span></span><br></pre></td></tr></table></figure><ol start="6"><li>reflect.Value.Elem() 应该如何理解?</li></ol><ul><li>Elem() 用于获取指针指向变量</li></ul><h2 id="反射最佳实践"><a href="#反射最佳实践" class="headerlink" title="反射最佳实践"></a>反射最佳实践</h2><blockquote><p>  使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 Monster 结构体</span></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span>  <span class="string">`json:"name"`</span></span><br><span class="line">Age   <span class="keyword">int</span>     <span class="string">`json:"monster_age"`</span></span><br><span class="line">Score <span class="keyword">float32</span> <span class="string">`json:"成绩"`</span></span><br><span class="line">Sex   <span class="keyword">string</span>  <span class="string">`json:"性别"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法: 返回两个数的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span> <span class="title">GetSum</span><span class="params">(n1, n2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法: 接收四个值,给 s 赋值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span> <span class="title">Set</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>, score <span class="keyword">float32</span>, sex <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">s.Name = name</span><br><span class="line">s.Age = age</span><br><span class="line">s.Score = score</span><br><span class="line">s.Sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法: 显示 s 的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Monster)</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----start----"</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(<span class="string">"-----end-----"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStruct</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">//获取 reflect.Type 的类型</span></span><br><span class="line">typ := reflect.TypeOf(a)</span><br><span class="line"><span class="comment">//获取 reflect.Value 的类型</span></span><br><span class="line">val := reflect.ValueOf(a)</span><br><span class="line"><span class="comment">//获取到 a 对应的类别</span></span><br><span class="line">kd := val.Kind()</span><br><span class="line"><span class="comment">//如果传入的不是struct,就退出</span></span><br><span class="line"><span class="keyword">if</span> kd != reflect.Struct &#123;</span><br><span class="line">fmt.Println(<span class="string">"expect struct"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到该结构体有几个字段</span></span><br><span class="line">num := val.NumField()</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"struct has %d fields\n"</span>, num) <span class="comment">//4</span></span><br><span class="line"><span class="comment">//变量结构体的所有字段</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Field %d: 值为=%v\n"</span>, i, val.Field(i))</span><br><span class="line"><span class="comment">//获取到 struct 标签, 注意需要通过 reflect.Type 来获取 tag 标签的值</span></span><br><span class="line">tagVal := typ.Field(i).Tag.Get(<span class="string">"json"</span>)</span><br><span class="line"><span class="comment">//如果该字段于 tag 标签就显示, 否则就不显示</span></span><br><span class="line"><span class="keyword">if</span> tagVal != <span class="string">""</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Field %d: tag为=%v\n"</span>, i, tagVal)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到该结构体有多少个方法</span></span><br><span class="line">numOfMethod := val.NumMethod()</span><br><span class="line">fmt.Printf(<span class="string">"struct has %d method\n"</span>, numOfMethod)</span><br><span class="line"></span><br><span class="line"><span class="comment">//var params []reflect.Value</span></span><br><span class="line"><span class="comment">//方法的排序默认是按照 函数名 的排序(ASCII码)</span></span><br><span class="line">val.Method(<span class="number">1</span>).Call(<span class="literal">nil</span>) <span class="comment">//获取到第二个方法,调用它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用结构体的第一个方法 Method(0)</span></span><br><span class="line"><span class="keyword">var</span> params []reflect.Value <span class="comment">//声明了 []reflect.Value</span></span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">10</span>))</span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">40</span>))</span><br><span class="line">res := val.Method(<span class="number">0</span>).Call(params) <span class="comment">//传入的参数是 []reflect.Value, 返回 []reflect.Value</span></span><br><span class="line">fmt.Println(<span class="string">"res="</span>, res[<span class="number">0</span>].Int()) <span class="comment">//返回结果, 返回的结果是 []reflect.Value*</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建一个 Monster 实例</span></span><br><span class="line"><span class="keyword">var</span> a Monster = Monster&#123;</span><br><span class="line">Name:  <span class="string">"黄皮子"</span>,</span><br><span class="line">Age:   <span class="number">400</span>,</span><br><span class="line">Score: <span class="number">30.8</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将 Monster 实例传递给 TestStruct 函数</span></span><br><span class="line">TestStruct(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5ldm2sdjkj20de05waaa.jpg" alt="image-20220827155409764"></p><h2 id="个人练习"><a href="#个人练习" class="headerlink" title="个人练习"></a>个人练习</h2><blockquote><p>  要求:</p><ol><li>编写一个 Cal 结构体,有两个字段 Num1和Num2</li><li>Cal的方法 GetSub(name string)</li><li>使用反射遍历 Cal 结构体所有的字段信息</li><li>使用反射机制完成对 GetSub 的调用, 输出形式为 “tom完成了减法运行, 8 - 3 = 5”</li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cal <span class="keyword">struct</span> &#123;</span><br><span class="line">Num1 <span class="keyword">int</span> <span class="string">`json:"num1"`</span></span><br><span class="line">Num2 <span class="keyword">int</span> <span class="string">`json:"num2"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法: 两数相减</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cal)</span> <span class="title">GetSub</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">res := c.Num1 - c.Num2</span><br><span class="line">fmt.Printf(<span class="string">"%v完成了减法运行, %d - %d = %d\n"</span>,name, c.Num1, c.Num2, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReflect</span><span class="params">(inter <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">interType := reflect.TypeOf(inter)</span><br><span class="line">interValue := reflect.ValueOf(inter)</span><br><span class="line">interKind := interValue.Kind()</span><br><span class="line"><span class="keyword">if</span> interKind != reflect.Struct &#123;</span><br><span class="line">fmt.Println(<span class="string">"不是结构体!"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num := interValue.NumField()</span><br><span class="line">fmt.Printf(<span class="string">"struct has %d fields\n"</span>, num)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Field %d: 值为=%v\n"</span>, i, interValue.Field(i))</span><br><span class="line"><span class="comment">//获取到 struct 标签, 注意需要通过 reflect.Type 来获取 tag 标签的值</span></span><br><span class="line">tagVal := interType.Field(i).Tag.Get(<span class="string">"json"</span>)</span><br><span class="line"><span class="comment">//如果该字段于 tag 标签就显示, 否则就不显示</span></span><br><span class="line"><span class="keyword">if</span> tagVal != <span class="string">""</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Field %d: tag为=%v\n"</span>, i, tagVal)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到该结构体有多少个方法</span></span><br><span class="line">numOfMethod := interValue.NumMethod()</span><br><span class="line">fmt.Printf(<span class="string">"struct has %d method\n"</span>, numOfMethod)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> na []reflect.Value</span><br><span class="line">na = <span class="built_in">append</span>(na, reflect.ValueOf(<span class="string">"tom"</span>))</span><br><span class="line">interValue.Method(<span class="number">0</span>).Call(na)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a Cal = Cal&#123;</span><br><span class="line">Num1: <span class="number">20</span>,</span><br><span class="line">Num2: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line">TestReflect(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5lf67yuw0j20dd035glo.jpg" alt="image-20220827164807228"></p><h1 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h1><blockquote><p>  Golang 的主要设计目标之一就是面向大规模后端服务程序，网络通信这块是服务端程序必不可少也是至关重要的一部分。</p></blockquote><p><strong>网络编程有两种:</strong></p><p>1) <code>TCPsocket编程</code>，是网络编程的主流。之所以叫Tcpsocket编程，是因为底层是基于Tcp/ip协<br>议的. 比如: QQ 聊天<br>2) b/s结构的<code>http编程</code>，我们使用浏览器去访问服务器时，使用的就是http协议，而http底层依<br>旧是用 tcp socket 实现的。 比如: 京东商城 【这属于 go web 开发范畴 】</p><h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><blockquote><p>  TCP/IP(Transmission Control Protocol/Internet Protocol)的简写,中文译名为传输控制协议/因特网互联协议，又叫网络通讯协议，这个协议是 Internet 最基本的协议、Internet 国际互联网络的基础，简单地说，就是由网络层的 IP 协议和传输层的 TCP 协议组成的。</p></blockquote><h2 id="OSI与TCP-IP参考模型"><a href="#OSI与TCP-IP参考模型" class="headerlink" title="OSI与TCP/IP参考模型"></a>OSI与TCP/IP参考模型</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5ok53g3xnj20l00ddt9j.jpg" alt="image-20220830095641831"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5okpgqycfj20yp0i3ta5.jpg" alt="image-20220830101617864"></p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><ul><li>0号端口是保留端口</li><li>1-1024是固定端口(程序员不要使用)<ul><li>22 =&gt; SSH远程登录协议</li><li>23 =&gt; telnet</li><li>21 =&gt; ftp</li><li>25 =&gt; smtp</li><li>80 =&gt; iis</li><li>7   =&gt; echo</li></ul></li><li>1025-65535是动态端口(程序员可以使用)</li></ul><h2 id="TCP-SOCKET编程快速入门"><a href="#TCP-SOCKET编程快速入门" class="headerlink" title="TCP-SOCKET编程快速入门"></a>TCP-SOCKET编程快速入门</h2><h3 id="服务端的处理流程"><a href="#服务端的处理流程" class="headerlink" title="服务端的处理流程"></a>服务端的处理流程</h3><ol><li>监听端口 8888</li><li>接收客户端的 TCP 连接, 建立客户端和服务器端的链接</li><li>创建 goroutine, 处理该链接的请求(通常客户端会通过链接发送请求包)</li></ol><h3 id="客户端的处理流程"><a href="#客户端的处理流程" class="headerlink" title="客户端的处理流程"></a>客户端的处理流程</h3><ol><li>建立与服务端的链接</li><li>发送请求数据(终端), 接收服务器端返回的结果数据</li><li>关闭链接</li></ol><h3 id="流程示意图"><a href="#流程示意图" class="headerlink" title="流程示意图"></a>流程示意图</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5olbf6aknj20g70e7751.jpg" alt="image-20220830103724207"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的切片</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">//1.等待客户端通过 conn 发送信息</span></span><br><span class="line"><span class="comment">//2.如果客户端没有 write[发送],那么协程就阻塞在这里</span></span><br><span class="line">fmt.Printf(<span class="string">"服务器在等待客户端 %s 发送信息\n"</span>, conn.RemoteAddr().String())</span><br><span class="line">n, err := conn.Read(buf) <span class="comment">//从 conn 读取</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"客户端退出 err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.显示客户端发送的内容到服务器的终端</span></span><br><span class="line">fmt.Print(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器开始监听..."</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:8888"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"listen err=%v\n"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close() <span class="comment">//延时关闭listen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环等待客户端来链接我</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//等待客户端链接</span></span><br><span class="line">fmt.Println(<span class="string">"等待客户端来连接..."</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Accept() err="</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Accept() suc con=%v 客户端ip=%v\n"</span>, conn, conn.RemoteAddr().String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里准备一个协程, 为客户端服务</span></span><br><span class="line"><span class="keyword">go</span> process(conn)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Printf("listen suc=%v\n", listen)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"client dial err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//功能一: 客户端可以发送单行数据, 然后就退出</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin) <span class="comment">//os.Stdin 代表标准输入[终端]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//从终端读取一行用户数据, 并准备发送给服务器</span></span><br><span class="line">line, err := reader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readString err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户输入的是 exit 就退出</span></span><br><span class="line">line = strings.Trim(line, <span class="string">"\r\n"</span>)</span><br><span class="line"><span class="keyword">if</span> line == <span class="string">"exit"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端退出..."</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再将 line 发送给服务器</span></span><br><span class="line">_, err = conn.Write([]<span class="keyword">byte</span>(line + <span class="string">"\n"</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn write err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="海量用户即时通讯系统"><a href="#海量用户即时通讯系统" class="headerlink" title="海量用户即时通讯系统"></a>海量用户即时通讯系统</h2><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ol><li>需求分析</li><li>设计阶段</li><li>编码实现</li><li>测试阶段</li><li>实施</li></ol><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li><p>用户注册</p></li><li><p>用户登录</p></li><li><p>显示在线用户列表 4) 群聊(广播)</p></li><li><p>点对点聊天</p></li><li><p>离线留言</p><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3></li></ul><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pq59ew8aj20im09tmxj.jpg" alt="image-20220831101000696" style="zoom:80%;"><h3 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h3><blockquote><p>  项目要保存用户信息和消息数据,因此需要使用到数据库,这里我们选择使用 Redis 数据库</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pqbt08g4j20nz0eqgmp.jpg" alt="image-20220831101620024"></p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><h4 id="客户端登录菜单"><a href="#客户端登录菜单" class="headerlink" title="客户端登录菜单"></a>客户端登录菜单</h4><ul><li>功能: 显示客户端菜单</li><li>界面</li></ul><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pqea24gbj20m40bk0tb.jpg" alt="image-20220831101842927" style="zoom:67%;"><ul><li><p>二级菜单</p><ul><li>显示在线用户列表</li><li>发送信息</li><li>信息列表</li><li>退出系统</li></ul></li><li><p>代码实现</p></li></ul><blockquote><p>  client/main.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户ID</span></span><br><span class="line"><span class="keyword">var</span> userId <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户密码</span></span><br><span class="line"><span class="keyword">var</span> userPwd <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//接收用户的选择</span></span><br><span class="line"><span class="keyword">var</span> key <span class="keyword">string</span></span><br><span class="line"><span class="comment">//判断是否继续显示菜单</span></span><br><span class="line"><span class="keyword">var</span> loop = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"--------------------欢迎登录多人聊天系统--------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"\t\t\t1 登录聊天室"</span>)</span><br><span class="line">fmt.Println(<span class="string">"\t\t\t2 注册用户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"\t\t\tq 退出系统"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请选择进行的操作[1|2|q]:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v\n"</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">fmt.Println(<span class="string">"登录聊天室"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">fmt.Println(<span class="string">"注册用户"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"q"</span>:</span><br><span class="line">fmt.Println(<span class="string">"退出系统"</span>)</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入有误, 请重新输入!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> key == <span class="string">"1"</span> &#123; <span class="comment">//用户登录</span></span><br><span class="line">fmt.Println(<span class="string">"请输入用户的Id:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v\n"</span>, &amp;userId)</span><br><span class="line">fmt.Println(<span class="string">"请输入用户的密码:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v\n"</span>, &amp;userPwd)</span><br><span class="line"></span><br><span class="line">err := login(userId, userPwd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"登录成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  client/login.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(userId <span class="keyword">string</span>, userPwd <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"userId=%v, userPwd=%v\n"</span>, userId, userPwd)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5s6yta79tj20fk0bd3zd.jpg" alt="image-20220902132309821"></p><h4 id="客户端用户登录"><a href="#客户端用户登录" class="headerlink" title="客户端用户登录"></a>客户端用户登录</h4><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><p><strong>思路分析:</strong></p><ol><li><p>先确定消息 Message 的格式和结构 </p></li><li><p>然后根据上图的分析完成代码</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5sb67tns2j20tu0dodir.jpg" alt="image-20220902154840174"></p><blockquote><p>  server/main.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"redis/src/golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理客户端的通讯</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">proc</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//延时关闭conn</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环接收客户端发送的信息</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"读取客户端发送的数据..."</span>)</span><br><span class="line">n, err := conn.Read(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"读取到的buf="</span>, buf[:<span class="number">4</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器在 8889 端口监听中..."</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Listen err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦监听成功, 就等待客户端来链接服务器</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"等待客户端来链接服务器..."</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Accept err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦链接成功, 就启动一个协程和客户端保持通讯</span></span><br><span class="line"><span class="keyword">go</span> proc(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  common/message/message.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> message</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">LoginMesType    = <span class="string">"LoginMes"</span></span><br><span class="line">LoginResMesType = <span class="string">"LoginResMes"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Type <span class="keyword">string</span> <span class="string">`json:"type"`</span> <span class="comment">//消息类型</span></span><br><span class="line">Data <span class="keyword">string</span> <span class="string">`json:"data"`</span> <span class="comment">//消息的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoginMes <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId   <span class="keyword">int</span>    <span class="string">`json:"userId"`</span></span><br><span class="line">UserPwd  <span class="keyword">string</span> <span class="string">`json:"userPwd"`</span></span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`json:"userName"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoginResMes <span class="keyword">struct</span> &#123;</span><br><span class="line">Code  <span class="keyword">int</span>    <span class="string">`json:"code"`</span>  <span class="comment">// 返回状态码 500 表示该用户未注册, 200 表示登录成功</span></span><br><span class="line">Error <span class="keyword">string</span> <span class="string">`json:"error"`</span> <span class="comment">//返回错误信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  client/main.go<br>  和前面的代码一样，没有修改</p><p>  client/login.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"redis/src/golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(userId <span class="keyword">int</span>, userPwd <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf("userId=%v, userPwd=%v\n", userId, userPwd)</span></span><br><span class="line"><span class="comment">// return nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 链接到服务器</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时关闭</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 准备通过 conn 发送消息给服务</span></span><br><span class="line"><span class="keyword">var</span> mes message.Message</span><br><span class="line">mes.Type = message.LoginMesType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 LoginMes 结构体</span></span><br><span class="line"><span class="keyword">var</span> loginMes message.LoginMes</span><br><span class="line">loginMes.UserId = userId</span><br><span class="line">loginMes.UserPwd = userPwd</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 将 loginMes 序列化</span></span><br><span class="line">data, err := json.Marshal(loginMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 把data 赋值给 mes.Data 字段</span></span><br><span class="line">mes.Data = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 将 mes 进行序列化操作</span></span><br><span class="line">data, err = json.Marshal(mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 到这个时候, data 就是我们要发送的信息</span></span><br><span class="line"><span class="comment">// 先把 data 的长度发送给服务器</span></span><br><span class="line"><span class="comment">// 先获取到 data 的长度 =&gt; 转成一个表示长度的 byte 切片</span></span><br><span class="line">pkgLen := <span class="keyword">uint32</span>(<span class="built_in">len</span>(data))</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">binary.BigEndian.PutUint32(buf[:<span class="number">4</span>], pkgLen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送长度</span></span><br><span class="line">n, err := conn.Write(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"客户端, 发送消息的长度=%d 内容=%s"</span>, <span class="built_in">len</span>(data), <span class="keyword">string</span>(data))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><p>接下来需要完成客户端可以发送消息本身，服务器端可以正常接收到消息,并根据客户端发送的消息(LoginMes), 判断用户的合法性，并返回相应的 LoginResMes<br><strong>思路分析:</strong></p><ol><li>让客户端发送消息本身</li><li>服务器端接受到消息， 然后反序列化成对应的消息结构体.</li><li>服务器端根据反序列化成对应的消息， 判断是否登录用户是合法, 返回 LoginResMes</li><li>客户端解析返回的 LoginResMes,显示对应界面</li><li>这里我们需要做函数的封装</li></ol><ul><li>代码实现:</li></ul><blockquote><p>  修改client/login.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"redis/src/golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(userId <span class="keyword">int</span>, userPwd <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf("userId=%v, userPwd=%v\n", userId, userPwd)</span></span><br><span class="line"><span class="comment">// return nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 链接到服务器</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时关闭</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 准备通过 conn 发送消息给服务</span></span><br><span class="line"><span class="keyword">var</span> mes message.Message</span><br><span class="line">mes.Type = message.LoginMesType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 LoginMes 结构体</span></span><br><span class="line"><span class="keyword">var</span> loginMes message.LoginMes</span><br><span class="line">loginMes.UserId = userId</span><br><span class="line">loginMes.UserPwd = userPwd</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 将 loginMes 序列化</span></span><br><span class="line">data, err := json.Marshal(loginMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 把data 赋值给 mes.Data 字段</span></span><br><span class="line">mes.Data = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 将 mes 进行序列化操作</span></span><br><span class="line">data, err = json.Marshal(mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 到这个时候, data 就是我们要发送的信息</span></span><br><span class="line"><span class="comment">// 先把 data 的长度发送给服务器</span></span><br><span class="line"><span class="comment">// 先获取到 data 的长度 =&gt; 转成一个表示长度的 byte 切片</span></span><br><span class="line">pkgLen := <span class="keyword">uint32</span>(<span class="built_in">len</span>(data))</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">binary.BigEndian.PutUint32(buf[:<span class="number">4</span>], pkgLen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送长度</span></span><br><span class="line">n, err := conn.Write(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息本身</span></span><br><span class="line">_, err = conn.Write(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠 20 秒</span></span><br><span class="line">time.Sleep(<span class="number">20</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">"休眠了 20 秒"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Printf("客户端, 发送消息的长度=%d 内容=%s", len(data), string(data))</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码解释:</strong></p><p>下图为 <code>login.go</code> 中修改/添加的部分</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5tf62w1ckj20jp070mxi.jpg" alt="image-20220903145227916"></p><blockquote><p>  修改 server/main.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"redis/src/golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readPkg</span><span class="params">(conn net.Conn)</span> <span class="params">(mes message.Message, err error)</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"读取客户端发送的数据..."</span>)</span><br><span class="line">_, err = conn.Read(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 buf[:4] 转成一个 uint32 类型</span></span><br><span class="line"><span class="comment">// var pkgLen uint32</span></span><br><span class="line">pkgLen := binary.BigEndian.Uint32(buf[:<span class="number">4</span>])</span><br><span class="line">fmt.Println(<span class="string">"读取到的buf="</span>, buf[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 pkgLen 读取消息内容</span></span><br><span class="line">n, err := conn.Read(buf[:pkgLen])</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint32</span>(n) != pkgLen || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 pkgLen 反序列化为 message.Message</span></span><br><span class="line"><span class="comment">// 官方解释:</span></span><br><span class="line"><span class="comment">// func Unmarshal(data []byte, v interface&#123;&#125;) error</span></span><br><span class="line"><span class="comment">// Unmarshal函数解析json编码的数据并将结果存入v指向的值。</span></span><br><span class="line">err = json.Unmarshal(buf[:pkgLen], &amp;mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.unmarshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mes, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理客户端的通讯</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">proc</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//延时关闭conn</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环接收客户端发送的信息</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 这里我们将读取数据包封装成一个函数 readPkg, 返回 Message, err</span></span><br><span class="line">msg, err := readPkg(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端已经退出, 服务端自动退出..."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readPkg err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出客户端发送的信息</span></span><br><span class="line">fmt.Println(<span class="string">"msg="</span>, msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器在 8889 端口监听中..."</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Listen err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦监听成功, 就等待客户端来链接服务器</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"等待客户端来链接服务器..."</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Accept err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦链接成功, 就启动一个协程和客户端保持通讯</span></span><br><span class="line"><span class="keyword">go</span> proc(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码解释:</strong></p><p>下图为 <code>server/ming.go</code> 中新增的函数</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5tf945155j20jg0mqwgn.jpg" alt="image-20220903145524274"></p><p>新增的 <code>readPkg</code> 函数封装了以前函数 <code>proc</code> 中for循环中的内容,目前的内容如下图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5tfa8bkssj20ir0gi75f.jpg" alt="image-20220903145629681"></p><p>代码测试执行结果如下图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5tfg2mc8bj20xp08idgx.jpg" alt="image-20220903150206050"></p><h5 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h5><ul><li>能够完成登录，并提示相应信息</li></ul><blockquote><p>  修改 common/message/message.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> message</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">LoginMesType    = <span class="string">"LoginMes"</span></span><br><span class="line">LoginResMesType = <span class="string">"LoginResMes"</span></span><br><span class="line">RegisterMesType = <span class="string">"RegisterMes"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Type <span class="keyword">string</span> <span class="string">`json:"type"`</span> <span class="comment">//消息类型</span></span><br><span class="line">Data <span class="keyword">string</span> <span class="string">`json:"data"`</span> <span class="comment">//消息的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoginMes <span class="keyword">struct</span> &#123;</span><br><span class="line">UserId   <span class="keyword">int</span>    <span class="string">`json:"userId"`</span></span><br><span class="line">UserPwd  <span class="keyword">string</span> <span class="string">`json:"userPwd"`</span></span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`json:"userName"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoginResMes <span class="keyword">struct</span> &#123;</span><br><span class="line">Code  <span class="keyword">int</span>    <span class="string">`json:"code"`</span>  <span class="comment">// 返回状态码 500 表示该用户未注册, 200 表示登录成功</span></span><br><span class="line">Error <span class="keyword">string</span> <span class="string">`json:"error"`</span> <span class="comment">//返回错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册逻辑</span></span><br><span class="line"><span class="keyword">type</span> RegisterMes <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  修改server/main.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"redis/src/golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readPkg</span><span class="params">(conn net.Conn)</span> <span class="params">(mes message.Message, err error)</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"读取客户端发送的数据..."</span>)</span><br><span class="line">_, err = conn.Read(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 buf[:4] 转成一个 uint32 类型</span></span><br><span class="line"><span class="comment">// var pkgLen uint32</span></span><br><span class="line">pkgLen := binary.BigEndian.Uint32(buf[:<span class="number">4</span>])</span><br><span class="line">fmt.Println(<span class="string">"读取到的buf="</span>, buf[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 pkgLen 读取消息内容</span></span><br><span class="line">n, err := conn.Read(buf[:pkgLen])</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint32</span>(n) != pkgLen || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 pkgLen 反序列化为 message.Message</span></span><br><span class="line"><span class="comment">// 官方解释:</span></span><br><span class="line"><span class="comment">// func Unmarshal(data []byte, v interface&#123;&#125;) error</span></span><br><span class="line"><span class="comment">// Unmarshal函数解析json编码的数据并将结果存入v指向的值。</span></span><br><span class="line">err = json.Unmarshal(buf[:pkgLen], &amp;mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.unmarshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mes, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writePkg</span><span class="params">(conn net.Conn, data []<span class="keyword">byte</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先发送一个长度给对方</span></span><br><span class="line">pkgLen := <span class="keyword">uint32</span>(<span class="built_in">len</span>(data))</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">binary.BigEndian.PutUint32(buf[:<span class="number">4</span>], pkgLen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送长度</span></span><br><span class="line">n, err := conn.Write(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息本身</span></span><br><span class="line">n, err = conn.Write(data)</span><br><span class="line"><span class="keyword">if</span> n != <span class="keyword">int</span>(pkgLen) || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理客户端的通讯</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">proc</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//延时关闭conn</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环接收客户端发送的信息</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 这里我们将读取数据包封装成一个函数 readPkg, 返回 Message, err</span></span><br><span class="line">mes, err := readPkg(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端已经退出, 服务端自动退出..."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readPkg err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出客户端发送的信息</span></span><br><span class="line"><span class="comment">// fmt.Println("msg=", msg)</span></span><br><span class="line">err = ServerProcessMes(conn, &amp;mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个 ServerProcessLogin 函数, 专门处理登录请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServerProcessLogin</span><span class="params">(conn net.Conn, mes *message.Message)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心代码</span></span><br><span class="line"><span class="comment">//1. 先从mes中取出mes.Data, 并直接反序列化成LoginMes</span></span><br><span class="line"><span class="keyword">var</span> loginMes message.LoginMes</span><br><span class="line">err = json.Unmarshal([]<span class="keyword">byte</span>(mes.Data), &amp;loginMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Unmarshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.声明一个 resMes</span></span><br><span class="line"><span class="keyword">var</span> resMes message.Message</span><br><span class="line">resMes.Type = message.LoginResMesType</span><br><span class="line"><span class="comment">//3. 声明一个 LoginResMes, 并完成赋值</span></span><br><span class="line"><span class="keyword">var</span> loginResMes message.LoginResMes</span><br><span class="line"><span class="comment">//4. 如果用户 id=100, 密码=123456, 认为合法, 否则不合法</span></span><br><span class="line"><span class="keyword">if</span> loginMes.UserId == <span class="number">100</span> &amp;&amp; loginMes.UserPwd == <span class="string">"123456"</span> &#123;</span><br><span class="line"><span class="comment">//合法</span></span><br><span class="line">loginResMes.Code = <span class="number">200</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不合法</span></span><br><span class="line">loginResMes.Code = <span class="number">500</span><span class="comment">// 500状态码, 表示该用户不存在</span></span><br><span class="line">loginResMes.Error = <span class="string">"该用户不存在, 请注册再使用"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5. 将 loginResMes 序列化</span></span><br><span class="line">data, err := json.Marshal(loginResMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6. 将 data 赋值给 resMes</span></span><br><span class="line">resMes.Data = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">//7. 对 resMes 进行序列化,准备发送</span></span><br><span class="line">data, err = json.Marshal(resMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//8. 发送data, 我们将其封装到writePkg函数</span></span><br><span class="line">err = writePkg(conn, data)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个 ServerProcessMes 函数</span></span><br><span class="line"><span class="comment">//功能: 根据客户端发送消息种类不同, 来决定调用哪个函数来处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServerProcessMes</span><span class="params">(conn net.Conn, mes *message.Message)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> mes.Type &#123;</span><br><span class="line"><span class="keyword">case</span> message.LoginMesType:</span><br><span class="line"><span class="comment">//处理登录</span></span><br><span class="line">err = ServerProcessLogin(conn, mes)</span><br><span class="line"><span class="keyword">case</span> message.RegisterMesType:</span><br><span class="line"><span class="comment">//处理注册</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"消息类型不存在, 无法处理..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器在 8889 端口监听中..."</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Listen err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦监听成功, 就等待客户端来链接服务器</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"等待客户端来链接服务器..."</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Accept err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦链接成功, 就启动一个协程和客户端保持通讯</span></span><br><span class="line"><span class="keyword">go</span> proc(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图为<code>server/main.go</code>代码中在之前基础上增加的内容</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5vl7kqci7j20ly0atjsc.jpg" alt="image-20220905115238000"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5vl8p3jcoj20og0sygox.jpg" alt="image-20220905115344619"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5vl9jxt48j20hp0fft9y.jpg" alt="image-20220905115433930"></p><blockquote><p>  在client下新建 <code>utils.go</code> 文件</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"redis/src/golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readPkg</span><span class="params">(conn net.Conn)</span> <span class="params">(mes message.Message, err error)</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"读取客户端发送的数据..."</span>)</span><br><span class="line">_, err = conn.Read(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 buf[:4] 转成一个 uint32 类型</span></span><br><span class="line"><span class="comment">// var pkgLen uint32</span></span><br><span class="line">pkgLen := binary.BigEndian.Uint32(buf[:<span class="number">4</span>])</span><br><span class="line">fmt.Println(<span class="string">"读取到的buf="</span>, buf[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 pkgLen 读取消息内容</span></span><br><span class="line">n, err := conn.Read(buf[:pkgLen])</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint32</span>(n) != pkgLen || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 pkgLen 反序列化为 message.Message</span></span><br><span class="line"><span class="comment">// 官方解释:</span></span><br><span class="line"><span class="comment">// func Unmarshal(data []byte, v interface&#123;&#125;) error</span></span><br><span class="line"><span class="comment">// Unmarshal函数解析json编码的数据并将结果存入v指向的值。</span></span><br><span class="line">err = json.Unmarshal(buf[:pkgLen], &amp;mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.unmarshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mes, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writePkg</span><span class="params">(conn net.Conn, data []<span class="keyword">byte</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先发送一个长度给对方</span></span><br><span class="line">pkgLen := <span class="keyword">uint32</span>(<span class="built_in">len</span>(data))</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">binary.BigEndian.PutUint32(buf[:<span class="number">4</span>], pkgLen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送长度</span></span><br><span class="line">n, err := conn.Write(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息本身</span></span><br><span class="line">n, err = conn.Write(data)</span><br><span class="line"><span class="keyword">if</span> n != <span class="keyword">int</span>(pkgLen) || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  修改 <code>client/login.go</code> 文件</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"redis/src/golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(userId <span class="keyword">int</span>, userPwd <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// fmt.Printf("userId=%v, userPwd=%v\n", userId, userPwd)</span></span><br><span class="line"><span class="comment">// return nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 链接到服务器</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时关闭</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 准备通过 conn 发送消息给服务</span></span><br><span class="line"><span class="keyword">var</span> mes message.Message</span><br><span class="line">mes.Type = message.LoginMesType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 LoginMes 结构体</span></span><br><span class="line"><span class="keyword">var</span> loginMes message.LoginMes</span><br><span class="line">loginMes.UserId = userId</span><br><span class="line">loginMes.UserPwd = userPwd</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 将 loginMes 序列化</span></span><br><span class="line">data, err := json.Marshal(loginMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 把data 赋值给 mes.Data 字段</span></span><br><span class="line">mes.Data = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 将 mes 进行序列化操作</span></span><br><span class="line">data, err = json.Marshal(mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 到这个时候, data 就是我们要发送的信息</span></span><br><span class="line"><span class="comment">// 先把 data 的长度发送给服务器</span></span><br><span class="line"><span class="comment">// 先获取到 data 的长度 =&gt; 转成一个表示长度的 byte 切片</span></span><br><span class="line">pkgLen := <span class="keyword">uint32</span>(<span class="built_in">len</span>(data))</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">binary.BigEndian.PutUint32(buf[:<span class="number">4</span>], pkgLen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送长度</span></span><br><span class="line">n, err := conn.Write(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息本身</span></span><br><span class="line">_, err = conn.Write(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠 20 秒</span></span><br><span class="line"><span class="comment">// time.Sleep(20 * time.Second)</span></span><br><span class="line"><span class="comment">// fmt.Println("休眠了 20 秒")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Printf("客户端, 发送消息的长度=%d 内容=%s", len(data), string(data))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理服务器端返回的信息</span></span><br><span class="line">mes, err = readPkg(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readPkg(conn) err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 mes 的Data部分反序列化成 LoginResMes</span></span><br><span class="line"><span class="keyword">var</span> loginResMes message.LoginResMes</span><br><span class="line">err = json.Unmarshal([]<span class="keyword">byte</span>(mes.Data), &amp;loginResMes)</span><br><span class="line"><span class="keyword">if</span> loginResMes.Code == <span class="number">200</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"登录成功"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> loginResMes.Code == <span class="number">500</span> &#123;</span><br><span class="line">fmt.Println(loginResMes.Error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图为 <code>client/login.go</code> 中在原来的基础上所增加的内容</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5vldbccrej20gh0aot9l.jpg" alt="image-20220905115811096"></p><p><strong>执行测试结果:</strong></p><blockquote><p>   client端</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5vlf15ihqj20bc0ciq3n.jpg" alt="image-20220905115949656"></p><blockquote><p>  server端</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5vlfbeil7j20b406kq3e.jpg" alt="image-20220905120005234"></p><h5 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四"></a>步骤四</h5><ul><li>程序代码改进</li></ul><blockquote><p>  前面的程序虽然完成了功能，但是没有结构，系统的可读性、扩展性和维护性都不好，因此需要对程序的结构进行改进。</p><p>  先改进服务端, 先画出程序的框架图[思路]，再写代码</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5wnuqpqahj20z70ec40x.jpg" alt="image-20220906100938734"></p><ul><li>步骤</li></ul><ol><li>先把分析出来的文件，创建好，然后放到相应的文件夹[包]</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5wqd1dniwj206i062jrg.jpg" alt="image-20220906113628634"></p><ol start="2"><li><p>现在根据各个文件，完成的任务不同，将 main.go 的代码剥离到对应的文件中即可</p></li><li><p>修改<code>server/utils/utils.go</code></p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将这些方法关联到结构体中</span></span><br><span class="line"><span class="keyword">type</span> Transfer <span class="keyword">struct</span> &#123;</span><br><span class="line">Conn net.Conn</span><br><span class="line">Buf  [<span class="number">4096</span>]<span class="keyword">byte</span> <span class="comment">//这时传输时,使用缓存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Transfer)</span> <span class="title">ReadPkg</span><span class="params">()</span> <span class="params">(mes message.Message, err error)</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"读取客户端发送的数据..."</span>)</span><br><span class="line">_, err = t.Conn.Read(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 buf[:4] 转成一个 uint32 类型</span></span><br><span class="line"><span class="comment">// var pkgLen uint32</span></span><br><span class="line">pkgLen := binary.BigEndian.Uint32(buf[:<span class="number">4</span>])</span><br><span class="line">fmt.Println(<span class="string">"读取到的buf="</span>, buf[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 pkgLen 读取消息内容</span></span><br><span class="line">n, err :=t.Conn.Read(buf[:pkgLen])</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">uint32</span>(n) != pkgLen || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Read fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 pkgLen 反序列化为 message.Message</span></span><br><span class="line"><span class="comment">// 官方解释:</span></span><br><span class="line"><span class="comment">// func Unmarshal(data []byte, v interface&#123;&#125;) error</span></span><br><span class="line"><span class="comment">// Unmarshal函数解析json编码的数据并将结果存入v指向的值。</span></span><br><span class="line">err = json.Unmarshal(buf[:pkgLen], &amp;mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.unmarshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Transfer)</span> <span class="title">WritePkg</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先发送一个长度给对方</span></span><br><span class="line">pkgLen := <span class="keyword">uint32</span>(<span class="built_in">len</span>(data))</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">binary.BigEndian.PutUint32(buf[:<span class="number">4</span>], pkgLen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送长度</span></span><br><span class="line">n, err := t.Conn.Write(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息本身</span></span><br><span class="line">n, err = t.Conn.Write(data)</span><br><span class="line"><span class="keyword">if</span> n != <span class="keyword">int</span>(pkgLen) || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改<code>server/process/userProcess.go</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> process</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/server/utils"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserProcess <span class="keyword">struct</span> &#123;</span><br><span class="line">Conn net.Conn</span><br><span class="line">Buf  [<span class="number">4096</span>]<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个 ServerProcessLogin 函数, 专门处理登录请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserProcess)</span> <span class="title">ServerProcessLogin</span><span class="params">(mes *message.Message)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心代码</span></span><br><span class="line"><span class="comment">//1. 先从mes中取出mes.Data, 并直接反序列化成LoginMes</span></span><br><span class="line"><span class="keyword">var</span> loginMes message.LoginMes</span><br><span class="line">err = json.Unmarshal([]<span class="keyword">byte</span>(mes.Data), &amp;loginMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Unmarshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.声明一个 resMes</span></span><br><span class="line"><span class="keyword">var</span> resMes message.Message</span><br><span class="line">resMes.Type = message.LoginResMesType</span><br><span class="line"><span class="comment">//3. 声明一个 LoginResMes, 并完成赋值</span></span><br><span class="line"><span class="keyword">var</span> loginResMes message.LoginResMes</span><br><span class="line"><span class="comment">//4. 如果用户 id=100, 密码=123456, 认为合法, 否则不合法</span></span><br><span class="line"><span class="keyword">if</span> loginMes.UserId == <span class="number">100</span> &amp;&amp; loginMes.UserPwd == <span class="string">"123456"</span> &#123;</span><br><span class="line"><span class="comment">//合法</span></span><br><span class="line">loginResMes.Code = <span class="number">200</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不合法</span></span><br><span class="line">loginResMes.Code = <span class="number">500</span> <span class="comment">// 500状态码, 表示该用户不存在</span></span><br><span class="line">loginResMes.Error = <span class="string">"该用户不存在, 请注册再使用"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5. 将 loginResMes 序列化</span></span><br><span class="line">data, err := json.Marshal(loginResMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6. 将 data 赋值给 resMes</span></span><br><span class="line">resMes.Data = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">//7. 对 resMes 进行序列化,准备发送</span></span><br><span class="line">data, err = json.Marshal(resMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal fail err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//8. 发送data, 我们将其封装到writePkg函数</span></span><br><span class="line"><span class="comment">//因为使用分层模式(mvc), 我们先创建一个 Transfer 实例, 然后读取</span></span><br><span class="line">tf := &amp;utils.Transfer&#123;</span><br><span class="line">Conn: u.Conn,</span><br><span class="line">&#125;</span><br><span class="line">err = tf.WritePkg(data)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>修改<code>server/main/processor.go</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/server/process"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/server/utils"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Processor <span class="keyword">struct</span> &#123;</span><br><span class="line">Conn net.Conn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个 ServerProcessMes 函数</span></span><br><span class="line"><span class="comment">//功能: 根据客户端发送消息种类不同, 来决定调用哪个函数来处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Processor)</span> <span class="title">ServerProcessMes</span><span class="params">(mes *message.Message)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> mes.Type &#123;</span><br><span class="line"><span class="keyword">case</span> message.LoginMesType:</span><br><span class="line"><span class="comment">//处理登录</span></span><br><span class="line"><span class="comment">//创建一个 UserProcess 实例</span></span><br><span class="line">up := &amp;process.UserProcess&#123;</span><br><span class="line">Conn: p.Conn,</span><br><span class="line">&#125;</span><br><span class="line">err = up.ServerProcessLogin(mes)</span><br><span class="line"><span class="keyword">case</span> message.RegisterMesType:</span><br><span class="line"><span class="comment">//处理注册</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"消息类型不存在, 无法处理..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Processor)</span> <span class="title">Process_main</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//循环的客户端发送的信息</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//这里我们将读取数据包, 直接封装成一个函数 readPkg(), 返回 Message, Err</span></span><br><span class="line"><span class="comment">//创建一个 Transfer 实例完成读包任务</span></span><br><span class="line">tf := &amp;utils.Transfer&#123;</span><br><span class="line">Conn: p.Conn,</span><br><span class="line">&#125;</span><br><span class="line">mes, err := tf.ReadPkg()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端退出, 服务器端也退出..."</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readPkg err="</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">err = p.ServerProcessMes(&amp;mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>修改<code>server/main/main.go</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理客户端的通讯</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">proc</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//延时关闭conn</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里调用总控,创建一个</span></span><br><span class="line">processor := &amp;Processor&#123;</span><br><span class="line">Conn: conn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := processor.Process_main()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端和服务器通讯协程错误=err"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"服务器在 8889 端口监听中..."</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"0.0.0.0:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Listen err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//一旦监听成功, 就等待客户端来链接服务器</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"等待客户端来链接服务器..."</span>)</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Accept err="</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一旦链接成功, 就启动一个协程和客户端保持通讯</span></span><br><span class="line"><span class="keyword">go</span> proc(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤五"><a href="#步骤五" class="headerlink" title="步骤五"></a>步骤五</h5><blockquote><p>  修改客户端代码</p></blockquote><ol><li>示意图如下:</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5xzttl6zaj20pr0htq4v.jpg" alt="image-20220907134930899"></p><ol start="2"><li>先把各个文件放到对应的文件夹[包]</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5y04nr5qaj205p05f3yj.jpg" alt="image-20220907135958775"></p><ol start="3"><li><p>将 server/utils.go 拷贝到 client/utils/utils.go</p></li><li><p>创建了server/process/userProcess.go</p></li></ol><blockquote><p>  说明: 该文件就是在原来的 login.go 做了一个改进，即封装到 UserProcess 结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> process</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/binary"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/client/utils"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/common/message"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserProcess <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//暂时不需要字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给关联一个用户登录的方法</span></span><br><span class="line"><span class="comment">//写一个函数, 完成登录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserProcess)</span> <span class="title">Login</span><span class="params">(userId <span class="keyword">int</span>, userPwd <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 链接到服务器</span></span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:8889"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"net.Dial err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时关闭</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 准备通过 conn 发送消息给服务</span></span><br><span class="line"><span class="keyword">var</span> mes message.Message</span><br><span class="line">mes.Type = message.LoginMesType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 LoginMes 结构体</span></span><br><span class="line"><span class="keyword">var</span> loginMes message.LoginMes</span><br><span class="line">loginMes.UserId = userId</span><br><span class="line">loginMes.UserPwd = userPwd</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 将 loginMes 序列化</span></span><br><span class="line">data, err := json.Marshal(loginMes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 把data 赋值给 mes.Data 字段</span></span><br><span class="line">mes.Data = <span class="keyword">string</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 将 mes 进行序列化操作</span></span><br><span class="line">data, err = json.Marshal(mes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"json.Marshal err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 到这个时候, data 就是我们要发送的信息</span></span><br><span class="line"><span class="comment">// 先把 data 的长度发送给服务器</span></span><br><span class="line"><span class="comment">// 先获取到 data 的长度 =&gt; 转成一个表示长度的 byte 切片</span></span><br><span class="line">pkgLen := <span class="keyword">uint32</span>(<span class="built_in">len</span>(data))</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">binary.BigEndian.PutUint32(buf[:<span class="number">4</span>], pkgLen)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送长度</span></span><br><span class="line">n, err := conn.Write(buf[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">4</span> || err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息本身</span></span><br><span class="line">_, err = conn.Write(data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"conn.Write(bytes) fail"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 休眠 20 秒</span></span><br><span class="line"><span class="comment">// time.Sleep(20 * time.Second)</span></span><br><span class="line"><span class="comment">// fmt.Println("休眠了 20 秒")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Printf("客户端, 发送消息的长度=%d 内容=%s", len(data), string(data))</span></span><br><span class="line"></span><br><span class="line">ft := utils.Transfer&#123;</span><br><span class="line">Conn: conn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理服务器端返回的信息</span></span><br><span class="line">mes, err = ft.ReadPkg()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"readPkg(conn) err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 mes 的Data部分反序列化成 LoginResMes</span></span><br><span class="line"><span class="keyword">var</span> loginResMes message.LoginResMes</span><br><span class="line">err = json.Unmarshal([]<span class="keyword">byte</span>(mes.Data), &amp;loginResMes)</span><br><span class="line"><span class="keyword">if</span> loginResMes.Code == <span class="number">200</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"登录成功"</span>)</span><br><span class="line"><span class="comment">//循环显示登陆成功后的菜单</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">ShowMenu()</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> loginResMes.Code == <span class="number">500</span> &#123;</span><br><span class="line">fmt.Println(loginResMes.Error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中变化的内容如下图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5z7q7ue96j20kf0bi3zh.jpg" alt="image-20220908150825455"></p><ol start="5"><li>创建了server/process/server.go</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> process</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/server/utils"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示登录成功后的界面</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"----------恭喜xxx登录成功----------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"----------1. 显示在线用户列表----------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"----------2. 发送消息----------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"----------3. 信息列表----------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"----------4. 退出系统----------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请选择(1-4):"</span>)</span><br><span class="line"><span class="keyword">var</span> key <span class="keyword">int</span></span><br><span class="line">fmt.Scanf(<span class="string">"%d\n"</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">"显示在线用户列表"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">"发送消息"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">"信息列表"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">fmt.Println(<span class="string">"退出系统"</span>)</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"你输入的选项不正确!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和服务器保持通讯</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServerProcessMes</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="comment">//创建一个 transfer 实例, 不停的读取服务器发送的消息</span></span><br><span class="line">tf := &amp;utils.Transfer&#123;</span><br><span class="line">Conn: conn,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"客户端正在等待读取服务器发送的消息"</span>)</span><br><span class="line">mes, err := tf.ReadPkg()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"tf.ReadPkg err="</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果读取到消息, 又事下一步处理逻辑</span></span><br><span class="line">fmt.Printf(<span class="string">"mes=%v\n"</span>, mes)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中增加的内容如下图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5z7w40abhj20fy0bat9k.jpg" alt="image-20220908151407158"></p><ol start="6"><li>修改 client/main/main.go</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang_study/18-tcp/tcpdemo/client/process"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户ID</span></span><br><span class="line"><span class="keyword">var</span> userId <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户密码</span></span><br><span class="line"><span class="keyword">var</span> userPwd <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//接收用户的选择</span></span><br><span class="line"><span class="keyword">var</span> key <span class="keyword">string</span></span><br><span class="line"><span class="comment">//判断是否继续显示菜单</span></span><br><span class="line"><span class="keyword">var</span> loop = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"--------------------欢迎登录多人聊天系统--------------------"</span>)</span><br><span class="line">fmt.Println(<span class="string">"\t\t\t1 登录聊天室"</span>)</span><br><span class="line">fmt.Println(<span class="string">"\t\t\t2 注册用户"</span>)</span><br><span class="line">fmt.Println(<span class="string">"\t\t\tq 退出系统"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请选择进行的操作[1|2|q]:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v\n"</span>, &amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">fmt.Println(<span class="string">"登录聊天室"</span>)</span><br><span class="line">fmt.Println(<span class="string">"请输入用户的Id:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v\n"</span>, &amp;userId)</span><br><span class="line">fmt.Println(<span class="string">"请输入用户的密码:"</span>)</span><br><span class="line">fmt.Scanf(<span class="string">"%v\n"</span>, &amp;userPwd)</span><br><span class="line"><span class="comment">//完成登录</span></span><br><span class="line"><span class="comment">//1. 创建一个 UserProcess 的实例</span></span><br><span class="line">up := &amp;process.UserProcess&#123;&#125;</span><br><span class="line">up.Login(userId, userPwd)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">fmt.Println(<span class="string">"注册用户"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"q"</span>:</span><br><span class="line">fmt.Println(<span class="string">"退出系统"</span>)</span><br><span class="line">loop = <span class="literal">false</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"输入有误, 请重新输入!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !loop &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中变化的内容如下图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5z7rtyrbpj20ml0mbace.jpg" alt="image-20220908151000190"></p><h4 id="Redis操作"><a href="#Redis操作" class="headerlink" title="Redis操作"></a>Redis操作</h4><h5 id="Redis手动添加用户"><a href="#Redis手动添加用户" class="headerlink" title="Redis手动添加用户"></a>Redis手动添加用户</h5><p>示意图如下</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h605ulllxkj213w0fi418.jpg" alt="image-20220909104859524"></p><p>json数据格式如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"type"</span>:<span class="string">"LoginMes"</span>,<span class="attr">"data"</span>:<span class="string">"&#123;\"userId\":100,\"userPwd\":\"123456\",\"userName\":\"poker\"&#125;"</span>&#125;</span><br></pre></td></tr></table></figure><p>具体redis操作如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset users 100 <span class="string">"&#123;\"userId\":100,\"userPwd\":\"123456\",\"userName\":\"poker\"&#125;"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget users 100</span><br><span class="line"><span class="string">"&#123;\"userId\":100,\"userPwd\":\"123456\",\"userName\":\"poker\"&#125;"</span></span><br></pre></td></tr></table></figure><h5 id="代码实现Redis添加用户"><a href="#代码实现Redis添加用户" class="headerlink" title="代码实现Redis添加用户"></a>代码实现Redis添加用户</h5><ul><li>如输入的用户名密码在 Redis 中存在则登录，否则退出系统，并给出相应的提示信息:</li></ul><ol><li>用户不存在,你也可以重新注册，再登录 </li><li>输入的密码不正确</li></ol><ul><li>首先创建对应的文件</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h606rb47oaj206c04tglk.jpg" alt="image-20220909112028149"></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><blockquote><p>  Redis 是一个NoSql数据库,不是传统的关系型数据库</p><p>  Redis 全程为 REmote Dictionary Server</p><p>  Redis性能非常高,单机能够达到 15w qps, 通常用来做缓存,也可以持久化.</p><p>  Redis是完全开源免费的, 高性能的分布式内存数据库,基于内存运行并支持持久化的NoSql数据库</p></blockquote><p>官网: </p><ul><li><a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></li><li><a href="https://www.redis.cn" target="_blank" rel="noopener">https://www.redis.cn</a></li></ul><h2 id="操作原理图"><a href="#操作原理图" class="headerlink" title="操作原理图"></a>操作原理图</h2><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5ps7nq4brj20tj09q756.jpg" alt="image-20220831112133267"></p><h2 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h2><blockquote><p>  我的笔记本为 MAC OS, 这里只演示 Mac 上安装 Redis 的过程</p></blockquote><p>参考链接: <a href="https://blog.csdn.net/qq_45220508/article/details/122980040" target="_blank" rel="noopener">MAC安装redis的简单方法</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis@6.2</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5psknvovvj20ng0f376x.jpg" alt="image-20220831113403174"></p><p>启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start redis</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pslvv6fcj20dz0163yg.jpg" alt="image-20220831113513479"></p><p>检查端口号<code>6379</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -AaLlnW | grep 6379</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5psmhh15gj20cj01ojrd.jpg" alt="image-20220831113547556"></p><p>客户端访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h2 id="Redis的基本使用"><a href="#Redis的基本使用" class="headerlink" title="Redis的基本使用"></a>Redis的基本使用</h2><p>使用手册参考:<a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis命令参考</a></p><blockquote><p>   说明: Redis 安装好后，默认有 16 个数据库，初始默认使用 0 号库, 编号(index)是 0…15</p></blockquote><ul><li>添加 key-val <strong>[set]</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key1 hello</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>查看当前 redis 的 所有 key <strong>[keys *]</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;key2&quot;</span><br><span class="line">2) &quot;key1&quot;</span><br></pre></td></tr></table></figure><ul><li>获取key对应的值 <strong>[getkey]</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><ul><li>切换 redis 数据库 <strong>[select index]</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get key1</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><ul><li>如何查看当前数据库的key-val数量 <strong>[dbsize]</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key2 imau</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><ul><li>清空当前数据库的key-val和清空所有数据库的 key-val <strong>[flushdb flushall]</strong><ul><li>flushdb =&gt; 清空当前index的数据库</li><li>flushall =&gt; 清空左右index的数据库</li></ul></li></ul><h2 id="Redis-的-Crud-操作"><a href="#Redis-的-Crud-操作" class="headerlink" title="Redis 的 Crud 操作"></a>Redis 的 Crud 操作</h2><h3 id="Redis-的五大数据类型"><a href="#Redis-的五大数据类型" class="headerlink" title="Redis 的五大数据类型"></a>Redis 的五大数据类型</h3><p>Redis 的五大数据类型是: <code>String</code>(字符串) 、<code>Hash</code> (哈希)、<code>List</code>(列表)、<code>Set</code>(集合) 和 <code>zset</code>(sorted set:有序集合)</p><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4><blockquote><p>  string 是 redis 最基本的类型，一个 key 对应一个 value。</p><p>  string 类型是<code>二进制</code>安全的。除普通的字符串外，也可以存放图片等数据。</p><p>  redis 中字符串 value 最大是 <code>512M</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个key和value</span><br><span class="line">127.0.0.1:6379&gt; set address beijing</span><br><span class="line">OK</span><br><span class="line"># 查询指定的key</span><br><span class="line">127.0.0.1:6379&gt; get address</span><br><span class="line">&quot;beijing&quot;</span><br><span class="line"># 删除指定的key</span><br><span class="line">127.0.0.1:6379&gt; del address</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get address</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><ul><li><strong>setex</strong>(set with expire)键秒值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># setex [key] [n秒] [value]</span><br><span class="line"># 超过 n 秒之后,删除这个key</span><br><span class="line">127.0.0.1:6379&gt; setex mess01 10 helloworld</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mess01</span><br><span class="line">&quot;helloworld&quot;</span><br><span class="line">127.0.0.1:6379&gt; get mess01</span><br><span class="line">&quot;helloworld&quot;</span><br><span class="line">127.0.0.1:6379&gt; get mess01</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><ul><li><p><strong>mset</strong>[同时设置一个或多个 key-value 对]</p></li><li><p><strong>mget</strong>[同时获取多个 key-value]</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset m1 hello m2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get m1</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; get m2</span><br><span class="line">&quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; mget m1 m2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br></pre></td></tr></table></figure><h4 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash (哈希)"></a>Hash (哈希)</h4><blockquote><p>  类似 golang 里的 Map</p><p>  Redis hash 是一个键值对集合。var user1 map[string]string</p><p>  Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user1 name poker</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user1 age 25</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset user1 job coder</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hget user1 name</span><br><span class="line">&quot;poker&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget user1 age</span><br><span class="line">&quot;25&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget user1 job</span><br><span class="line">&quot;coder&quot;</span><br><span class="line"></span><br><span class="line"># 查看key中的field个数</span><br><span class="line">127.0.0.1:6379&gt; hlen user2</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hgetall user1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;poker&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;25&quot;</span><br><span class="line">5) &quot;job&quot;</span><br><span class="line">6) &quot;coder&quot;</span><br></pre></td></tr></table></figure><ul><li>hmset(同时设定多个)</li><li>hmget(同时查看多个)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset user2 name jenny age 25 job &quot;good coder &quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget user2 name age job</span><br><span class="line">1) &quot;jenny&quot;</span><br><span class="line">2) &quot;25&quot;</span><br><span class="line">3) &quot;good coder &quot;</span><br></pre></td></tr></table></figure><ul><li>hexists(判定哈希表中key的field是否存在)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists user2 name</span><br><span class="line">(integer) 1</span><br><span class="line"># 0就表示该 field 不存在</span><br><span class="line">127.0.0.1:6379&gt; hexists user2 name1</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h4 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h4><blockquote><p>  列表是简单的字符串列表,按照插入顺序排序,你可以添加一个元素到列表的头部或者尾部</p><p>  List 本质是个链表, List 的元素是有序的，元素的值可以重复</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 从左到右依次传入数据</span><br><span class="line">127.0.0.1:6379&gt; lpush city tinjian beijing shanghai</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange city 0 0</span><br><span class="line">1) &quot;shanghai&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange city 0 1</span><br><span class="line">1) &quot;shanghai&quot;</span><br><span class="line">2) &quot;beijing&quot;</span><br><span class="line"></span><br><span class="line"># 查看所有field元素</span><br><span class="line">127.0.0.1:6379&gt; lrange city 0 -1</span><br><span class="line">1) &quot;shanghai&quot;</span><br><span class="line">2) &quot;beijing&quot;</span><br><span class="line">3) &quot;tinjian&quot;</span><br><span class="line"># 从右到左依次传入数据</span><br><span class="line">127.0.0.1:6379&gt; rpush city shenzhen nanjing</span><br><span class="line">(integer) 5</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange city 0 -1</span><br><span class="line">1) &quot;shanghai&quot;</span><br><span class="line">2) &quot;beijing&quot;</span><br><span class="line">3) &quot;tinjian&quot;</span><br><span class="line">4) &quot;shenzhen&quot;</span><br><span class="line">5) &quot;nanjing&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpop city</span><br><span class="line">&quot;shanghai&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange city 0 -1</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;tinjian&quot;</span><br><span class="line">3) &quot;shenzhen&quot;</span><br><span class="line">4) &quot;nanjing&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpop city</span><br><span class="line">&quot;nanjing&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange city 0 -1</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;tinjian&quot;</span><br><span class="line">3) &quot;shenzhen&quot;</span><br><span class="line"></span><br><span class="line"># 查看key的元素个数</span><br><span class="line">127.0.0.1:6379&gt; llen city</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>特别说明</p><ul><li>List 数据可以从左或右添加数据</li><li>如果 List 的数据全部移除,那么对应的键也会删除</li></ul><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h4><ul><li><p>sadd [添加值]</p></li><li><p>smembers [取出所有值]</p></li><li><p>sismember [判断值是否是成员]</p></li><li><p>srem [删除指定值]</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd emails tom@sohu.com</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"># 判断指定的值是否存在</span><br><span class="line">127.0.0.1:6379&gt; sismember emails tom@sohu.com</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember emails tom1@sohu.com</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd emails shang@sohu.com</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd emails jack@sohu.com</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"># 输出所有值</span><br><span class="line">127.0.0.1:6379&gt; smembers emails</span><br><span class="line">1) &quot;shang@sohu.com&quot;</span><br><span class="line">2) &quot;jack@sohu.com&quot;</span><br><span class="line">3) &quot;tom@sohu.com&quot;</span><br><span class="line"></span><br><span class="line"># 删除指定值</span><br><span class="line">127.0.0.1:6379&gt; srem emails tom@sohu.com</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers emails</span><br><span class="line">1) &quot;shang@sohu.com&quot;</span><br><span class="line">2) &quot;jack@sohu.com&quot;</span><br></pre></td></tr></table></figure><h2 id="Golang-操作-Redis"><a href="#Golang-操作-Redis" class="headerlink" title="Golang 操作 Redis"></a>Golang 操作 Redis</h2><h3 id="安装第三方开源-Redis-库"><a href="#安装第三方开源-Redis-库" class="headerlink" title="安装第三方开源 Redis 库"></a>安装第三方开源 Redis 库</h3><p>使用第三方开源的 Redis 库: <a href="https://github.com/go-redis/redis" target="_blank" rel="noopener">go-redis</a></p><p>安装方式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.切换到当前go文件目录中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.初始化一个 mod 文件</span></span><br><span class="line">go mod init demo01</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.安装 github.com/go-redis/redis</span></span><br><span class="line">go get -u github.com/go-redis/redis</span><br></pre></td></tr></table></figure><p>安装过程碰到了很多莫名其妙的问题,没有来得及记录,有问题及时百度~</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5qvumbdovj205e02mwec.jpg" alt="image-20220901101256283"></p><p><strong>注意:</strong> 官方源码文档中给出的快速使用示例,代码跟引入的包有些出入,因为<code>go-redis</code>版本原因, 有些地方使用方式不同</p><p><strong>注: 以下内容通过<a href="https://pkg.go.dev/github.com/go-redis/redis@v6.15.9+incompatible#Client.HMGet" target="_blank" rel="noopener">官方文档</a>的定义进行的编写</strong></p><h3 id="Set-Get-String字符串操作"><a href="#Set-Get-String字符串操作" class="headerlink" title="Set/Get-String字符串操作"></a>Set/Get-String字符串操作</h3><blockquote><p>  通过 Golang 添加和获取 key-value</p></blockquote><p>在redis中添加两个键值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set car1 baoma</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set car2 aodi</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>快速入门</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//连接本地 redis 数据库</span></span><br><span class="line">rdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">Password: <span class="string">""</span>, <span class="comment">// no password set</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// use default DB</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">defer</span> rdb.Close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 添加一对redis的键值</span></span><br><span class="line"><span class="comment">// 最后一个参数是过期。0表示密钥没有过期时间</span></span><br><span class="line">err := rdb.Set(<span class="string">"test"</span>, <span class="string">"aaa"</span>, <span class="number">0</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出刚刚上面添加的键值</span></span><br><span class="line">val, err := rdb.Get(<span class="string">"test"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"key"</span>, val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出 car1</span></span><br><span class="line">val2, err := rdb.Get(<span class="string">"car1"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"car1 does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"car1"</span>, val2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出 car2</span></span><br><span class="line">val3, err := rdb.Get(<span class="string">"car2"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"car2 does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"car2"</span>, val3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// car3没有添加,所以不存在</span></span><br><span class="line">val4, err := rdb.Get(<span class="string">"car3"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"car3 does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"car3"</span>, val4)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ExampleClient()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5qx5q9q7wj20db01zq2x.jpg" alt="image-20220901105815244"></p><h3 id="MSet-MGet操作-String字符串操作"><a href="#MSet-MGet操作-String字符串操作" class="headerlink" title="MSet/MGet操作-String字符串操作"></a>MSet/MGet操作-String字符串操作</h3><blockquote><p>  MSet/MGet 数据操作数据</p><p>  通过 Golang 对 Redis 操作，一次操作可以 Set / Get 多个 key-val 数据</p></blockquote><p><code>MSet</code>的官方定义如下图, 参数为一个<code>接口类型的切片</code>,我们可以传入一个 <code>string 类型的切片</code>或者使用for循环依次遍历map切片,传入一对键值字符串(我感觉后者更方便管理,代码也更加简洁,一会儿看下面的代码就可以了)</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r1y5vtwpj20dr02p0sq.jpg" alt="image-20220901134358082"></p><p><code>MGet</code>的官方定义如下图, 参数为一个<code>string类型的切片</code>,我们可以传入一个 <code>string 类型的切片</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r2xb1wz3j20e402iwej.jpg" alt="image-20220901141745461"></p><p><code>MGet</code>方法的返回值 <code>*SliceCmd</code>是一个空的结构体(众所周知,空的结构体更加灵活,可以随意调用定义的各种函数),里面已经定义了多个函数,其中<code>Result</code>返回值, 返回的是一个<code>接口切片</code>和<code>error信息</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r1pb1dddj20p00nttb3.jpg" alt="image-20220901133527851"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">rdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">Password: <span class="string">""</span>, <span class="comment">// no password set</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// use default DB</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> rdb.Close()</span><br><span class="line"><span class="comment">//方式一: 可以使用map切片</span></span><br><span class="line">strArr := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">strArr[<span class="string">"animal1"</span>] = <span class="string">"Monkey"</span></span><br><span class="line">strArr[<span class="string">"animal2"</span>] = <span class="string">"Elephant"</span></span><br><span class="line">strArr[<span class="string">"animal3"</span>] = <span class="string">"Tiger"</span></span><br><span class="line"><span class="comment">// 添加redis的键值</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> strArr &#123;</span><br><span class="line">err := rdb.MSet(i, v).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二: 也可以使用string类型的切片</span></span><br><span class="line"><span class="comment">//strArr := []string&#123;"animal1", "Monkey", "animal2", "elephant", "animal3", "tiger"&#125;</span></span><br><span class="line"><span class="comment">// 添加redis的键值</span></span><br><span class="line"><span class="comment">// err := rdb.MSet(strArr).Err()</span></span><br><span class="line"><span class="comment">// if err != nil &#123;</span></span><br><span class="line"><span class="comment">// panic(err)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strArr_key := []string&#123;"animal1", "animal2", "animal3"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key := <span class="keyword">range</span> strArr &#123;</span><br><span class="line"><span class="comment">// 输出刚刚上面添加的键值</span></span><br><span class="line">result, err := rdb.MGet(key).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"this key does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> result &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v=%v\n"</span>, key, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ExampleClient()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r2ummw16j20k903emxb.jpg" alt="image-20220901141510533"></p><h3 id="HSet-HGet-Hash操作"><a href="#HSet-HGet-Hash操作" class="headerlink" title="HSet/HGet-Hash操作"></a>HSet/HGet-Hash操作</h3><blockquote><p>  通过 Golang 对 Redis 操作 Hash 数据类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">rdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">Password: <span class="string">""</span>, <span class="comment">// no password set</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// use default DB</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">defer</span> rdb.Close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//1 HSet 添加hash键值</span></span><br><span class="line">err := rdb.HSet(<span class="string">"userinfo"</span>, <span class="string">"name"</span>, <span class="string">"tom"</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = rdb.HSet(<span class="string">"userinfo"</span>, <span class="string">"age"</span>, <span class="string">"6"</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 HGet 输出hash键值</span></span><br><span class="line">res := <span class="string">""</span></span><br><span class="line">res, err = rdb.HGet(<span class="string">"userinfo"</span>, <span class="string">"name"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"userinfo name does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"userinfo-name"</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err = rdb.HGet(<span class="string">"userinfo"</span>, <span class="string">"age"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"userinfo age does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"userinfo-age"</span>, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ExampleClient()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5qy8xf2mlj20ka02dq30.jpg" alt="image-20220901113555207"></p><h3 id="HMSet-HMGet-Hash操作"><a href="#HMSet-HMGet-Hash操作" class="headerlink" title="HMSet/HMGet-Hash操作"></a>HMSet/HMGet-Hash操作</h3><blockquote><p>  对 hash 数据结构，field-val 是批量放入和读取</p></blockquote><p>根据官方文档, <code>HMSet</code>传入的是一个<code>map切片</code>,我们需要自己定义然后传参即可</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5qylx5w19j20j902jq34.jpg" alt="image-20220901114824427"></p><p><code>MHGet</code>方法传参时,传入的是一个 <code>[]string数组</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5qzsyx3zxj20fg02hdfw.jpg" alt="image-20220901122947344"></p><p><code>HMGet</code>方法的返回值 <code>*SliceCmd</code>是一个空的结构体,里面已经定义了多个函数,其中<code>Result</code>返回值, 返回的是一个<code>接口切片</code>和<code>error信息</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r1pb1dddj20p00nttb3.jpg" alt="image-20220901133527851"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">rdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">Password: <span class="string">""</span>, <span class="comment">// no password set</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// use default DB</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> rdb.Close()</span><br><span class="line">    </span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m[<span class="string">"name"</span>] = <span class="string">"jack"</span></span><br><span class="line">m[<span class="string">"age"</span>] = <span class="string">"7"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 HMSet</span></span><br><span class="line">err := rdb.HMSet(<span class="string">"userinfo1"</span>, m).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 HMGet</span></span><br><span class="line"><span class="comment">// 定义一个string类型切片,指定field值</span></span><br><span class="line">str := []<span class="keyword">string</span>&#123;<span class="string">"name"</span>, <span class="string">"age"</span>&#125;</span><br><span class="line"><span class="comment">// Result返回的是一个 string 类型的 interface 接口</span></span><br><span class="line">result, err := rdb.HMGet(<span class="string">"userinfo1"</span>, str...).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"userinfo1 does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"userinfo1="</span>, result)</span><br><span class="line">fmt.Printf(<span class="string">"result的类型=%T\n"</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环遍历 result ,借助上面定义的 str 输出 userinfo1 的索引与值</span></span><br><span class="line">fmt.Println(<span class="string">"userinfo1的键值内容如下:"</span>)</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> result &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v=%v\n"</span>, str[i], v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ExampleClient()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r1s2cd51j20kf045glt.jpg" alt="image-20220901133806602"></p><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><blockquote><p>  列表中比较常用的指令有: LPush/RPush/LInsert/RInsert/LRange遍历 等</p></blockquote><ul><li>LPush/RPush</li></ul><p>从下图可以得知,<code>values</code>传入的值是一个 <code>接口切片</code>,可以传入任意类型数据,这里我们直接传入任意数量的字符串</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r4auzubbj20hv02h0su.jpg" alt="image-20220901150522051"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r4ch0lilj20hs02naa2.jpg" alt="image-20220901150655299"></p><p>可以使用<code>LRange</code>遍历列表的数据</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r4iz8fa8j20hi02idfx.jpg" alt="image-20220901151310746"></p><ul><li>LInsert/RInsert</li></ul><p>下面图中的定义可能会有人看不懂</p><ul><li>key =&gt; 键值</li><li>op =&gt; after/before</li><li>pivot =&gt; 指定的数据位置</li><li>value =&gt; 需要添加的数组</li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r4vw3ma3j20ij02g74d.jpg" alt="image-20220901152535204"></p><p>举个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdb.LPush(<span class="string">"hobby"</span>,<span class="string">"篮球"</span>)</span><br><span class="line">rdb.LInsert(<span class="string">"hobby"</span>,<span class="string">"before"</span>,<span class="string">"篮球"</span>,<span class="string">"乒乓球"</span>)</span><br></pre></td></tr></table></figure><p>上代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">rdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">Password: <span class="string">""</span>, <span class="comment">// no password set</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// use default DB</span></span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">defer</span> rdb.Close()</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Lpush向列表中添加数据</span></span><br><span class="line">strArr1 := []<span class="keyword">string</span>&#123;<span class="string">"1.唱"</span>, <span class="string">"2.跳"</span>&#125;</span><br><span class="line">err := rdb.LPush(<span class="string">"蔡徐坤的hobby"</span>, strArr1).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rpush向列表中添加数据</span></span><br><span class="line">strArr2 := []<span class="keyword">string</span>&#123;<span class="string">"3.rap"</span>, <span class="string">"4.篮球"</span>&#125;</span><br><span class="line">err = rdb.RPush(<span class="string">"蔡徐坤的hobby"</span>, strArr2).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LRange 读取数据</span></span><br><span class="line">result, err := rdb.LRange(<span class="string">"蔡徐坤的hobby"</span>, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"this key does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"result="</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LInsert 在列表中的指定位置添加数据</span></span><br><span class="line">err = rdb.LInsert(<span class="string">"蔡徐坤的hobby"</span>, <span class="string">"before"</span>, <span class="string">"3.rap"</span>, <span class="string">"鸡你太美"</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RInsert 这里不做演示了,原理同上</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// LRange 读取数据</span></span><br><span class="line">result, err = rdb.LRange(<span class="string">"蔡徐坤的hobby"</span>, <span class="number">0</span>, <span class="number">-1</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"this key does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"result="</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除该键值,方便重复进行调试</span></span><br><span class="line">rdb.Del(<span class="string">"蔡徐坤的hobby"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ExampleClient()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r55in7eoj20kb02dglq.jpg" alt="image-20220901153450512"></p><h3 id="Set-集合操作"><a href="#Set-集合操作" class="headerlink" title="Set-集合操作"></a>Set-集合操作</h3><p><code>SAdd</code>用来向集合中添加键值</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r64q0n6tj20fz02j74c.jpg" alt="image-20220901160841226"></p><p><code>SMembers</code>用来输出集合中的数据</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r65sgz58j20eb02jdfv.jpg" alt="image-20220901160942192"></p><p><code>SIsMember</code> 用于判断一个值在集合中是否存在,从下图可以看出,该方法返回一个<code>*BoolCmd</code></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r60xctkdj20h502oaa4.jpg" alt="image-20220901160501422"></p><p><code>*BoolCmd</code>的<code>Result</code>方法会返回一个<code>bool</code>类型的值</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r63fps4rj20me0o3di0.jpg" alt="image-20220901160726249"></p><p>上代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出集合中的内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Smembers</span><span class="params">(rdb *redis.Client, urls <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">result, err := rdb.SMembers(urls).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"this key does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断集合中某个值是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SisMember</span><span class="params">(rdb *redis.Client, urls <span class="keyword">string</span>, url <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">result, err := rdb.SIsMember(urls, url).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"this key does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算集合的大小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scard</span><span class="params">(rdb *redis.Client, urls <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">result, err := rdb.SCard(<span class="string">"urls"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err == redis.Nil &#123;</span><br><span class="line">fmt.Println(<span class="string">"this key does not exist"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v 的集合大小=%d\n"</span>, urls, result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleClient</span><span class="params">()</span></span> &#123;</span><br><span class="line">rdb := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">Password: <span class="string">""</span>, <span class="comment">// no password set</span></span><br><span class="line">DB:       <span class="number">0</span>,  <span class="comment">// use default DB</span></span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">"rdb的类型为%T\n"</span>, rdb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> rdb.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// SAdd 向无序集合中添加数据</span></span><br><span class="line">err := rdb.SAdd(<span class="string">"urls"</span>, <span class="string">"www.baidu.com"</span>, <span class="string">"www.google.com"</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出集合中的内容</span></span><br><span class="line">res_urls := Smembers(rdb, <span class="string">"urls"</span>)</span><br><span class="line">fmt.Println(<span class="string">"urls="</span>, res_urls)</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算集合大小</span></span><br><span class="line">Scard(rdb, <span class="string">"urls"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断集合中某个值是否存在</span></span><br><span class="line">res_bool := SisMember(rdb, <span class="string">"urls"</span>, <span class="string">"www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">if</span> res_bool &#123; <span class="comment">// 当 res_bool 为 true 时</span></span><br><span class="line">fmt.Println(<span class="string">"www.baidu.com 存在"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"www.baidu.com 不存在"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定值</span></span><br><span class="line">err = rdb.SRem(<span class="string">"urls"</span>, <span class="string">"www.baidu.com"</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"www.baidu.com 已被删除"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断集合中某个值是否存在</span></span><br><span class="line">res_bool = SisMember(rdb, <span class="string">"urls"</span>, <span class="string">"www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">if</span> res_bool &#123; <span class="comment">// 当 res_bool 为 true 时</span></span><br><span class="line">fmt.Println(<span class="string">"www.baidu.com 存在"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"www.baidu.com 不存在"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出集合中的内容</span></span><br><span class="line">res_urls = Smembers(rdb, <span class="string">"urls"</span>)</span><br><span class="line">fmt.Println(<span class="string">"urls="</span>, res_urls)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ExampleClient()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5r7bvmn6sj20kc05hmxj.jpg" alt="image-20220901165008732"></p><h2 id="Redis链接池"><a href="#Redis链接池" class="headerlink" title="Redis链接池"></a>Redis链接池</h2><blockquote><p>  说明: 通过 Golang 对 Redis 操作， 还可以通过 Redis 链接池, 流程如下: </p><p>  1)   事先初始化一定数量的链接，放入到链接池<br>  2)   当 Go 需要操作 Redis 时，直接从 Redis 链接池取出链接即可。</p><p>  2) 这样可以节省临时获取 Redis 链接的时间，从而提高效率</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5s01n74m9j21350bdq49.jpg" alt="image-20220902092338955"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-redis/redis"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个全局变量</span></span><br><span class="line"><span class="keyword">var</span> pool *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">pool = redis.NewClient(</span><br><span class="line">&amp;redis.Options&#123;</span><br><span class="line"><span class="comment">//连接池容量及闲置连接数量</span></span><br><span class="line">PoolSize:     <span class="number">15</span>, <span class="comment">// 连接池最大socket连接数，默认为4倍CPU数， 4 * runtime.NumCPU</span></span><br><span class="line">MinIdleConns: <span class="number">10</span>, <span class="comment">//在启动阶段创建指定数量的Idle连接，并长期维持idle状态的连接数不少于指定数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//超时</span></span><br><span class="line">DialTimeout:  <span class="number">5</span> * time.Second, <span class="comment">//连接建立超时时间，默认5秒。</span></span><br><span class="line">ReadTimeout:  <span class="number">3</span> * time.Second, <span class="comment">//读超时，默认3秒， -1表示取消读超时</span></span><br><span class="line">WriteTimeout: <span class="number">3</span> * time.Second, <span class="comment">//写超时，默认等于读超时</span></span><br><span class="line">PoolTimeout:  <span class="number">4</span> * time.Second, <span class="comment">//当所有连接都处在繁忙状态时，客户端等待可用连接的最大等待时长，默认为读超时+1秒。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闲置连接检查包括IdleTimeout，MaxConnAge</span></span><br><span class="line">IdleCheckFrequency: <span class="number">60</span> * time.Second, <span class="comment">//闲置连接检查的周期，默认为1分钟，-1表示不做周期性检查，只在客户端获取连接时对闲置连接进行处理。</span></span><br><span class="line">IdleTimeout:        <span class="number">5</span> * time.Minute,  <span class="comment">//闲置超时，默认5分钟，-1表示取消闲置超时检查</span></span><br><span class="line">MaxConnAge:         <span class="number">0</span> * time.Second,  <span class="comment">//连接存活时长，从创建开始计时，超过指定时长则关闭连接，默认为0，即不关闭存活时长较长的连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//命令执行失败时的重试策略</span></span><br><span class="line">MaxRetries:      <span class="number">0</span>,                      <span class="comment">// 命令执行失败时，最多重试多少次，默认为0即不重试</span></span><br><span class="line">MinRetryBackoff: <span class="number">8</span> * time.Millisecond,   <span class="comment">//每次计算重试间隔时间的下限，默认8毫秒，-1表示取消间隔</span></span><br><span class="line">MaxRetryBackoff: <span class="number">512</span> * time.Millisecond, <span class="comment">//每次计算重试间隔时间的上限，默认512毫秒，-1表示取消间隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可自定义连接函数</span></span><br><span class="line">Dialer: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line">netDialer := &amp;net.Dialer&#123;</span><br><span class="line">Timeout:   <span class="number">5</span> * time.Second,</span><br><span class="line">KeepAlive: <span class="number">5</span> * time.Minute,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> netDialer.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:6379"</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//钩子函数</span></span><br><span class="line"><span class="comment">//仅当客户端执行命令时需要从连接池获取连接时，如果连接池需要新建连接时则会调用此钩子函数</span></span><br><span class="line">OnConnect: <span class="function"><span class="keyword">func</span><span class="params">(conn *redis.Conn)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"conn=%v\n"</span>, conn)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 先从 pool 取出一个链接</span></span><br><span class="line">err := pool.Set(<span class="string">"user1"</span>, <span class="string">"poker"</span>, <span class="number">0</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err := pool.Get(<span class="string">"user1"</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"result="</span>, result)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5s37bwsboj20nr022aa6.jpg" alt="image-20220902111256486"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux运维常见问题</title>
      <link href="/2022/05/01/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/01/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gixjr757h0j30sg0lc0tx.jpg" alt="linux_tubiao" style="zoom:67%;"><a id="more"></a><p>面试题可以参考:<a href="https://blog.csdn.net/weixin_45548465/article/details/104986399" target="_blank" rel="noopener">面试题总结</a></p><h1 id="查看系统相关信息"><a href="#查看系统相关信息" class="headerlink" title="查看系统相关信息"></a>查看系统相关信息</h1><h2 id="查看网卡流量"><a href="#查看网卡流量" class="headerlink" title="查看网卡流量"></a>查看网卡流量</h2><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@3 ~]# watch ifconfig eth0</span><br><span class="line"></span><br><span class="line">Every 2.0s: ifconfig eth0                         Sun May  1 21:53:10 2022</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.2.3.101  netmask 255.255.255.0  broadcast 10.2.3.255</span><br><span class="line">        inet6 fe80::546f:77ff:fe6f:78  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 56:6f:77:6f:00:78  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 980997  bytes 63958819 (60.9 MiB)</span><br><span class="line">        RX errors 0  dropped 140820  overruns 0  frame 0</span><br><span class="line">        TX packets 109994  bytes 6171909 (5.8 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h3 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ta05y5ijj21440aowhm.jpg" alt="image-20220501223228884"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@3 ~]# dstat</span><br><span class="line">You did not select any stats, using -cdngy by default.</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  0   0 100   0   0   0|1277B 1515B|   0     0 |   0     0 |  54    56 </span><br><span class="line">  0   0 100   0   0   0|   0     0 | 485B  130B|   0     0 |  95   103 </span><br><span class="line">  0   0 100   0   0   0|   0     0 | 348B  898B|   0     0 |  84   109 </span><br><span class="line">  0   0 100   0   0   0|   0     0 | 449B  370B|   0     0 |  93   110 </span><br><span class="line">  0   0 100   0   0   0|   0     0 | 450B  370B|   0     0 |  84    91 </span><br><span class="line">  0   0 100   0   0   0|   0     0 | 467B  370B|   0     0 |  90   101 </span><br><span class="line">  0   0 100   0   0   0|   0     0 | 306B  370B|   0     0 |  72    95 q</span><br><span class="line">  0   0 100   0   0   0|   0     0 | 501B  740B|   0     0 |  69    92 </span><br><span class="line">  0   0 100   0   0   0|   0   345k| 186B  130B|   0     0 |  78   101 </span><br><span class="line">  0   0 100   0   0   0|   0     0 | 485B  370B|   0     0 |  70    90</span><br></pre></td></tr></table></figure><h3 id="sysstat"><a href="#sysstat" class="headerlink" title="sysstat"></a>sysstat</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1t9yzafvnj21fs0fsjvu.jpg" alt="image-20220501223121263"></p><blockquote><p>  此命令根据参数的不同,可以查看系统不同的信息,详情请见:<a href="https://linux.cn/article-4028-1.html" target="_blank" rel="noopener">https://linux.cn/article-4028-1.html</a></p><p>  也可以参考百度文库:<a href="https://wenku.baidu.com/view/e89049fdcd2f0066f5335a8102d276a2002960e6.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/e89049fdcd2f0066f5335a8102d276a2002960e6.html</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@3 ~]# yum -y install sysstat</span><br><span class="line">[root@3 ~]# sar -n DEV 1 2// -n DEV表示查看网络信息,1表示一秒一次,2表示一共两次</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (3.101-CentOS7.6) 05/01/2022 _x86_64_(8 CPU)</span><br><span class="line"></span><br><span class="line">09:59:51 PM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">09:59:52 PM      eth0      6.00      0.00      0.42      0.00      0.00      0.00      0.00</span><br><span class="line">09:59:52 PM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">09:59:52 PM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">09:59:53 PM      eth0      6.00      1.00      0.36      0.19      0.00      0.00      0.00</span><br><span class="line">09:59:53 PM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line">Average:        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">Average:         eth0      6.00      0.50      0.39      0.09      0.00      0.00      0.00</span><br><span class="line">Average:           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1t9rze7sbj216u0joac7.jpg" alt="image-20220501222435466"></p><h3 id="cat直接查看"><a href="#cat直接查看" class="headerlink" title="cat直接查看"></a>cat直接查看</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1t9yf5lrdj21yi06a0ut.jpg" alt="image-20220501223048558"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@3 ~]# cat /proc/net/dev</span><br><span class="line">Inter-|   Receive                                                |  Transmit</span><br><span class="line"> face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed</span><br><span class="line">  eth0: 95970470  988296    0 141200    0     0          0         0  6464566  114062    0    0    0     0       0          0</span><br><span class="line">    lo:  336200    6724    0    0    0     0          0         0   336200    6724    0    0    0     0       0          0</span><br></pre></td></tr></table></figure><p>proc/net/dev中每一项的含义是：</p><ul><li><p>bytes: The total number of bytes of data transmitted or received by the interface.（接口发送或接收的数据的总字节数）</p></li><li><p>packets: The total number of packets of data transmitted or received by the interface.（接口发送或接收的数据包总数）</p></li><li><p>errs: The total number of transmit or receive errors detected by the device driver.（由设备驱动程序检测到的发送或接收错误的总数）</p></li><li><p>drop: The total number of packets dropped by the device driver.（设备驱动程序丢弃的数据包总数）</p></li><li><p>fifo: The number of FIFO buffer errors.（FIFO缓冲区错误的数量）</p></li><li><p>frame: The number of packet framing errors.（分组帧错误的数量）</p></li><li><p>colls: The number of collisions detected on the interface.（接口上检测到的冲突数）</p></li><li><p>compressed: The number of compressed packets transmitted or received by the device driver. (This - - appears to be unused in the 2.2.15 kernel.)（设备驱动程序发送或接收的压缩数据包数）</p></li><li><p>carrier: The number of carrier losses detected by the device driver.（由设备驱动程序检测到的载波损耗的数量）</p></li><li><p>multicast: The number of multicast frames transmitted or received by the device driver.（设备驱动程序发送或接收的多播帧数）</p></li></ul><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><h3 id="查看进程已运行时间"><a href="#查看进程已运行时间" class="headerlink" title="查看进程已运行时间"></a>查看进程已运行时间</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1tan27h2uj21dn0u0wo9.jpg" alt="image-20220501225429123"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@3 ~]# ps -eo pid,lstart,etime,command </span><br><span class="line">  PID                  STARTED     ELAPSED COMMAND</span><br><span class="line">    1 Fri Apr 29 14:00:04 2022  2-08:53:16 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">    2 Fri Apr 29 14:00:04 2022  2-08:53:16 [kthreadd]</span><br><span class="line">    3 Fri Apr 29 14:00:04 2022  2-08:53:16 [ksoftirqd/0]</span><br><span class="line">    5 Fri Apr 29 14:00:04 2022  2-08:53:16 [kworker/0:0H]</span><br><span class="line">    6 Fri Apr 29 14:00:04 2022  2-08:53:16 [kworker/u32:0]</span><br><span class="line">    7 Fri Apr 29 14:00:04 2022  2-08:53:16 [migration/0]</span><br><span class="line">    8 Fri Apr 29 14:00:04 2022  2-08:53:16 [rcu_bh]</span><br></pre></td></tr></table></figure><h3 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># processes  进程管理</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#ps查看当前系统执行的线程列表，进行瞬间状态，不是连续状态，连续状态需要使用top名称查看  更多常用参数请使用 man ps查看</span></span></span><br><span class="line">ps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示所有进程详细信息</span></span></span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#-u 显示某个用户的进程列表</span></span></span><br><span class="line">ps -f -u www-data </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -C 通过名字或者命令搜索进程</span></span></span><br><span class="line">ps -C apache2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># --sort  根据进程cpu使用率降序排列，查看前5个进程  -pcpu表示降序  pcpu升序</span></span></span><br><span class="line">ps aux --sort=-pcpu | head -5 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#-f 用树结构显示进程的层次关系，父子进程情况下</span></span></span><br><span class="line">ps -f --forest -C apache2 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示一个父进程的所有子进程</span></span></span><br><span class="line">ps -o pid,uname,comm -C apache2</span><br><span class="line">ps --ppid 2359 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示一个进程的所有线程  -L 参数</span></span></span><br><span class="line">ps -p 3150 -L </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示进程的执行时间 -o参数</span></span></span><br><span class="line">ps -e -o pid,comm,etime </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#watch命令可以用来实时捕捉ps显示进程</span></span></span><br><span class="line">watch -n 1 'ps -e -o pid,uname,cmd,pmem,pcpu --sort=-pmem,-pcpu | head -15' </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#jobs 查看后台运行的进程  jobs命令执行的结果，＋表示是一个当前的作业，减号表是是一个当前作业之后的一个作业，jobs -l选项可显示所有任务的PID,jobs的状态可以是running, stopped, Terminated,但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识；也就是说，jobs命令显示的是当前shell环境中所起的后台正在运行或者被挂起的任务信息</span></span></span><br><span class="line">jobs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看后台运营的进程号</span></span></span><br><span class="line">jobs -p</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看现在被终止或者退出的进程号</span></span></span><br><span class="line">jobs -n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#kill命令 终止一个前台进程可以使用Ctrl+C键   kill  通过top或者ps获取进程id号  kill [-s 信号 | -p ] [ -a ] 进程号 ...</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。关闭进程号12的进程</span></span></span><br><span class="line">kill 12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#等同于在前台运行PID为123的进程时按下Ctrl+C键</span></span></span><br><span class="line">kill -2 123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#如果任无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程  </span></span></span><br><span class="line">kill -9 123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#列出所有信号名称</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#HUP    1    终端断线</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#INT     2    中断（同 Ctrl + C）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#QUIT    3    退出（同 Ctrl + \）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#TERM   15    终止</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#KILL    9    强制终止</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#CONT   18    继续（与STOP相反， fg/bg命令）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#STOP    19    暂停（同 Ctrl + Z）</span></span></span><br><span class="line">kill -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#得到指定信号的数值</span></span></span><br><span class="line">kill -l KILL</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#杀死指定用户所有进程</span></span></span><br><span class="line">kill -u peidalinux</span><br><span class="line">kill -9 $(ps -ef | grep peidalinux) </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#将后台中的命令调至前台继续运行  将进程123调至前台执行</span></span></span><br><span class="line">fg 123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#将一个在后台暂停的命令，变成继续执行</span></span></span><br><span class="line">bg  123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思  下面输出被重定向到myout.file文件中</span></span></span><br><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#at：计划任务，在特定的时间执行某项工作，在特定的时间执行一次。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 格式：at HH:MM YYYY-MM-DD //HH（小时）:MM（分钟） YYYY（年）-MM（月份）-DD（日）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#HH[am pm]+D(天) days //HH（小时）[am（上午）pm（下午）]+days（天）</span></span></span><br><span class="line">at 12:00（时间） //at命令设定12:00执行一项操作</span><br><span class="line"><span class="meta">#</span><span class="bash">at&gt;useradd aaa //在at命令里设定添加用户aaa</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ctrl+d //退出at命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tail -f /etc/passwd //查看/etc/passwd文件后十行是否增加了一个用户aaa</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务。</span></span></span><br><span class="line">atq</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动计划任务后，如果不想启动设定好的计划任务可以使用atrm命令删除。</span></span></span><br><span class="line">atrm 1 //删除计划任务1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#pstree命令：列出当前的进程，以及它们的树状结构  格式：pstree [选项] [pid|user]</span></span></span><br><span class="line">pstree</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#nice命令：改变程序执行的优先权等级 应用程序优先权值的范围从-20～19，数字越小，优先权就越高。一般情况下，普通应用程序的优先权值（CPU使用权值）都是0，如果让常用程序拥有较高的优先权等级，自然启动和运行速度都会快些。需要注意的是普通用户只能在0～19之间调整应用程序的优先权值，只有超级用户有权调整更高的优先权值（从-20～19）。</span></span></span><br><span class="line">nice [-n &lt;优先等级&gt;][--help][--version][命令]</span><br><span class="line">nice -n 5 ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#sleep命令：使进程暂停执行一段时间</span></span></span><br><span class="line">date;sleep 1m;date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#renice命令 renice命令允许用户修改一个正在运行进程的优先权。利用renice命令可以在命令执行时调整其优先权。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#其中，参数number与nice命令的number意义相同。（1） 用户只能对自己所有的进程使用renice命令。（2） root用户可以在任何进程上使用renice命令。（3） 只有root用户才能提高进程的优先权</span></span></span><br><span class="line">renice -5 -p 5200  #PID为5200的进程nice设为-5 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#pmap命令用于显示一个或多个进程的内存状态。其报告进程的地址空间和内存状态信息 #pmap PID </span></span></span><br><span class="line">pmap 20367</span><br></pre></td></tr></table></figure><h2 id="查看Linux系统每个IP的连接数"><a href="#查看Linux系统每个IP的连接数" class="headerlink" title="查看Linux系统每个IP的连接数"></a>查看Linux系统每个IP的连接数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | awk '/^tcp/&#123;print $5&#125;' | awk -F: '&#123;print $1&#125;' | sort | uniq -c | sort -nr</span><br></pre></td></tr></table></figure><h2 id="awk数量统计"><a href="#awk数量统计" class="headerlink" title="awk数量统计"></a>awk数量统计</h2><blockquote><p>   统计Apache/Nginx日志中某一天不同IP的访问量　&lt;统计日志&gt;</p><p>  例如: awk ‘{a[$1]++}END{for(i in a){printf(“%d\t%s\n”,a[i],i)}}’ access.log | sort -nr | head -5</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@test nginx_log]# grep '07/Aug/2012' access.log |awk '&#123;a[$1]++&#125; END&#123;for(i in a)&#123;print i,a[i]&#125; &#125;' |sort -k2 -rn |head</span><br><span class="line">222.130.129.42 5761</span><br><span class="line">123.126.51.94 988</span><br><span class="line">123.126.68.22 588</span><br><span class="line">123.114.46.141 418</span><br><span class="line">61.135.249.218 368</span><br><span class="line">110.75.173.162 330</span><br><span class="line">110.75.173.163 327</span><br><span class="line">110.75.173.161 321</span><br><span class="line">110.75.173.160 319</span><br><span class="line">110.75.173.164 314</span><br></pre></td></tr></table></figure><ul><li>相关解释</li></ul><blockquote><ol><li>{a[$1]++} 对每行内容，以第一个字段（估计就是IP地址吧）为数组下标进行计数。若遇第一个字段相同的情况，计数累加。用于统计各个IP地址出现的次数。</li><li>END{for(i in a){printf(“%d\t%s\n”,a[i],i)}}  对数组中的每个下标，打印最终统计次数及IP地址，中间以TAB分隔。</li><li>sort -nr  由于之前的打印是次数在前，所以这里可以用sort按数字由大到小排序</li><li>head -5 取前5个，即出现次数最多的（访问频率最高的）</li></ol></blockquote><h2 id="查看inode信息"><a href="#查看inode信息" class="headerlink" title="查看inode信息"></a>查看inode信息</h2><blockquote><p>  除了文件本身的文件名称之外,文件所有的信息都在inode中保存.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看文件的inode信息</span></span><br><span class="line">[root@3 ~]# stat /etc/passwd</span><br><span class="line">  File: ‘/etc/passwd’</span><br><span class="line">  Size: 1047      Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768dInode: 67498799    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: system_u:object_r:passwd_file_t:s0</span><br><span class="line">Access: 2022-05-02 14:01:01.743000000 +0800</span><br><span class="line">Modify: 2021-05-25 18:03:10.665000000 +0800</span><br><span class="line">Change: 2021-05-25 18:03:10.669000000 +0800</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件的inode号码</span></span><br><span class="line">[root@3 ~]# ls -i /etc/passwd</span><br><span class="line">67498799 /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a>性能相关</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看当前系统load</span></span><br><span class="line">uptime</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统状态和每个进程的系统资源使用状况</span></span><br><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可视化显示CPU的使用状况</span></span><br><span class="line">htop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看每个CPU的负载信息</span></span><br><span class="line">mpstat -P ALL 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">每隔1秒查看磁盘IO的统计信息</span></span><br><span class="line">iostat -xkdz 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">每隔一秒查看虚拟内存的使用信息</span></span><br><span class="line">vmstat 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看内存使用统计信息</span></span><br><span class="line">free</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看网络使用信息</span></span><br><span class="line">nicstat -z 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">类似vmstat的显示优化的工具</span></span><br><span class="line">dstat 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统活动状态，比如系统分页统计，块设备IO统计等</span></span><br><span class="line">sar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">网络连接状态查看</span></span><br><span class="line">netstat -s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进程资源使用信息查看</span></span><br><span class="line">pidstat 1</span><br><span class="line">pidstat -d 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看某个进程的系统调用信息 -p后面是进程id，-tttT 进程系统后的系统调用时间</span></span><br><span class="line">strace -tttT -p 12670</span><br><span class="line"><span class="meta">#</span><span class="bash">统计IO设备输入输出的系统调用信息</span></span><br><span class="line">strace -c dd if=/dev/zero of=/dev/null bs=512 count=1024k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">tcpdump 查看网络数据包</span></span><br><span class="line">tcpdump -nr /tmp/out.tcpdump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">块设备的读写事件信息统计</span></span><br><span class="line">btrace /dev/sdb </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">iotop查看某个进程的IO操作统计信息</span></span><br><span class="line">iotop -bod5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">slabtop 查看内核 slab内存分配器的使用信息</span></span><br><span class="line">slabtop -sc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">系统参数设置</span></span><br><span class="line">sysctl -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">系统性能指标统计信息</span></span><br><span class="line">perf stat gzip file1</span><br><span class="line"><span class="meta">#</span><span class="bash">系统cpu活动状态查看</span></span><br><span class="line">perf record -a -g -F 997 sleep 10</span><br></pre></td></tr></table></figure><h2 id="磁盘IO检查"><a href="#磁盘IO检查" class="headerlink" title="磁盘IO检查"></a>磁盘IO检查</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#iostat是查看磁盘活动统计情况</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示所有设备负载情况 r/s:  每秒完成的读 I/O 设备次数。即 rio/s；w/s:  每秒完成的写 I/O 设备次数。即 wio/s等</span></span></span><br><span class="line">iostat </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#每隔2秒刷新磁盘IO信息，并且每次显示3次</span></span></span><br><span class="line">iostat 2 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示某个磁盘的IO信息</span></span><br><span class="line">iostat -d sda1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示tty和cpu信息</span></span></span><br><span class="line">iostat -t</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#以M为单位显示磁盘IO信息</span></span></span><br><span class="line">iostat -m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看TPS和吞吐量信息  kB_read/s：每秒从设备（drive expressed）读取的数据量；kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；kB_read：读取的总数据量；kB_wrtn：写入的总数量数据量；</span></span></span><br><span class="line">iostat -d -k 1 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看设备使用率（%util）、响应时间（await）</span></span><br><span class="line">iostat -d -x -k 1 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看CPU状态</span></span><br><span class="line">iostat -c 1 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">统计进程(pid)的<span class="built_in">stat</span>,进程的<span class="built_in">stat</span>自然包括进程的IO状况</span></span><br><span class="line">pidstat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">只显示IO</span></span><br><span class="line">pidstat -d  1 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-d IO 信息,-r 缺页及内存信息-u CPU使用率-t 以线程为统计单位1  1秒统计一次</span></span><br><span class="line">pidstat -u -r -d -t 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">文件级IO分析,查看当前文件由哪些进程打开</span></span><br><span class="line">lsof   </span><br><span class="line">ls /proc/pid/fd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">利用 sar 报告磁盘 I/O 信息DEV 正在监视的块设备 tps 每秒钟物理设备的 I/O 传输总量 rd_sec/s 每秒从设备读取的扇区数量 wr_sec/s 每秒向设备写入的扇区数量 avgrq-sz I/O 请求的平均扇区数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">avgqu-sz I/O 请求的平均队列长度 await I/O 请求的平均等待时间，单位为毫秒 svctm I/O 请求的平均服务时间，单位为毫秒 %util I/O 请求所占用的时间的百分比，即设备利用率</span></span><br><span class="line">sar -pd 10 3 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">iotop  top的io版</span></span><br><span class="line">iotop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看页面缓存信息 其中的Cached 指用于pagecache的内存大小（diskcache-SwapCache）。随着写入缓存页，Dirty 的值会增加 一旦开始把缓存页写入硬盘,Writeback的值会增加直到写入结束。</span></span><br><span class="line">cat /proc/meminfo </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看有多少个pdflush进程 Linux 用pdflush进程把数据从缓存页写入硬盘</span></span><br><span class="line"><span class="meta">#</span><span class="bash">pdflush的行为受/proc/sys/vm中的参数的控制/proc/sys/vm/dirty_writeback_centisecs (default 500): 1/100秒, 多长时间唤醒pdflush将缓存页数据写入硬盘。默认5秒唤醒2个（更多个）线程。如果wrteback的时间长于dirty_writeback_centisecs的时间，可能会出问题</span></span><br><span class="line">cat /proc/sys/vm/nr_pdflush_threads</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看I/O 调度器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">调度算法</span></span><br><span class="line"><span class="meta">#</span><span class="bash">noop anticipatory deadline [cfq] </span></span><br><span class="line"><span class="meta">#</span><span class="bash">deadline :    deadline 算法保证对既定的IO请求以最小的延迟时间。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">anticipatory：有个IO发生后，如果又有进程请求IO，则产生一个默认6ms猜测时间，猜测下一个进程请求IO是干什么。这对于随机读取会造成较大的延时。对数据库应用很糟糕，而对于Web Server等则会表现不错。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cfq:        对每个进程维护一个IO队列，各个进程发来的IO请求会被cfq以轮循方式处理，对每一个IO请求都是公平。适合离散读的应用。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">noop:        对所有IO请求都用FIFO队列形式处理。默认IO不会存在性能问题。</span></span><br><span class="line">cat /sys/block/[disk]/queue/scheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">改变IO调度器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> deadline &gt; /sys/block/sdX/queue/scheduler</span></span><br><span class="line"><span class="meta">#</span><span class="bash">提高调度器请求队列的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 4096 &gt; /sys/block/sdX/queue/nr_requests</span></span><br></pre></td></tr></table></figure><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>进程：<ul><li>是系统进行资源分配和调度的一个独立单位.</li><li>是程序的一次执行，每个进程都有自己的地址空间、内存、数据栈及其他辅助记录运行轨迹的数据</li></ul></li><li>线程：<ul><li>是进程的一个实体，是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位</li><li>所有的线程运行在同一个进程中，共享相同的运行资源和环境</li><li>线程一般是并发执行的，使得实现了多任务的并行和数据共享。</li></ul></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>（1）通常在一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。<br>（2）线程和进程的区别在于，子进程和父进程有不同的代码和数据空间，而多个线程则共享数据空间，每个线程有自己的执行堆栈和程序计数器为其执行上下文。多线程主要是为了节约CPU时间，发挥利用，根据具体情况而定。线程的运行中需要使用计算机的内存资源和CPU。<br>（3）进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。<br>（4）线程的上下文切换远大于进程间上下文切换的速度。<br>（5）进程是不可执行的实体，程序是一个没有生命的实体，只有当处理器赋予程序生命时，它才能成为一个活动的实体，我们称其为进程。</p><h3 id="进程和线程的关系"><a href="#进程和线程的关系" class="headerlink" title="进程和线程的关系"></a>进程和线程的关系</h3><p>（1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。<br>（2）资源分配给进程，同一进程的所有线程共享该进程的所有资源。<br>（3）处理机分给线程，即真正在处理机上运行的是线程。<br>（4）线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。线程是指进程内的一个执行单元,也是进程内的可调度实体. </p><h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><p>（1）调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位<br>（2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行<br>（3）拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源.<br>（4）系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。</p><h2 id="软链接与硬链接的区别"><a href="#软链接与硬链接的区别" class="headerlink" title="软链接与硬链接的区别"></a>软链接与硬链接的区别</h2><ol><li>路径</li></ol><ul><li>软链接: 必须是绝对路径</li><li>硬链接: 可以是相对路径,也可以是绝对路径</li></ul><ol start="2"><li>权限</li></ol><ul><li>软链接: 链接文件权限永远是 777</li><li>硬链接: 跟源文件权限一致</li></ul><ol start="3"><li>变更源文件</li></ol><ul><li>软链接: 不可以删除与移动源文件</li><li>硬链接: 可以删除与移动源文件</li></ul><ol start="4"><li>inode数量</li></ol><ul><li>软链接: inode数量与源文件不通</li><li>硬链接: inode数量与源文件相同</li></ul><ol start="5"><li>文件与目录</li></ol><ul><li>软链接: 对目录与文件都生效</li><li>硬链接: 只对文件生效</li></ul><ol start="6"><li>跨文件系统</li></ol><ul><li>软链接: 可以跨文件系统</li><li>硬链接: 不可以跨文件系统</li></ul><h2 id="cookie与session的区别："><a href="#cookie与session的区别：" class="headerlink" title="cookie与session的区别："></a>cookie与session的区别：</h2><blockquote><p>   cookie数据保存在客户端，session数据保存在服务器端。</p></blockquote><p>session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。存储在服务器的数据会更加的安全，不容易被窃取。但存储在服务器也有一定的弊端，就是会占用服务器的资源，但现在服务器已经发展至今，一些session信息还是绰绰有余的。</p><h2 id="CDN访问流程"><a href="#CDN访问流程" class="headerlink" title="CDN访问流程"></a>CDN访问流程</h2><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h213m79jt0j20ug0iidhc.jpg" alt="image-20220508165559673" style="zoom:50%;"><p>①当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</p><p>②CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</p><p>③用户向CDN的全局负载均衡设备发起内容URL访问请求。</p><p>④CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</p><p>⑤区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</p><p>⑥全局负载均衡设备把服务器的IP地址返回给用户。</p><p>⑦用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</p><p>　　DNS服务器根据用户IP地址，将域名解析成相应节点的缓存服务器IP地址，实现用户就近访问。使用CDN服务的网站，只需将其域名解析权交给CDN的GSLB设备，将需要分发的内容注入CDN，就可以实现内容加速了。</p><h2 id="进程间如何通信"><a href="#进程间如何通信" class="headerlink" title="进程间如何通信"></a>进程间如何通信</h2><table><thead><tr><th><strong>通信方法</strong></th><th><strong>无法介于内核态与用户态的原因</strong></th></tr></thead><tbody><tr><td>管道（不包括命名管道）</td><td>局限于父子进程间的通信。</td></tr><tr><td>消息队列</td><td>在硬、软中断中无法无阻塞地接收数据。</td></tr><tr><td>信号量</td><td>无法介于内核态和用户态使用。</td></tr><tr><td>共享内存</td><td>需要信号量辅助，而信号量又无法使用。</td></tr></tbody></table><h2 id="什么是rootkit"><a href="#什么是rootkit" class="headerlink" title="什么是rootkit"></a>什么是rootkit</h2><p>入侵者入侵后往往会进行清理脚印和留后门等工作，最常使用的后门创建工具就是rootkit。<br>不要被名字所迷惑，这个所谓的“rootkit”可不是给超级用户root用的，它是入侵者在入侵了一台主机后，用来做创建后门并加以伪装用的程序包。这个程序包里通常包括了日志清理器，后门等程序。同时，程序包里通常还带有一些伪造的ps、ls、who、w、netstat等原本属于系统本身的程序。这样的话，程序员在试图通过这些命令查询系统状况的时候，就无法通过这些假的系统程序发觉入侵者的行踪。</p><p>在一些黑客组织中,rootkit (或者backdoor) 是一个非常感兴趣的话题。<br>各种不同的rootkit被开发并发布在internet上。在这些rootkit之中, LKM尤其被人关注, 因为它是利用现代操作系统的模块技术。作为内核的一部分运行,这种rootkit将会越来越比传统技术更加强大更加不易被发觉。一旦被安装运行到目标机器上, 系统就会完全被控制在hacker手中了。甚至系统管理员根本找不到安全隐患的痕迹, 因为他们不能再信任它们的操作系统了。</p><p>后门程序的目的就是甚至系统管理员企图弥补系统漏洞的时候也可以给hacker系统的访问权限。</p><h2 id="什么是蜜罐"><a href="#什么是蜜罐" class="headerlink" title="什么是蜜罐"></a>什么是蜜罐</h2><p>蜜罐技术本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，了解攻击方所使用的工具与方法，推测攻击意图和动机，能够让防御方清晰地了解他们所面对的安全威胁，并通过技术和管理手段来增强实际系统的安全防护能力。</p><p>蜜罐好比是情报收集系统。蜜罐好像是故意让人攻击的目标，引诱黑客前来攻击。所以攻击者入侵后，你就可以知道他是如何得逞的，随时了解针对服务器发动的最新的攻击和漏洞。还可以通过窃听黑客之间的联系，收集黑客所用的种种工具，并且掌握他们的社交网络。</p><h2 id="Linux中什么是Watchdog"><a href="#Linux中什么是Watchdog" class="headerlink" title="Linux中什么是Watchdog"></a>Linux中什么是Watchdog</h2><p>Watchdog在实现上可以是硬件电路也可以是软件定时器，能够在系统出现故障时自动重新启动系统。在Linux 内核下, watchdog的基本工作原理是：当watchdog启动后(即/dev/watchdog 设备被打开后)，如果在某一设定的时间间隔内/dev/watchdog没有被执行写操作, 硬件watchdog电路或软件定时器就会重新启动系统</p><h2 id="访问一个网站的流程"><a href="#访问一个网站的流程" class="headerlink" title="访问一个网站的流程"></a>访问一个网站的流程</h2><p>用户输入网站按回车， 查找本地缓存，如果有就打开页面，如果没有，利用DNS做域名解析，递归查询，一级一级的向上提交查询请求，知道查询到为止<br>HOSTS表 –&gt; 本地DNS –&gt;上层DNS(包括根DNS)</p><p>经过了DNS解析，知道了网站的IP地址，然后建立tcp三次握手; 建立请求后，发送请求报文，默认请求的是index.html</p><p>传送完毕，断开连接</p><h2 id="三次握手，四次挥手"><a href="#三次握手，四次挥手" class="headerlink" title="三次握手，四次挥手"></a>三次握手，四次挥手</h2><p><strong><em>三次握手</em></strong></p><ol><li>由客户端(用户)发送建立TCP连接的请求报文，其中报文中包含<code>seq</code>序列号，是由发送端随机生成的。并且还将报文中<code>SYN</code>字段置为 <strong>1</strong>，表示需要建立TCP连接请求。 </li><li>服务端(就是百度服务器)会回复客户端(用户)发送的TCP连接请求报文，其中包含<code>seq</code>序列号，也是由回复端随机生成的， 并且将回复报文的SYN字段置1，而且会产生<code>ACK</code>验证字段，ACK 验证字段数值是在客户端发过来的<code>seq</code>序列号基础上加 <strong>1</strong> 进行回复: 并且还会回复ack确认控制字段，以便客户端收到信息时，知晓自己的TCP建立请求已得到了确认。</li><li>客户端收到服务端发送的TCP建立请求后，会使自己的原有序列号加 <strong>1</strong> 进行再次发送序列号， 并且再次回复<code>ACK</code>验证请求，在B端发送过来的<code>seq</code>基础上加1，进行回复; 同时也会回复 ack 确认控制字段， 以便B收到信息时，知晓自己的TCP建立请求已经得到了确认。</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6k5rk6g3xj210e0l6769.jpg" alt="image-20220926175721947"></p><p><strong><em>四次挥手*</em></strong></p><p><em>*第一次挥手:</em> </p><p>Client 发送一个 FIN，用来关闭 Client 到 Server 的数据传送，Client 进入 FIN_WAIT_1 状态。 </p><p><em>第二次挥手:</em> </p><p>Server 收到 FIN 后，发送一个 ACK 给 Client，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)，Server 进入 CLOSE_WAIT 状态。</p><p><em>第三次挥手:</em> </p><p>Server 发送一个FIN，用来关闭 Server 到 Client 的数据传送，Server 进入 LAST_ACK 状态。 </p><p><em>第四次挥手:</em> </p><p>Client 收到 FIN 后，Client 进入 TIME_WAIT 状态，接着发送一个 ACK 给Server，确认序号为收到序号+1，</p><p>Server进入CLOSED状态，完成四次挥手.</p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6m7ampiwdj20i40cmt9j.jpg" alt="image-20220928122126015" style="zoom:150%;"><h2 id="LVS相关"><a href="#LVS相关" class="headerlink" title="LVS相关"></a>LVS相关</h2><h3 id="LVS-负载均衡有哪些策略"><a href="#LVS-负载均衡有哪些策略" class="headerlink" title="LVS 负载均衡有哪些策略"></a>LVS 负载均衡有哪些策略</h3><p>LVS一共有三种工作模式: </p><ul><li>DR</li><li>Tunnel</li><li>NAT</li></ul><h3 id="谈谈你对LVS的理解"><a href="#谈谈你对LVS的理解" class="headerlink" title="谈谈你对LVS的理解"></a>谈谈你对LVS的理解</h3><p>LVS是一个<strong>虚拟的服务器集群系统</strong>，在unix系统下实现负载均衡的功能;采用<code>IP负载均衡技术</code>和<code>机遇内容请求分发技术</code>来实现。</p><p>LVS采用三层结构，分别是:</p><ul><li><p>第一层: 负载调度器</p></li><li><p>第二层: 服务池</p></li><li><p>第三层:共享存储</p></li></ul><p><strong>负载调度器</strong>(load balancer/ Director)，是整个集群的总代理，它有两个网卡，一个网卡面对访问网站的客户端，一个网卡面对整个集群的内部。负责将客户端的请求发送到一组服务器上执行，而客户也认为服务是来自这台主的。举个生动的例子，集群是个公司，负载调度器就是在外接揽生意，将接揽到的生意分发给后台的真正干活的真正的主机们。当然需要将活按照一定的算法分发下去，让大家都公平的干活。</p><p><strong>服务器池</strong>(server pool/ Realserver)，是一组真正执行客户请求的服务器，可以当做WEB服务器。就 是上面例子中的小员工。</p><p><strong>共享存储</strong>(shared storage)，它为服务器池提供一个共享的存储区，这样很容易使得服务器池拥有相 同的内容，提供相同的服务。一个公司得有一个后台账目吧，这才能协调。不然客户把钱付给了A，而 换B接待客户，因为没有相同的账目。B说客户没付钱，那这样就不是客户体验度的问题了。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6fmy1qp5fj21ck0ty0vh.jpg" alt="image-20220922200358216"></p><h3 id="负载均衡的原理是什么"><a href="#负载均衡的原理是什么" class="headerlink" title="负载均衡的原理是什么"></a>负载均衡的原理是什么</h3><p>当客户端发起请求时，请求直接发给Director Server(调度器)，这时会根据设定的调度算法，将请求按照算法的规定智能的分发到真正的后台服务器。以达到将压力均摊。</p><p>但是我们知道，http的连接时无状态的，假设这样一个场景，我登录某宝买东西，当我看上某款商品时，我将它加入购物车，但是我刷新了一下页面，这时由于负载均衡的原因，调度器又选了新的一台服务器为我提供服务，我刚才的购物车内容全都不见了，这样就会有十分差的用户体验。</p><p>所以就还需要一个存储共享，这样就保证了用户请求的数据是一样的</p><h3 id="LVS由哪两部分组成的"><a href="#LVS由哪两部分组成的" class="headerlink" title="LVS由哪两部分组成的"></a>LVS由哪两部分组成的</h3><p>LVS由<code>ipvs</code>和<code>ipvsadm</code>组成</p><ul><li><p><strong>ipvs</strong>(ip virtual server): 一段代码工作在内核空间，叫ipvs，<strong><em>是真正生效实现调度的代码</em></strong>。</p></li><li><p><strong>ipvsadm</strong>: 另外一段是工作在用户空间，叫ipvsadm，负责为ipvs内核框架编写规则，定义谁是集群服务，而谁是后端真实的服务器(Real Server)</p></li></ul><h3 id="LVS相关的术语"><a href="#LVS相关的术语" class="headerlink" title="LVS相关的术语"></a>LVS相关的术语</h3><ul><li><p><strong>DS</strong>: Director Server。指的是前端负载均衡器节点。</p></li><li><p><strong>RS</strong>: Real Server。后端真实的工作服务器。</p></li><li><p><strong>VIP</strong>: Virtual IP 向外部直接面向用户请求，作为用户请求的目标的IP地址。 </p></li><li><p><strong>DIP</strong>: Director Server IP，主要用于和内部主机通讯的IP地址。</p></li><li><p><strong>RIP</strong>: Real Server IP，后端服务器的IP地址。</p></li><li><p><strong>CIP</strong>: Client IP，访问客户端的IP地址。</p></li></ul><h3 id="LVS-NAT模式的原理"><a href="#LVS-NAT模式的原理" class="headerlink" title="LVS-NAT模式的原理"></a>LVS-NAT模式的原理</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6fnhtxp5nj21ay0o077d.jpg" alt="image-20220922202300843"></p><blockquote><p>  (1). 当用户请求到达 Director Server，此时请求的数据报文会先到内核空间的 PREROUTING 链。 此时报文的源IP为CIP，目标IP为VIP</p><p>  (2). PREROUTING检查发现数据包的目标 IP 是本机，将数据包送至 INPUT 链</p><p>  (3). IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器 IP， 然后将数据包发至POSTROUTING链。 此时报文的源IP为CIP，目标IP为RIP</p><p>  (4). POSTROUTING链通过选路，将数据包发送给Real Server</p><p>  (5). Real Server比对发现目标为自己的IP，开始构建响应报文发回给Director Server。 此时报文的源IP为RIP，目标IP为CIP</p><p>  (6). Director Server在响应客户端前，此时会将源IP地址修改为自己的VIP地址，然后响应给客户端。 此时报文的源IP为VIP，目标IP为CIP</p></blockquote><h3 id="LVS-NAT模型的特性"><a href="#LVS-NAT模型的特性" class="headerlink" title="LVS-NAT模型的特性"></a>LVS-NAT模型的特性</h3><ul><li><p>RS 应该使用私有地址，RS 的网关必须指向 DIP</p></li><li><p>DIP 和 RIP 必须在同一个网段内</p></li><li><p>请求和响应报文都需要经过 Director Server，高负载场景中，Director Server 易成为性能瓶颈</p></li><li><p>支持端口映射</p></li><li><p>RS 可以使用任意操作系统</p></li><li><p>缺陷: 对 Director Server 压力会比较大，请求和响应都需经过 Director server</p></li></ul><h3 id="LVS-DR模式原理"><a href="#LVS-DR模式原理" class="headerlink" title="LVS-DR模式原理"></a>LVS-DR模式原理</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6fnt21f6pj21au0pwwj5.jpg" alt="image-20220922203348356"></p><blockquote><p>  (1) 当用户请求到达 Director Server，此时请求的数据报文会先到内核空间的 PREROUTING 链。 此时报文的源IP为 CIP，目标 IP 为 VIP</p><p>  (2) PREROUTING 检查发现数据包的目标IP是本机，将数据包送至 INPUT 链</p><p>  (3)  IPVS比对数据包请求的服务是否为集群服务，若是，将请求报文中的源 MAC 地址修改为 DIP 的 MAC 地址，将目标 MAC 地址修改 RIP 的 MAC 地址，然后将数据包发至 POSTROUTING 链。 此时的源 IP 和目的 IP 均未修改，仅修改了源 MAC 地址为 DIP 的 MAC 地址，目标 MAC 地址为 RIP 的 MAC 地址</p><p>  (4) 由于 DS 和 RS 在同一个网络中，所以是通过二层来传输。POSTROUTING 链检查目标 MAC 地址为 RIP 的 MAC 地址，那么此时数据包将会发至Real Server。</p><p>  (5) RS 发现请求报文的 MAC 地址是自己的 MAC 地址，就接收此报文。处理完成之后，将响应报文通过 lo 接口传送给 eth0 网卡然后向外发出。 此时的源 IP 地址为 VIP，目标 IP 为 CIP</p><p>  (6) 响应报文最终送达至客户端</p></blockquote><h3 id="LVS-DR模型的特性"><a href="#LVS-DR模型的特性" class="headerlink" title="LVS-DR模型的特性"></a>LVS-DR模型的特性</h3><p>特点:</p><ul><li><p>保证前端路由将目标地址为 VIP 报文统统发给 Director Server，而不是 RS</p></li><li><p>RS 可以使用私有地址; 也可以是公网地址，如果使用公网地址，此时可以通过互联网对RIP进行直接访问</p></li><li><p>RS 跟 Director Server 必须在同一个物理网络中</p></li><li><p>所有的请求报文经由 Director Server，但响应报文不能经过 Director Server </p></li><li><p>不支持地址转换，也不支持端口映射</p></li><li><p>RS 可以是大多数常见的操作系统</p></li><li><p>RS 的网关绝不允许指向DIP(因为我们不允许他经过director) </p></li><li><p>RS 上的 lo 接口配置 VIP 的 IP 地址</p></li></ul><p>缺陷:</p><ul><li>RS 和 DS 必须在同一机房中</li></ul><h3 id="LVS三种负载均衡模式的比较"><a href="#LVS三种负载均衡模式的比较" class="headerlink" title="LVS三种负载均衡模式的比较"></a>LVS三种负载均衡模式的比较</h3><p>三种负载均衡: nat，tunneling，dr<br>|    类目    |    NAT     |      TUN      |        DR         |<br>| :——–: | :——–: | :———–: | :—————: |<br>|  操作系统  |    任意    |   支持隧道    | 多数(支持non-arp) |<br>| 服务器网络 |  私有网络  | 局域网/广域网 |      局域网       |<br>| 服务器数目 |   10-20    |      100      |      大于100      |<br>| 服务器网关 | 负载均衡器 |  自己的路由   |    自己的路由     |<br>|    效率    |    一般    |      高       |       最高        |</p><h3 id="LVS的负载调度算法"><a href="#LVS的负载调度算法" class="headerlink" title="LVS的负载调度算法"></a>LVS的负载调度算法</h3><ul><li>轮叫调度</li><li>加权轮叫调度</li><li>最小连接调度</li><li>加权最小连接调度</li><li>基于局部性能的最少连接</li><li>带复制的基于局部性能最小连接</li><li>目标地址散列调度</li><li>源地址散列调度</li></ul><h3 id="LVS与nginx的区别"><a href="#LVS与nginx的区别" class="headerlink" title="LVS与nginx的区别"></a>LVS与nginx的区别</h3><p><strong>lvs的优势(互联网老辛):</strong></p><ol><li>抗负载能力强，因为 lvs 工作方式的逻辑是非常简单的，而且工作在网络的第 4 层，仅作请求分发用，没有流量，所以在效率上基本不需要太过考虑。lvs 一般很少出现故障，即使出现故障一般也是其他地方(如内存、CPU等)出现问题导致 lvs 出现问题。</li><li>配置性低，这通常是一大劣势同时也是一大优势，因为没有太多的可配置的选项，所以除了增减服务器，并不需要经常去触碰它，大大减少了人为出错的几率。</li><li>工作稳定，因为其本身抗负载能力很强，所以稳定性高也是顺理成章的事，另外各种 lvs 都有完整的双机热备方案，所以一点不用担心均衡器本身会出什么问题，节点出现故障的话，lvs 会自动判别，所以系统整体是非常稳定的。</li><li>无流量，lvs 仅仅分发请求，而流量并不从它本身出去，所以可以利用它这点来做一些线路分流之用。没有流量同时也保住了均衡器的 IO 性能不会受到大流量的影响。</li><li>lvs 基本上能支持所有应用，因为 lvs 工作在第4层，所以它可以对几乎所有应用做负载均衡，包括 http、数据库、聊天室等。</li></ol><p><strong>nginx与LVS的对比:</strong></p><ul><li>nginx工作在网络的第7层，所以它可以针对 http 应用本身来做分流策略，比如针对域名、目录结构等，相比之下 lvs 并不具备这样的功能，所以 nginx 单凭这点可以利用的场合就远多于 lvs 了;但 nginx 有用的这些功能使其可调整度要高于lvs，所以经常要去触碰，由 lvs 的第2条优点来看，触碰多了，人为出现问题的几率也就会大。 </li><li>nginx对网络的依赖较小，理论上只要 ping 得通，网页访问正常，nginx就能连得通，nginx 同时还能区分内外网，如果是同时拥有内外网的节点，就相当于单机拥有了备份线路; lvs 就比较依赖于网络环境，目前来看服务器在同一网段内并且 lvs 使用 direct 方式分流，效果较能得到保证。另外注意，lvs 需要向托管商至少申请多于一个 ip 来做visual ip。 </li><li>nginx 安装和配置比较简单，测试起来也很方便，因为它基本能把错误用日志打印出来。lvs 的安装和配置、测试就要花比较长的时间，因为同上所述，lvs 对网络依赖性比较大，很多时候不能配置成功都是因为网络问题而不是配置问题，出了问题要解决也相应的会麻烦的多。</li><li>nginx也同样能承受很高负载且稳定，但负载度和稳定度差 lvs 还有几个等级:nginx处理所有流量所以受限于机器 IO 和配置;本身的bug也还是难以避免的;nginx没有现成的双机热备方案，所以跑在单机上还是风险比较大，单机上的事情全都很难说。 </li><li>nginx 可以检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点。目前 lvs 中 ldirectd 也能支持针对服务器内部的情况来监控，但 lvs 的原理使其不能重发请求。比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，nginx 会把上传切到另一台服务器重新处理，而 lvs 就直接断掉了。</li></ul><p><strong>两者配合使用:</strong></p><p>nginx 用来做 http 的反向代理，能够 upsteam 实现 http 请求的多种方式的均衡转发。由于采用的是异步转发可以做到如果一个服务器请求失败，立即切换到其他服务器，直到请求成功或者最后一台服务器失败为止。这可以最大程度的提高系统的请求成功率。</p><p>lvs采用的是同步请求转发的策略。这里说一下同步转发和异步转发的区别。同步转发是在 lvs 服务器接收到请求之后，立即 redirect 到一个后端服务器，由客户端直接和后端服务器建立连接。异步转发是 nginx 在保持客户端连接的同时，发起一个相同内容的新请求到后端，等后端返回结果后，由 nginx 返回给客户端。</p><p>进一步来说:当做为负载均衡服务器的 nginx 和 lvs 处理相同的请求时，所有的请求和响应流量都会经过 nginx; 但是使用 lvs 时，仅请求流量经过 lvs 的网络，响应流量由后端服务器的网络返回。</p><p>也就是，当作为后端的服务器规模庞大时，nginx的网络带宽就成了一个巨大的瓶颈。</p><p>但是仅仅使用 lvs 作为负载均衡的话，一旦后端接受到请求的服务器出了问题，那么这次请求就失败了。 但是如果在lvs的后端在添加一层nginx(多个)，每个nginx后端再有几台应用服务器，那么结合两者的优势，既能避免单nginx的流量集中瓶颈，又能避免单lvs时一锤子买卖的问题。</p><h3 id="负载均衡的作用有哪些"><a href="#负载均衡的作用有哪些" class="headerlink" title="负载均衡的作用有哪些"></a>负载均衡的作用有哪些</h3><p>1、转发功能</p><p>按照一定的算法【权重、轮询】，将客户端请求转发到不同应用服务器上，减轻单个服务器压力，提高系统并发量。</p><p>2、故障移除</p><p>通过心跳检测的方式，判断应用服务器当前是否可以正常工作，如果服务器期宕掉，自动将请求发送到其他应用服务器。</p><p>3、恢复添加</p><p>如检测到发生故障的应用服务器恢复工作，自动将其添加到处理用户请求队伍中。</p><h2 id="Nginx与Apache相关"><a href="#Nginx与Apache相关" class="headerlink" title="Nginx与Apache相关"></a>Nginx与Apache相关</h2><p><a href="https://haicoder.net/note/nginx-interview/nginx-interview-nginx-feature.html" target="_blank" rel="noopener">常见问题</a></p><h3 id="nginx负载均衡实现的策略"><a href="#nginx负载均衡实现的策略" class="headerlink" title="nginx负载均衡实现的策略"></a>nginx负载均衡实现的策略</h3><ul><li><p>轮询(默认)</p></li><li><p>权重</p></li><li><p>ip_hash </p></li><li><p>fair(第三方插件) </p></li><li><p>url_hash(第三方插件)</p></li></ul><h3 id="nginx做负载均衡用到的模块"><a href="#nginx做负载均衡用到的模块" class="headerlink" title="nginx做负载均衡用到的模块"></a>nginx做负载均衡用到的模块</h3><ul><li>upstream 定义负载节点池。</li><li>location 模块进行URL匹配。</li><li>proxy模块发送请求给upstream定义的节点池。</li></ul><h3 id="负载均衡有哪些实现方式"><a href="#负载均衡有哪些实现方式" class="headerlink" title="负载均衡有哪些实现方式"></a>负载均衡有哪些实现方式</h3><ul><li><p>硬件负载 </p></li><li><p>HTTP重定向负载均衡 </p></li><li><p>DNS负载均衡 </p></li><li><p>反向代理负载均衡 </p></li><li><p>IP层负载均衡 </p></li><li><p>数据链路层负载均衡</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6ipn8fu0nj21710u0acq.jpg" alt="image-20220925115401352"></p><h3 id="web服务有哪些"><a href="#web服务有哪些" class="headerlink" title="web服务有哪些"></a>web服务有哪些</h3><ul><li>apache </li><li>nginx</li><li>IIS </li><li>tomcat </li><li>lighttpd </li><li>weblogic</li></ul><h3 id="为什么要用nginx"><a href="#为什么要用nginx" class="headerlink" title="为什么要用nginx"></a>为什么要用nginx</h3><ul><li>跨平台、配置简单，非阻塞、高并发连接: 处理2-3万并发连接数，官方监测能支持5万并发 </li><li>内存消耗小: 开启10个nginx才占150M内存，nginx处理静态文件好,耗费内存少</li><li>内置的健康检查功能: 如果有一个服务器宕机，会做一个健康检查，再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上。 </li><li>节省宽带: 支持GZIP压缩，可以添加浏览器本地缓存</li><li>稳定性高: 宕机的概率非常小</li><li>接收用户请求是异步的</li></ul><h3 id="nginx的性能为什么比apache高"><a href="#nginx的性能为什么比apache高" class="headerlink" title="nginx的性能为什么比apache高"></a>nginx的性能为什么比apache高</h3><p>nginx采用的是epoll模型和kqueue网络模型，而apache采用的是select模型</p><p><strong><em>举一个例子来解释两种模型的区别:</em></strong></p><p>菜鸟驿站放着很多快件，以前去拿快件都是短信通知你有快件，然后你去了之后，负责菜鸟驿站的人在一堆快递里帮你找，直到找到为止。</p><p>但现在菜鸟驿站的方式变了，他会发你一个地址，比如 3-3-5009. 这个就是第三个货架的第三排，从做往右第九个。</p><p>如果有几百个人同时去找快递，这两种方式哪个更有效率，不言而喻。</p><p><strong><em>之前还看到这个例子也比较形象:</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 假设你在大学读书，住的宿舍楼有很多间房间，你的朋友要来找你。</span><br><span class="line">select版宿管大妈就会带着你的朋友挨个房间去找，直到找到你为止。</span><br><span class="line">而epoll版宿管大妈会先记下每位同学的房间号，</span><br><span class="line">你的朋友来时，只需告诉你的朋友你住在哪个房间即可，不用亲自带着你的朋友满大楼找人。</span><br><span class="line">如果来了10000个人，都要找自己住这栋楼的同学时，select版和epoll版宿管大妈，谁的效率更高，不言自明。</span><br><span class="line">同理，在高并发服务器中，轮询I/O是最耗时间的操作之一，select和epoll的性能谁的性能更高，同样十分明了</span><br></pre></td></tr></table></figure><p>select 采用的是轮询的方式来处理请求，轮询的次数越多，耗时也就越多。</p><h3 id="nginx和apache的区别"><a href="#nginx和apache的区别" class="headerlink" title="nginx和apache的区别"></a>nginx和apache的区别</h3><p><strong><em>Nginx</em></strong></p><ul><li><p>轻量级，采用 C 进行编写，同样的 web 服务，会占用更少的内存及资源</p></li><li><p>抗并发，nginx 以 epoll and kqueue 作为开发模型，处理请求是异步非阻塞的，负载能力比 apache 高很多，而 apache 则是阻塞型的。在高并发下 nginx 能保持低资源低消耗高性能 ，而 apache 在 PHP 处理慢或者前端压力很大的情况下，很容易出现进程数飙升，从而拒绝服务的现象。</p></li><li><p>nginx 处理静态文件好，静态处理性能比 apache 高三倍以上</p></li><li><p>nginx 的设计高度模块化，编写模块相对简单</p></li><li><p>nginx 配置简洁，正则配置让很多事情变得简单，而且改完配置能使用 -t 测试配置有没有问题， apache 配置复杂 ，重启的时候发现配置出错了，会很崩溃</p></li><li><p>nginx 作为负载均衡服务器，支持 7 层负载均衡<br>七层负载可以有效的防止ddos攻击 </p></li><li><p>nginx本身就是一个反向代理服务器，也可以左右邮件代理服务器来使用</p></li></ul><p><strong><em>Apache</em></strong></p><ul><li>apache 的 rewrite 比 nginx 强大，在 rewrite 频繁的情况下，用 apache</li><li>apache 发展到现在，模块超多，基本想到的都可以找到</li><li>apache 更为成熟，少 bug ，nginx 的 bug 相对较多</li><li>apache 对 PHP 支持比较简单，nginx 需要配合其他后端用</li><li>apache 在处理动态请求有优势，nginx 在这方面是鸡肋，一般动态请求要 apache 去做，nginx 适合静态和反向。</li><li>apache 仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区</li><li>两者最核心的区别在于 apache 是同步多进程模型，一个连接对应一个进程，而 nginx 是异步的，多个连接(万级别)可以对应一个进程。</li><li>需要稳定用 apache，需要高性能用 nginx</li></ul><h3 id="反向代理与正向代理以及区别"><a href="#反向代理与正向代理以及区别" class="headerlink" title="反向代理与正向代理以及区别"></a>反向代理与正向代理以及区别</h3><p><strong>正向代理:</strong></p><p>所谓的正向代理就是: 需要在用户端去配置的。配置完再去访问具体的服务，这叫正向代理</p><p>正向代理，其实是”代理服务器”代理了”客户端”，去和”目标服务器”进行交互。 </p><p><em>正向代理的用途:</em></p><ul><li><p>提高访问速度</p></li><li><p>隐藏客户真实IP</p></li></ul><p><strong>反向代理:</strong></p><p>反向代理是在服务端的，不需要访问用户关心。用户访问服务器A, A服务器是代理服务器，将用户服务</p><p>再转发到服务器B.这就是反向代理</p><p><em>反向代理的作用:</em> </p><ul><li><p>缓存，将服务器的响应缓存在自己的内存中，减少服务器的压力。</p></li><li><p>负载均衡，将用户请求分配给多个服务器。</p></li><li><p>访问控制</p></li></ul><h3 id="nginx如何处理http请求"><a href="#nginx如何处理http请求" class="headerlink" title="nginx如何处理http请求"></a>nginx如何处理http请求</h3><p>四个步骤:</p><ul><li>读取解析请求行;</li><li>读取解析请求头;</li><li>开始最重要的部分，即多阶段处理;</li></ul><blockquote><p>  nginx 把请求处理划分成了11个阶段，也就是说当 nginx 读取了请求行和请求头之后，将请求封装了结构体ngx_http_request_t，然后每个阶段的 handler 都会根据这个 ngx_http_request_t，对请求进行处理，例如重写uri，权限控制，路径查找，生成内容以及记录日志等等;</p></blockquote><p>最后将结果返回给客户端。</p><p><strong><em>也可以这么回答:</em></strong></p><ul><li>首先，Nginx 在启动时，会解析配置文件，得到需要监听的端口与 IP 地址，然后在 Nginx 的 Master 进程里面先初始化好这个监控的Socket(创建 Socket，设置 addr、reuse 等选项，绑定到指定的 ip 地址端口，再 listen 监听)。</li><li>然后，再 fork(一个现有进程可以调用 fork 函数创建一个新进程。由 fork 创建的新进程被称为子进程 )出多个子进程出来。</li><li>之后，子进程会竞争 accept 新的连接。此时，客户端就可以向 nginx 发起连接了。当客户端与 nginx进行三次握手，与 nginx 建立好一个连接后。此时，某一个子进程会 accept 成功，得到这个建立好的连接的 Socket ，</li><li>然后创建 nginx 对连接的封装，即 ngx_connection_t 结构体。</li><li>接着，设置读写事件处理函数，并添加读写事件来与客户端进行数据的交换。 </li><li>最后，Nginx 或客户端来主动关掉连接，到此，一个连接就寿终正寝了。</li></ul><h3 id="nginx虚拟主机有哪些"><a href="#nginx虚拟主机有哪些" class="headerlink" title="nginx虚拟主机有哪些"></a>nginx虚拟主机有哪些</h3><ul><li>基于<strong>域名</strong>的虚拟主机</li><li>基于<strong>端口</strong>的虚拟主机</li><li>基于 <strong>IP</strong> 的虚拟主机</li></ul><h3 id="apache中的Worker和Prefork的区别"><a href="#apache中的Worker和Prefork的区别" class="headerlink" title="apache中的Worker和Prefork的区别"></a>apache中的Worker和Prefork的区别</h3><p>它们都是MPM, Worker 和 prefork 有它们各自在Apache上的运行机制. 它们完全依赖于你想要以哪一<br>种模式启动你的Apache.</p><ol><li>Worker 和 MPM 基本的区别在于它们产生子进程的处理过程, 在 Prefork MPM 中, 一个主 httpd 进行被启动，这个主进程会管理所有其它子进程为客户端请求提供服务. 而在worker MPM中一个httpd进程被激活，则会使用不同的线程来为客户端请求提供服务.</li><li>Prefork MPM 使用多个子进程，每一个进程带有一个线程; 而 worker MPM 使用多个子进程，每一个进程带有多个线程.</li><li>Prefork MPM中的连接处理, 每一个进程一次处理一个连接而在Worker mpm中每一个线程一次处理一个连接.</li><li>内存占用 Prefork MPM 占用庞大的内存, 而Worker占用更小的内存</li></ol><h3 id="nginx的优化"><a href="#nginx的优化" class="headerlink" title="nginx的优化"></a>nginx的优化</h3><ul><li>gzip压缩优化</li><li>expires缓存</li><li>网络IO事件模型优化</li><li>隐藏软件名称和版本号</li><li>防盗链优化</li><li>禁止恶意域名解析</li><li>禁止通过IP地址访问网站</li><li>HTTP请求方法优化</li><li>防DOS攻击单IP并发连接的控制，与连接速率控制</li><li>严格设置web站点目录的权限</li><li>将nginx进程以及站点运行于监牢模式</li><li>通过robot协议以及HTTP_USER_AGENT防爬虫优化</li><li>配置错误页面根据错误码指定网页反馈给用户</li><li>nginx日志相关优化访问日志切割轮询，不记录指定元素日志、最小化日志目录权限</li><li>限制上传到资源目录的程序被访问，防止木马入侵系统破坏文件</li><li>FastCGI参数buffer和cache配置文件的优化</li><li>php.ini和php-fpm.conf配置文件的优化</li><li>有关web服务的Linux内核方面深度优化(网络连接、IO、内存等)</li><li>nginx加密传输优化(SSL)</li><li>web服务器磁盘挂载及网络文件系统的优化</li><li>使用nginx cache</li></ul><h3 id="nginx的session不同步怎么办"><a href="#nginx的session不同步怎么办" class="headerlink" title="nginx的session不同步怎么办"></a>nginx的session不同步怎么办</h3><p>我们可以采用 ip_hash 指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。即每个访客固定访问一个后端服务器，可以解决 session 的问题。</p><p>其他办法: 那就是用 spring_session+redis，把session放到缓存中实现 session 共享。</p><h2 id="Tomcat相关"><a href="#Tomcat相关" class="headerlink" title="Tomcat相关"></a>Tomcat相关</h2><h3 id="Tomcat作为web的优缺点"><a href="#Tomcat作为web的优缺点" class="headerlink" title="Tomcat作为web的优缺点"></a>Tomcat作为web的优缺点</h3><p><strong>缺点:</strong><br>tomcat 只能用做 java 服务器，处理静态请求的能力不如 nginx 和 apache，高并发能力有限 </p><p><strong>优点:</strong></p><p>动态解析容器，处理动态请求，是编译 JSP/Servlet 的容器，轻量级</p><h3 id="tomcat的三个端口及作用"><a href="#tomcat的三个端口及作用" class="headerlink" title="tomcat的三个端口及作用"></a>tomcat的三个端口及作用</h3><ul><li>8005: 关闭Tomcat通信接口</li><li>8009: 与其他httpd服务器通信接口，用于http服务器的集合</li><li>8080: 建立httpd连接用，如浏览器访问</li></ul><h3 id="Tomcat缺省端口是多少，怎么修改"><a href="#Tomcat缺省端口是多少，怎么修改" class="headerlink" title="Tomcat缺省端口是多少，怎么修改"></a>Tomcat缺省端口是多少，怎么修改</h3><ol><li><p>找到Tomcat目录下的conf文件夹</p></li><li><p>进入conf文件夹里面找到server.xml文件</p></li><li><p>打开server.xml文件</p></li><li><p>在server.xml文件里面找到下列信息 </p></li><li><p>把Connector标签的8080端口改成你想要的端口</p></li></ol><h3 id="Tomcat的工作模式是什么"><a href="#Tomcat的工作模式是什么" class="headerlink" title="Tomcat的工作模式是什么"></a>Tomcat的工作模式是什么</h3><p>Tomcat作为servlet容器，有三种工作模式: </p><ol><li>独立的servlet容器，servlet容器是web服务器的一部分;</li><li>进程内的servlet容器，servlet容器是作为web服务器的插件和java容器的实现，web服务器插件在内部地址空间打开一个jvm使得java容器在内部得以运行。反应速度快但伸缩性不足;</li><li>进程外的servlet容器，servlet容器运行于web服务器之外的地址空间，并作为web服务器的插件和 java 容器实现的结合。反应时间不如进程内但伸缩性和稳定性比进程内优;</li></ol><p>进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类: </p><ul><li><p>Tomcat作为应用程序服务器:请求来自于前端的web服务器，这可能是Apache, IIS, Nginx等;</p></li><li><p>Tomcat作为独立服务器:请求来自于web浏览器;</p></li></ul><h3 id="Web请求在Tomcat请求中的请求流程"><a href="#Web请求在Tomcat请求中的请求流程" class="headerlink" title="Web请求在Tomcat请求中的请求流程"></a>Web请求在Tomcat请求中的请求流程</h3><ul><li>浏览器输入URL地址; </li><li>查询本机hosts文件寻找IP; </li><li>查询DNS服务器寻找IP; </li><li>向该IP发送Http请求; </li><li>Tomcat容器解析主机名; </li><li>Tomcat容器解析Web应用; </li><li>Tomcat容器解析资源名称; </li><li>Tomcat容器获取资源; </li><li>Tomcat响应浏览器。</li></ul><h3 id="Tomcat优化"><a href="#Tomcat优化" class="headerlink" title="Tomcat优化"></a>Tomcat优化</h3><ol><li>Tomcat的运行模式 : bio,nio, apr<br> 一般使用nio模式，bio效率低，apr对系统配置有一些更高的要求</li><li>关键配置<br>maxThreads: 最大线程数，默认是200，<br>minspareThread: 最小活跃线程数，默认是25<br>maxqueuesize: 最大等待队列个数 </li><li>影响性能的配置:<br>compression 设置成on，开启压缩<br>禁用AJP连接器: 用nginx+Tomcat的架构，用不到AJP<br>enableLookups=false 关闭反查域名，直接返回ip，提高效率<br>disableUploadTimeou=false 上传是否使用超时机制<br>acceptCount=300 , 当前所有可以使用的处理请求都被使用时，传入请求连接最大队列长队，超过个数不予处理，默认是100<br>keepalive timeout=120000 场链接保持时间</li><li>优化jvm<br> /bin/catalina.sh</li></ol><blockquote><p>  -server: jvm的server工作模式，对应的有client工作模式。使用“java -version”可以查看当前工作 模式</p><p>  -Xms1024m: 初始Heap大小，使用的最小内存</p><p>  -Xmx1024m: Java heap 最大值，使用的最大内存。经验: 设置 Xms 大小等于 Xmx 大小 </p><p>  -XX:NewSize=512m:表示新生代初始内存的大小，应该小于 -Xms 的值 </p><p>  -XX:MaxNewSize=1024M:表示新生代可被分配的内存的最大上限，应该小于 -Xmx 的值</p><p>  -XX:PermSize=1024m:设定内存的永久保存区域,内存的永久保存区域，VM 存放 Class 和 Meta 信息，JVM在运行期间不会清除该区域 </p><p>  -XX:MaxPermSize=1024m:设定最大内存的永久保存区域。经验: 设置PermSize大小等于 MaxPermSize大小</p><p>  -XX:+DisableExplicitGC:自动将System.gc() 调用转换成一个空操作，即应用中调用System.gc() 会变成一个空操作，避免程序员在代码里进行System.gc()这种危险操作。System.gc() 除非是到了万不得也的情况下使用，都应该交给 JVM。</p></blockquote><h2 id="fastcgi-和cgi的区别"><a href="#fastcgi-和cgi的区别" class="headerlink" title="fastcgi 和cgi的区别"></a>fastcgi 和cgi的区别</h2><p>cgi:</p><p>web 服务器会根据请求的内容，然后会 fork 一个新进程来运行外部 c 程序(或 perl 脚本…)， 这个进程会把处理完的数据返回给 web 服务器，最后 web 服务器把内容发送给用户，刚才 fork 的进程也随之退出。</p><p>如果下次用户还请求该动态脚本，那么 web 服务器又再次 fork 一个新进程，周而复始的进行</p><p>fastcgi:</p><p>web 服务器收到一个请求时，他不会重新 fork 一个进程(因为这个进程在 web 服务器启动时就开启了，而且不会退出)，web 服务器直接把内容传递给这个进程(进程间通信，但 fastcgi 使用了别的方式，tcp 方式通信)，这个进程收到请求后进行处理，把结果返回给 web 服务器，最后自己接着等待下一个请求的到来，而不是退出。</p><h2 id="Keepalived相关"><a href="#Keepalived相关" class="headerlink" title="Keepalived相关"></a>Keepalived相关</h2><h3 id="keepalived-是什么"><a href="#keepalived-是什么" class="headerlink" title="keepalived 是什么"></a>keepalived 是什么</h3><p>广义上讲是高可用，狭义上讲是主机的冗余和管理</p><p>Keepalived起初是为 LVS 设计的，专门用来监控集群系统中各个服务节点的状态，它根据 TCP/IP 参考模型的第三、第四层、第五层交换机制检测每个服务节点的状态，如果某个服务器节点出现异常，或者工作出现故障，Keepalived 将检测到，并将出现的故障的服务器节点从集群系统中剔除，这些工作全部是自动完成的，不需要人工干涉，需要人工完成的只是修复出现故障的服务节点。</p><p>后来 Keepalived 又加入了 VRRP 的功能，VRRP(VritrualRouterRedundancyProtocol,虚拟路由冗余协议)出现的目的是解决静态路由出现的单点故障问题，通过 VRRP 可以实现网络不间断稳定运行，因此 Keepalvied 一方面具有服务器状态检测和故障隔离功能，另外一方面也有 HAcluster 功能。</p><p>所以 keepalived 的核心功能就是健康检查和失败切换。 所谓的健康检查，就是采用 tcp 三次握手，icmp 请求，http 请求，udp echo 请求等方式对负载均衡器后面的实际的服务器(通常是承载真实业务的服务器)进行保活;</p><p>而失败切换主要是应用于配置了主备模式的负载均衡器，利用 VRRP 维持主备负载均衡器的心跳，当主负载均衡器出现问题时，由备负载均衡器承载对应的业务，从而在最大限度上减少流量损失，并提供服务的稳定性</p><h3 id="如何理解VRRP协议"><a href="#如何理解VRRP协议" class="headerlink" title="如何理解VRRP协议"></a>如何理解VRRP协议</h3><p>为什么使用 VRRP ? 主机之间的通信都是通过配置静态路由或者(默认网关)来完成的，而主机之间的路由器一旦发生故障，通信就会失效，因此这种通信模式当中，路由器就成了一个单点瓶颈，为了解决这个问题，就引入了 VRRP 协议。</p><p>VRRP 协议是一种容错的主备模式的协议，保证当主机的下一跳路由出现故障时，由另一台路由器来代替出现故障的路由器进行工作，通过 VRRP 可以在网络发生故障时透明的进行设备切换而不影响主机之间的数据通信。</p><p><strong>VRRP 的三种状态:</strong> </p><p><em>VRRP路由器在运行过程中有三种状态:</em></p><ol><li>Initialize状态: 系统启动后就进入Initialize，此状态下路由器不对 VRRP 报文做任何处理; </li><li>Master状态;</li><li>Backup状态;</li></ol><ul><li>一般主路由器处于Master状态，备份路由器处于Backup状态。</li></ul><h3 id="keepalived的工作原理"><a href="#keepalived的工作原理" class="headerlink" title="keepalived的工作原理"></a>keepalived的工作原理</h3><p>keepalived 采用是模块化设计，不同模块实现不同的功能。</p><p>keepalived 主要有三个模块，分别是 core、check 和 vrrp。</p><p><strong>core</strong>: 是 keepalived 的核心，负责主进程的启动和维护，全局配置文件的加载解析等</p><p><strong>check</strong>: 负责 healthchecker(健康检查)，包括了各种健康检查方式，以及对应的配置的解析包括LVS的配置解析;可基于脚本检查对IPVS后端服务器健康状况进行检查</p><p><strong>vrrp</strong>: VRRPD子进程，VRRPD 子进程就是来实现 VRRP 协议的</p><p>Keepalived 高可用对之间是通过 VRRP 进行通信的， VRRP是通过竞选机制来确定主备的，主的优先级高于备，因此，工作时主会优先获得所有的资源，备节点处于等待状态，当主宕机的时候，备节点就会接管主节点的资源，然后顶替主节点对外提供服务</p><p>在 Keepalived 服务对之间，只有作为主的服务器会一直发送 VRRP 广播包,告诉备它还活着，此时备不会抢占主，当主不可用时，即备监听不到主发送的广播包时，就会启动相关服务接管资源，保证业务的连续性.接管速度最快</p><h3 id="出现脑裂的原因"><a href="#出现脑裂的原因" class="headerlink" title="出现脑裂的原因"></a>出现脑裂的原因</h3><p><strong><em>什么是脑裂?</em></strong></p><ul><li><p>在高可用(HA)系统中，当联系2个节点的“心跳线”断开时，本来为一整体、动作协调的HA系统， 就分裂成为2个独立的个体。 </p></li><li><p>由于相互失去了联系，都以为是对方出了故障。两个节点上的HA软件像“裂脑人”一样，争抢“共享 资源”、争起“应用服务”，就会发生严重后果。共享资源被瓜分、两边“服务”都起不来了;或者两边 “服务”都起来了，但同时读写“共享存储”，导致数据损坏</p></li></ul><p><strong><em>都有哪些原因导致脑裂?</em></strong></p><ul><li><p>高可用服务器对之间心跳线链路发生故障，导致无法正常通信。</p></li><li><p>因心跳线坏了(包括断了，老化)。 </p></li><li><p>因网卡及相关驱动坏了，ip配置及冲突问题(网卡直连) </p></li><li><p>因心跳线间连接的设备故障(网卡及交换机) </p></li><li><p>因仲裁的机器出问题(采用仲裁的方案)</p></li><li><p>高可用服务器上开启了 iptables 防火墙阻挡了心跳消息传输。 </p></li><li><p>高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败</p></li><li><p>其他服务配置不当等原因，如心跳方式不同，心跳广插冲突、软件Bug等。</p></li></ul><h3 id="如何解决keepalived脑裂问题"><a href="#如何解决keepalived脑裂问题" class="headerlink" title="如何解决keepalived脑裂问题"></a>如何解决keepalived脑裂问题</h3><p><strong><em>在实际生产环境中，我们从以下方面防止脑裂:</em></strong></p><ul><li>同时使用串行电缆和以太网电缆连接、同时使用两条心跳线路，这样一条线路断了，另外一条还是好的，依然能传送心跳消息</li><li>当检查脑裂时强行关闭一个心跳节点(这个功能需要特殊设备支持，如stonith、fence)相当于备节点接收不到心跳消息，通过单独的线路发送关机命令关闭主节点的电源</li><li>做好对脑裂的监控报警</li></ul><p><strong><em>解决常见方案:</em></strong> </p><ul><li>如果开启防火墙，一定要让心跳消息通过，一般通过允许IP段的形式解决 </li><li>可以拉一条以太网网线或者串口线作为主被节点心跳线路的冗余 </li><li>开发检测程序通过监控软件检测脑裂</li></ul><h1 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h1><h2 id="常见日志文件与各自的用途"><a href="#常见日志文件与各自的用途" class="headerlink" title="常见日志文件与各自的用途"></a>常见日志文件与各自的用途</h2><table><thead><tr><th>路径</th><th>用途</th></tr></thead><tbody><tr><td>/var/log/messages</td><td>内核及公共消息日志</td></tr><tr><td>/var/log/cron</td><td>计划任务日志</td></tr><tr><td>/var/log/dmesg</td><td>系统引导日志</td></tr><tr><td>/var/log/maillog</td><td>邮件系统日志</td></tr><tr><td>/var/log/secure</td><td>记录与访问限制相关日志</td></tr><tr><td>/etc/logrotate.d</td><td>此目录下是各个服务的日志轮询配置文件</td></tr></tbody></table><h2 id="Linux系统的运行级别"><a href="#Linux系统的运行级别" class="headerlink" title="Linux系统的运行级别"></a>Linux系统的运行级别</h2><ul><li>0=&gt;关机</li><li>1=&gt;单用户</li><li>2=&gt;多用户有网络服务</li><li>3=&gt;多用户无网络服务</li><li>4=&gt;保留</li><li>5=&gt;图形界面</li><li>6=&gt;重启</li></ul><h2 id="Linux开机过程"><a href="#Linux开机过程" class="headerlink" title="Linux开机过程"></a>Linux开机过程</h2><p>1.开机<a href="https://so.csdn.net/so/search?q=BIOS&spm=1001.2101.3001.7020" target="_blank" rel="noopener">BIOS</a>自检</p><p>2.MBR引导</p><p>3.grub引导菜单</p><p>4.加载内核kernel</p><p>5.启动init进程</p><p>6.读取inittab文件，执行rc.sysinit,rc等脚本</p><p>7.启动mingetty，进入系统登陆界面</p><p>详情请参考链接:<a href="https://blog.csdn.net/changexhao/article/details/80913699?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165148004816781435489213%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165148004816781435489213&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-80913699.142^v9^pc_search_result_cache,157^v4^control&utm_term=linux开机过程&spm=1018.2226.3001.4187" target="_blank" rel="noopener">Linux开机过程</a></p><h1 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h1><h2 id="STP协议"><a href="#STP协议" class="headerlink" title="STP协议"></a>STP协议</h2><p><strong>主要用途：</strong></p><ol><li><p>STP通过阻塞冗余链路，来消除桥接网络中可能存在的路径回环；</p></li><li><p>当前活动路径发生故障时，STP激活冗余链路恢复网络连通性。</p></li></ol><p><strong>为什么要用STP:</strong></p><ul><li>原因：交换网络存在环路时引起：广播环路（广播风暴）；桥表损坏。</li></ul><p><strong>介绍一下ACL和NAT?</strong></p><p>ACL：</p><ol><li><p>访问控制列表（ACL）是应用在路由器接口的指令列表（规则），用来告诉路由器哪些数据包可以接收转发，哪些数据包需要拒绝；</p></li><li><p>ACL的工作原理 ：读取第三层及第四层包头中的信息，根据预先定义好的规则对包进行过滤；</p></li><li><p>使用ACL实现网络控制：实现访问控制列表的核心技术是包过滤；</p></li><li><p>ACL的两种基本类型（标准访问控制列表；扩展访问控制列表）</p></li></ol><p>NAT：</p><ul><li>改变IP包头使目的地址，源地址或两个地址在包头中被不同地址替换。</li></ul><p><strong>NAT有几种方式?</strong></p><ul><li><p>静态NAT</p></li><li><p>动态NAT</p></li><li><p>PAT</p></li></ul><h2 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h2><p>RIP是Routing Information Protocol（路由信息协议）的简称，它是一种较为简单的内部网关协议（Interior Gateway Protocol）。RIP是一种基于距离矢量（Distance-Vector）算法的协议，它使用跳数（Hop Count）作为度量来衡量到达目的网络的距离。RIP通过UDP报文进行路由信息的交换，使用的端口号为520。</p><p>RIP包括RIP-1和RIP-2两个版本，RIP-2对RIP-1进行了扩充，使其更具有优势。</p><p>RIP是一种基于距离矢量（Distance-Vector）算法的协议，它使用跳数（Hop Count）作为度量值来衡量到达目的地址的距离。在RIP网络中，缺省情况下，设备到与它直接相连网络的跳数为0，通过一个设备可达的网络的跳数为1，其余依此类推。也就是说，度量值等于从本网络到达目的网络间的设备数量。为限制收敛时间，RIP规定度量值取0～15之间的整数，大于或等于16的跳数被定义为无穷大，即目的网络或主机不可达。由于这个限制，使得RIP不可能在大型网络中得到应用。</p><p><strong>静态路由的缺陷</strong></p><ol><li>配置量大</li><li>只能适用于小型网络中</li><li>维护麻烦，无法自动适应网络的拓扑变化</li></ol><p>动态路由协议：可以根据网络拓扑的变化根据协议来选择路径</p><p><strong>动态路由协议分为：</strong></p><ul><li>内部网关协议：运行在同一个AS号内的路由协议。如：RIP、OSPF、EIGRP（思科设备专用）</li><li>外部网关协议：运行在不同AS号之间的路由协议。如：BGP</li></ul><p><strong>内部网关协议分为：</strong></p><ul><li>距离矢量协议（RIP、EIGRP）</li><li>链路状态协议（OSPF）</li></ul><p>RIP协议：属于内部网关协议，是一个距离矢量协议，工作在UDP的520端口</p><p>有类路由协议：在发送路由更新的时候是不会携带子网掩码的（已经被淘汰）</p><p>无类路由协议：在发送路由更新的时候携带子网掩码。</p><p><strong>RIP的两个版本</strong></p><p>RIPv1：是一个有类路由协议，是通过广播（255.255.255.255）的形式来发送路由更新的。</p><p>RIPv2：是一个无类路由协议，是通过组播（224.0.0.9）的形式来发送路由更新的。</p><p>RIP的选路标准：通过跳数来衡量路径，RIP认为跳数越少，路径越优先。同时这也是它的缺陷，因为RIP有可能选择了一条次优路径。 </p><p><strong>RIPv1的特点：</strong></p><ol><li>有类别路由协议。</li><li>广播更新。</li><li>基于UDP，端口号520</li></ol><p>RIP是一个基于UDP的路由协议，并且RIPv1的数据包不能超过512字节（RIP报文头部占用4个字节,而每个路由条目占用20个八位组字节。因此,RIP消息最大为4+(25*20)=504个字节,再加上8个字节的UDP头部,所以RIP数据报的大小(不含IP包的头部)最大可达512个字节。）。RIPv1的协议报文中没有携带掩码信息，所以RIPv1在发送和接收路由更新时会根据主类网段掩码和接口地址掩码来处理路由条目。因此RIPv1无法支持路由聚合，也不支持不连续子网。RIPv1的协议报文中没有验证字段，所以RIPv1也不支持验证。</p><p><strong>RIPv2特点：</strong></p><ol><li>无类别路由协议。</li><li>组播更新，组播地址224.0.0.9</li><li>基于UDP，端口号520.</li><li>支持外部Tag。</li><li>支持路由聚合和CIDR</li><li>支持指定下一跳。</li><li>支持认证。</li></ol><h2 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h2><p>路由协议OSPF全称为Open Shortest Path First，也就开放的最短路径优先协议，因为OSPF是由IETF开发的，它的使用不受任何厂商限制，所有人都可以使用，所以称为开放的，而最短路径优先（SPF）只是OSPF的核心思想，其使用的算法是Dijkstra算法，最短路径优先并没有太多特殊的含义，并没有任何一个路由协议是最长路径优先的，所有协议，都会选最短的。</p><ul><li>OSPF的流量使用IP协议号89。</li><li>OSPF工作在单个AS，是个绝对的内部网关路由协议（Interior Gateway Protocol，即IGP）。</li><li>OSPF对网络没有跳数限制，支持 Classless Interdomain Routing (CIDR)和Variable-Length Subnet Masks (VLSMs)，没有自动汇总功能，但可以手工在任意比特位汇总，并且手工汇总没有任何条件限制，可以汇总到任意掩码长度。</li><li>OSPF支持认证，并且支持明文和MD5认证；OSPF不可以通过Offset list来改变路由的metric。</li><li>OSPF并不会周期性更新路由表，而采用增量更新，即只在路由有变化时，才会发送更新，并且只发送有变化的路由信息；事实上，OSPF是间接设置了周期性更新路由的规则，因为所有路由都是有刷新时间的，当达到刷新时间阀值时，该路由就会产生一次更新，默认时间为1800秒，即30分钟，所以OSPF路由的定期更新周期默认为30分钟。</li><li>OSPF所有路由的管理距离(Ddministrative Distance)为110，OSPF只支持等价负载均衡。</li><li>距离矢量路由协议的根本特征就是自己的路由表是完全从其它路由器学来的，并且将收到的路由条目一丝不变地放进自己的路由表，运行距离矢量路由协议的路由器之间交换的是路由表，距离矢量路由协议是没有大脑的，路由表从来不会自己计算，总是把别人的路由表拿来就用；而OSPF完全抛弃了这种不可靠的算法，OSPF是典型的链路状态路由协议，路由器之间交换的并不是路由表，而是链路状态，OSPF通过获得网络中所有的链路状态信息，从而计算出到达每个目标精确的网络路径。</li></ul><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><p>参考链接: <a href="https://www.zhihu.com/question/379143600" target="_blank" rel="noopener">https://www.zhihu.com/question/379143600</a></p><h3 id="1、简述etcd及其特点"><a href="#1、简述etcd及其特点" class="headerlink" title="1、简述etcd及其特点"></a><strong>1、简述etcd及其特点</strong></h3><p>etcd是CoreOS团队发起的开源项目，是一个管理配置信息和服务发现（service discovery）的项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于Go语言实现。</p><p>特点：</p><ul><li>简单：支持REST风格的HTTP+JSON API</li><li>安全：支持HTTPS方式的访问</li><li>快速：支持并发1k/s的写操作</li><li>可靠：支持分布式结构，基于Raft的一致性算法，Raft是一套通过选举主节点来实现分布式系统一致性的算法。</li></ul><h3 id="2、简述etcd适应的场景"><a href="#2、简述etcd适应的场景" class="headerlink" title="2、简述etcd适应的场景"></a><strong>2、简述etcd适应的场景</strong></h3><p>etcd基于其优秀的特点，可广泛的应用于以下场景：</p><ul><li>服务发现（Service Discovery）：服务发现主要解决在同一个分布式集群中的进程或服务，要如何才能找到对方并建立连接。本质上来说，服务发现就是想要了解集群中是否有进程在监听UDP或TCP端口，并且通过名字就可以查找和连接。</li><li>消息发布与订阅：在分布式系统中，最适用的一种组件间通信方式就是消息发布与订阅。即构建一个配置共享中心，数据提供者在这个配置中心发布消息，而消息使用者则订阅他们关心的主题，一旦主题有消息发布，就会实时通知订阅者。通过这种方式可以做到分布式系统配置的集中式管理与动态更新。应用中用到的一些配置信息放到etcd上进行集中管理。</li><li>负载均衡：在分布式系统中，为了保证服务的高可用以及数据的一致性，通常都会把数据和服务部署多份，以此达到对等服务，即使其中的某一个服务失效了，也不影响使用。etcd本身分布式架构存储的信息访问支持负载均衡。etcd集群化以后，每个etcd的核心节点都可以处理用户的请求。所以，把数据量小但是访问频繁的消息数据直接存储到etcd中也可以实现负载均衡的效果。</li><li>分布式通知与协调：与消息发布和订阅类似，都用到了etcd中的Watcher机制，通过注册与异步通知机制，实现<a href="https://www.zhihu.com/search?q=分布式&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">分布式</a>环境下不同系统之间的通知与协调，从而对数据变更做到实时处理。</li><li>分布式锁：因为etcd使用Raft算法保持了数据的强一致性，某次操作存储到集群中的值必然是全局一致的，所以很容易实现分布式锁。锁服务有两种使用方式，一是保持独占，二是控制时序。</li><li>集群监控与Leader竞选：通过etcd来进行监控实现起来非常简单并且实时性强。</li></ul><h3 id="3、简述什么是Kubernetes"><a href="#3、简述什么是Kubernetes" class="headerlink" title="3、简述什么是Kubernetes"></a><strong>3、简述什么是Kubernetes</strong></h3><p>Kubernetes是一个全新的基于容器技术的分布式系统支撑平台。是Google开源的容器集群管理系统（谷歌内部：Borg）。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等一系列完整功能，提高了大规模容器集群管理的便捷性。并且具有完备的集群管理能力，多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和发现机制、內建智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制以及多粒度的资源配额管理能力。</p><h3 id="4、简述Kubernetes和Docker的关系"><a href="#4、简述Kubernetes和Docker的关系" class="headerlink" title="4、简述Kubernetes和Docker的关系"></a><strong>4、简述Kubernetes和Docker的关系</strong></h3><p>Docker提供容器的生命周期管理和Docker镜像构建运行时容器。它的主要优点是将将软件/应用程序运行所需的设置和依赖项打包到一个容器中，从而实现了可移植性等优点。</p><p>Kubernetes用于关联和编排在多个主机上运行的容器。</p><h3 id="5、简述Minikube、Kubectl、Kubelet分别是什么"><a href="#5、简述Minikube、Kubectl、Kubelet分别是什么" class="headerlink" title="5、简述Minikube、Kubectl、Kubelet分别是什么"></a><strong>5、简述Minikube、Kubectl、Kubelet分别是什么</strong></h3><p>Minikube是一种可以在本地轻松运行一个单节点Kubernetes群集的工具。</p><p>Kubectl是一个命令行工具，可以使用该工具控制Kubernetes集群管理器，如检查<a href="https://www.zhihu.com/search?q=群集资源&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">群集资源</a>，创建、删除和更新组件，查看应用程序。</p><p>Kubelet是一个代理服务，它在每个节点上运行，并使从服务器与主服务器通信。</p><h3 id="6、简述Kubernetes常见的部署方式"><a href="#6、简述Kubernetes常见的部署方式" class="headerlink" title="6、简述Kubernetes常见的部署方式"></a><strong>6、简述Kubernetes常见的部署方式</strong></h3><p>常见的Kubernetes部署方式有：</p><ul><li>kubeadm，也是推荐的一种部署方式；</li><li><a href="https://www.zhihu.com/search?q=二进制&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">二进制</a>；</li><li>minikube，在本地轻松运行一个单节点Kubernetes群集的工具。</li></ul><h3 id="7、简述Kubernetes如何实现集群管理"><a href="#7、简述Kubernetes如何实现集群管理" class="headerlink" title="7、简述Kubernetes如何实现集群管理"></a><strong>7、简述Kubernetes如何实现集群管理</strong></h3><p>在集群管理方面，Kubernetes将集群中的机器划分为一个Master节点和一群工作节点Node。其中，在Master节点运行着集群管理相关的一组进程kube-apiserver、kube-controller-manager和kube-scheduler，这些进程实现了整个集群的资源管理、Pod调度、弹性伸缩、安全控制、系统监控和纠错等管理能力，并且都是全自动完成的。</p><h3 id="8、简述Kubernetes的优势、适应场景及其特点"><a href="#8、简述Kubernetes的优势、适应场景及其特点" class="headerlink" title="8、简述Kubernetes的优势、适应场景及其特点"></a><strong>8、简述Kubernetes的优势、适应场景及其特点</strong></h3><p>Kubernetes作为一个完备的分布式系统支撑平台，其主要优势：</p><ul><li>容器编排</li><li>轻量级</li><li>开源</li><li>弹性伸缩</li><li>负载均衡</li></ul><p>Kubernetes常见场景：</p><ul><li>快速部署应用</li><li>快速扩展应用</li><li>无缝对接新的应用功能</li><li>节省资源，优化硬件资源的使用</li></ul><p>Kubernetes相关特点：</p><ul><li>可移植：支持公有云、私有云、<a href="https://www.zhihu.com/search?q=混合云&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">混合云</a>、多重云（multi-cloud）。</li><li>可扩展: 模块化,、插件化、可挂载、可组合。</li><li>自动化: 自动部署、自动重启、自动复制、自动伸缩/扩展。</li></ul><h3 id="9、简述Kubernetes的缺点或当前的不足之处"><a href="#9、简述Kubernetes的缺点或当前的不足之处" class="headerlink" title="9、简述Kubernetes的缺点或当前的不足之处"></a><strong>9、简述Kubernetes的缺点或当前的不足之处</strong></h3><p>Kubernetes当前存在的缺点（不足）如下：</p><ul><li>安装过程和配置相对困难复杂。</li><li>管理服务相对繁琐。</li><li>运行和编译需要很多时间。</li><li>它比其他替代品更昂贵。</li><li>对于简单的应用程序来说，可能不需要涉及Kubernetes即可满足。</li></ul><h3 id="10、简述Kubernetes相关基础概念"><a href="#10、简述Kubernetes相关基础概念" class="headerlink" title="10、简述Kubernetes相关基础概念"></a><strong>10、简述Kubernetes相关基础概念</strong></h3><ul><li>Master：Kubernetes集群的管理节点，负责管理集群，提供集群的资源数据访问入口。拥有etcd存储服务（可选），运行Api Server进程，Controller Manager服务进程及Scheduler服务进程。</li><li>Node（worker）：Node（worker）是Kubernetes集群架构中运行Pod的服务节点，是Kubernetes集群操作的单元，用来承载被分配Pod的运行，是Pod运行的宿主机。运行Docker Eninge服务，守护进程kunelet及负载均衡器kube-proxy。</li><li>Pod：运行于Node节点上，若干相关容器的组合。Pod内包含的容器运行在同一宿主机上，使用相同的网络命名空间、IP地址和端口，能够通过localhost进行通信。Pod是Kubernetes进行创建、调度和管理的最小单位，它提供了比容器更高层次的抽象，使得部署和管理更加灵活。一个Pod可以包含一个容器或者多个相关容器。</li><li>Label：Kubernetes中的Label实质是一系列的Key/Value键值对，其中key与value可自定义。Label可以附加到各种资源对象上，如Node、Pod、Service、RC等。一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上去。Kubernetes通过Label Selector（标签选择器）查询和筛选资源对象。</li><li>Replication Controller：Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。集群中副本的数量大于指定数量，则会停止指定数量之外的多余容器数量。反之，则会启动少于指定数量个数的容器，保证数量不变。Replication Controller是实现弹性伸缩、动态扩容和滚动升级的核心。</li><li>Deployment：Deployment在内部使用了RS来实现目的，Deployment相当于RC的一次升级，其最大的特色为可以随时获知当前Pod的部署进度。</li><li>HPA（Horizontal Pod Autoscaler）：Pod的横向自动扩容，也是Kubernetes的一种资源，通过追踪分析RC控制的所有Pod目标的负载变化情况，来确定是否需要针对性的调整Pod副本数量。</li><li>Service：Service定义了Pod的逻辑集合和访问该集合的策略，是真实服务的抽象。Service提供了一个统一的服务访问入口以及服务代理和发现机制，关联多个相同Label的Pod，用户不需要了解后台Pod是如何运行。</li><li>Volume：Volume是Pod中能够被多个容器访问的共享目录，Kubernetes中的Volume是定义在Pod上，可以被一个或多个Pod中的容器挂载到某个目录下。</li><li>Namespace：Namespace用于实现多租户的资源隔离，可将集群内部的资源对象分配到不同的Namespace中，形成逻辑上的不同项目、小组或用户组，便于不同的Namespace在共享使用整个集群的资源的同时还能被分别管理。</li></ul><h3 id="11、简述Kubernetes集群相关组件"><a href="#11、简述Kubernetes集群相关组件" class="headerlink" title="11、简述Kubernetes集群相关组件"></a><strong>11、简述Kubernetes集群相关组件</strong></h3><p>Kubernetes Master控制组件，调度管理整个系统（集群），包含如下组件：</p><ul><li>Kubernetes API Server：作为Kubernetes系统的入口，其封装了核心对象的<a href="https://www.zhihu.com/search?q=增删改查&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">增删改查</a>操作，以RESTful API接口方式提供给外部客户和内部组件调用，集群内各个功能模块之间数据交互和通信的中心枢纽。</li><li>Kubernetes Scheduler：为新建立的Pod进行节点（Node）选择（即分配机器），负责集群的资源调度。</li><li>Kubernetes Controller：负责执行各种控制器，目前已经提供了很多控制器来保证Kubernetes的正常运行。</li><li>Replication Controller：管理维护Replication Controller，关联Replication Controller和Pod，保证Replication Controller定义的副本数量与实际运行Pod数量一致。</li><li>Node Controller：管理维护Node，定期检查Node的健康状态，标识出（失效|未失效）的Node节点。</li><li>Namespace Controller：管理维护Namespace，定期清理无效的Namespace，包括Namesapce下的API对象，比如Pod、Service等。</li><li>Service Controller：管理维护Service，提供负载以及服务代理。</li><li>EndPoints Controller：管理维护Endpoints，关联Service和Pod，创建Endpoints为Service的后端，当Pod发生变化时，实时更新Endpoints。</li><li>Service Account Controller：管理维护Service Account，为每个Namespace创建默认的Service Account，同时为Service Account创建Service Account Secret。</li><li>Persistent Volume Controller：管理维护Persistent Volume和Persistent Volume Claim，为新的Persistent Volume Claim分配Persistent Volume进行绑定，为释放的Persistent Volume执行清理回收。</li><li>Daemon Set Controller：管理维护Daemon Set，负责创建Daemon Pod，保证指定的Node上正常的运行Daemon Pod。</li><li>Deployment Controller：管理维护Deployment，关联Deployment和Replication Controller，保证运行指定数量的Pod。当Deployment更新时，控制实现Replication Controller和Pod的更新。</li><li>Job Controller：管理维护Job，为Jod创建一次性任务Pod，保证完成Job指定完成的任务数目</li><li>Pod Autoscaler Controller：实现Pod的自动伸缩，定时获取监控数据，进行策略匹配，当满足条件时执行Pod的伸缩动作。</li></ul><h3 id="12、简述Kubernetes-RC的机制"><a href="#12、简述Kubernetes-RC的机制" class="headerlink" title="12、简述Kubernetes RC的机制"></a><strong>12、简述Kubernetes RC的机制</strong></h3><p>Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。当定义了RC并提交至Kubernetes集群中之后，Master节点上的Controller Manager组件获悉，并同时巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于此RC的期望值，若存在过多的Pod副本在运行，系统会停止一些Pod，反之则自动创建一些Pod。</p><h3 id="13、简述Kubernetes-Replica-Set和Replication-Controller之间有什么区别"><a href="#13、简述Kubernetes-Replica-Set和Replication-Controller之间有什么区别" class="headerlink" title="13、简述Kubernetes Replica Set和Replication Controller之间有什么区别"></a><strong>13、简述Kubernetes Replica Set和Replication Controller之间有什么区别</strong></h3><p>Replica Set和Replication Controller类似，都是确保在任何给定时间运行指定数量的Pod副本。不同之处在于RS使用基于集合的选择器，而Replication Controller使用基于权限的选择器。</p><h3 id="14、简述kube-proxy的作用"><a href="#14、简述kube-proxy的作用" class="headerlink" title="14、简述kube-proxy的作用"></a><strong>14、简述kube-proxy的作用</strong></h3><p>kube-proxy运行在所有节点上，它监听apiserver中service和endpoint的变化情况，创建路由规则以提供服务IP和负载均衡功能。简单理解此进程是Service的透明代理兼<a href="https://www.zhihu.com/search?q=负载均衡器&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">负载均衡器</a>，其核心功能是将到某个Service的访问请求转发到后端的多个Pod实例上。</p><h3 id="15、简述kube-proxy-iptables的原理"><a href="#15、简述kube-proxy-iptables的原理" class="headerlink" title="15、简述kube-proxy iptables的原理"></a><strong>15、简述kube-proxy iptables的原理</strong></h3><p>Kubernetes从1.2版本开始，将iptables作为kube-proxy的默认模式。iptables模式下的kube-proxy不再起到Proxy的作用，其核心功能：通过API Server的Watch接口实时跟踪Service与Endpoint的变更信息，并更新对应的iptables规则，Client的请求流量则通过iptables的NAT机制“直接路由”到目标Pod。</p><h3 id="16、简述kube-proxy-ipvs的原理"><a href="#16、简述kube-proxy-ipvs的原理" class="headerlink" title="16、简述kube-proxy ipvs的原理"></a><strong>16、简述kube-proxy ipvs的原理</strong></h3><p>IPVS在Kubernetes1.11中升级为GA稳定版。IPVS则专门用于高性能负载均衡，并使用更高效的数据结构（Hash表），允许几乎无限的规模扩张，因此被kube-proxy采纳为最新模式。</p><p>在IPVS模式下，使用iptables的扩展ipset，而不是直接调用iptables来生成规则链。iptables规则链是一个线性的数据结构，ipset则引入了带索引的数据结构，因此当规则很多时，也可以很高效地查找和匹配。</p><p>可以将ipset简单理解为一个IP（段）的集合，这个集合的内容可以是IP地址、IP网段、端口等，iptables可以直接添加规则对这个“可变的集合”进行操作，这样做的好处在于可以大大减少iptables规则的数量，从而减少性能损耗。</p><h3 id="17、简述kube-proxy-ipvs和iptables的异同"><a href="#17、简述kube-proxy-ipvs和iptables的异同" class="headerlink" title="17、简述kube-proxy ipvs和iptables的异同"></a><strong>17、简述kube-proxy ipvs和iptables的异同</strong></h3><p>iptables与IPVS都是基于Netfilter实现的，但因为定位不同，二者有着本质的差别：iptables是为防火墙而设计的；IPVS则专门用于高性能负载均衡，并使用更高效的数据结构（Hash表），允许几乎无限的规模扩张。</p><p>与iptables相比，IPVS拥有以下明显优势：</p><ul><li>为大型集群提供了更好的可扩展性和性能；</li><li>支持比iptables更复杂的复制均衡算法（最小负载、最少连接、加权等）；</li><li>支持服务器健康检查和连接重试等功能；</li><li>可以动态修改ipset的集合，即使iptables的规则正在使用这个集合。</li></ul><h3 id="18、简述Kubernetes中什么是静态Pod"><a href="#18、简述Kubernetes中什么是静态Pod" class="headerlink" title="18、简述Kubernetes中什么是静态Pod"></a><strong>18、简述Kubernetes中什么是静态Pod</strong></h3><p>静态Pod是由kubelet进行管理的仅存在于特定Node的Pod上，他们不能通过API Server进行管理，无法与ReplicationController、Deployment或者DaemonSet进行关联，并且kubelet无法对他们进行健康检查。静态Pod总是由kubelet进行创建，并且总是在kubelet所在的Node上运行。</p><h3 id="19、简述Kubernetes中Pod可能位于的状态"><a href="#19、简述Kubernetes中Pod可能位于的状态" class="headerlink" title="19、简述Kubernetes中Pod可能位于的状态"></a><strong>19、简述Kubernetes中Pod可能位于的状态</strong></h3><ul><li>Pending：API Server已经创建该Pod，且Pod内还有一个或多个容器的镜像没有创建，包括正在下载镜像的过程。</li><li>Running：Pod内所有容器均已创建，且至少有一个容器处于运行状态、正在启动状态或正在重启状态。</li><li>Succeeded：Pod内所有容器均成功执行退出，且不会重启。</li><li>Failed：Pod内所有容器均已退出，但至少有一个容器退出为失败状态。</li><li>Unknown：由于某种原因无法获取该Pod状态，可能由于网络通信不畅导致。</li></ul><h3 id="20、简述Kubernetes创建一个Pod的主要流程？"><a href="#20、简述Kubernetes创建一个Pod的主要流程？" class="headerlink" title="20、简述Kubernetes创建一个Pod的主要流程？"></a><strong>20、简述Kubernetes创建一个Pod的主要流程？</strong></h3><p>Kubernetes中创建一个Pod涉及多个组件之间联动，主要流程如下：</p><ul><li>客户端提交Pod的配置信息（可以是yaml文件定义的信息）到kube-apiserver。</li><li>Apiserver收到指令后，通知给controller-manager创建一个资源对象。</li><li>Controller-manager通过api-server将Pod的配置信息存储到etcd数据中心中。</li><li>Kube-scheduler检测到Pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行Pod的节点，然后将Pod的资源配置单发送到Node节点上的kubelet组件上。</li><li>Kubelet根据scheduler发来的资源配置单运行Pod，运行成功后，将Pod的运行信息返回给scheduler，scheduler将返回的Pod运行状况的信息存储到etcd数据中心。</li></ul><h3 id="21、简述Kubernetes中Pod的重启策略"><a href="#21、简述Kubernetes中Pod的重启策略" class="headerlink" title="21、简述Kubernetes中Pod的重启策略"></a><strong>21、简述Kubernetes中Pod的重启策略</strong></h3><p>Pod重启策略（RestartPolicy）应用于Pod内的所有容器，并且仅在Pod所处的Node上由kubelet进行判断和重启操作。当某个容器异常退出或者健康检查失败时，kubelet将根据RestartPolicy的设置来进行相应操作。</p><p>Pod的重启策略包括Always、OnFailure和Never，默认值为Always。</p><ul><li>Always：当容器失效时，由kubelet自动重启该容器；</li><li>OnFailure：当容器终止运行且退出码不为0时，由kubelet自动重启该容器；</li><li>Never：不论容器运行状态如何，kubelet都不会重启该容器。</li></ul><p>同时Pod的重启策略与控制方式关联，当前可用于管理Pod的控制器包括ReplicationController、Job、DaemonSet及直接管理kubelet管理（静态Pod）。</p><p>不同控制器的重启策略限制如下：</p><ul><li>RC和DaemonSet：必须设置为Always，需要保证该容器持续运行；</li><li>Job：OnFailure或Never，确保容器执行完成后不再重启；</li><li>kubelet：在Pod失效时重启，不论将RestartPolicy设置为何值，也不会对Pod进行健康检查。</li></ul><h3 id="22、简述Kubernetes中Pod的健康检查方式"><a href="#22、简述Kubernetes中Pod的健康检查方式" class="headerlink" title="22、简述Kubernetes中Pod的健康检查方式"></a><strong>22、简述Kubernetes中Pod的健康检查方式</strong></h3><p>对Pod的健康检查可以通过两类探针来检查：LivenessProbe和ReadinessProbe。</p><ul><li>LivenessProbe探针：用于判断容器是否存活（running状态），如果LivenessProbe探针探测到容器不健康，则kubelet将杀掉该容器，并根据容器的重启策略做相应处理。若一个容器不包含LivenessProbe探针，kubelet认为该容器的LivenessProbe探针返回值用于是“Success”。</li><li>ReadineeProbe探针：用于判断容器是否启动完成（ready状态）。如果ReadinessProbe探针探测到失败，则Pod的状态将被修改。Endpoint Controller将从Service的Endpoint中删除包含该容器所在Pod的Eenpoint。</li><li>startupProbe探针：启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉。</li></ul><h3 id="23、简述Kubernetes-Pod的LivenessProbe探针的常见方式"><a href="#23、简述Kubernetes-Pod的LivenessProbe探针的常见方式" class="headerlink" title="23、简述Kubernetes Pod的LivenessProbe探针的常见方式"></a><strong>23、简述Kubernetes Pod的LivenessProbe探针的常见方式</strong></h3><p>kubelet定期执行LivenessProbe探针来诊断容器的健康状态，通常有以下三种方式：</p><ul><li>ExecAction：在容器内执行一个命令，若返回码为0，则表明容器健康。</li><li>TCPSocketAction：通过容器的IP地址和端口号执行TCP检查，若能建立TCP连接，则表明容器健康。</li><li>HTTPGetAction：通过容器的IP地址、端口号及路径调用HTTP Get方法，若响应的状态码大于等于200且小于400，则表明容器健康。</li></ul><h3 id="24、简述Kubernetes-Pod的常见调度方式"><a href="#24、简述Kubernetes-Pod的常见调度方式" class="headerlink" title="24、简述Kubernetes Pod的常见调度方式"></a><strong>24、简述Kubernetes Pod的常见调度方式</strong></h3><p>Kubernetes中，Pod通常是容器的载体，主要有如下常见调度方式：</p><ul><li><p>Deployment或RC：该调度策略主要功能就是自动部署一个容器应用的多份副本，以及持续监控副本的数量，在集群内始终维持用户指定的副本数量。</p></li><li><p>NodeSelector：定向调度，当需要手动指定将Pod调度到特定Node上，可以通过Node的标签（Label）和Pod的nodeSelector属性相匹配。</p></li><li><p>NodeAffinity亲和性调度：亲和性调度机制极大的扩展了Pod的调度能力，目前有两种节点<a href="https://www.zhihu.com/search?q=亲和力&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">亲和力</a>表达：</p></li><li><ul><li>requiredDuringSchedulingIgnoredDuringExecution：硬规则，必须满足指定的规则，调度器才可以调度Pod至Node上（类似nodeSelector，语法不同）。</li><li>preferredDuringSchedulingIgnoredDuringExecution：软规则，优先调度至满足的Node的节点，但不强求，多个优先级规则还可以设置权重值。</li></ul></li></ul><ul><li><p>Taints和Tolerations（污点和容忍）：</p></li><li><ul><li>Taint：使Node拒绝特定Pod运行；</li><li>Toleration：为Pod的属性，表示Pod能容忍（运行）标注了Taint的Node。</li></ul></li></ul><h3 id="25、简述Kubernetes初始化容器（init-container）"><a href="#25、简述Kubernetes初始化容器（init-container）" class="headerlink" title="25、简述Kubernetes初始化容器（init container）"></a><strong>25、简述Kubernetes初始化容器（init container）</strong></h3><p>init container的运行方式与应用容器不同，它们必须先于应用容器执行完成，当设置了多个init container时，将按顺序逐个运行，并且只有前一个init container运行成功后才能运行后一个init container。当所有init container都成功运行后，Kubernetes才会初始化Pod的各种信息，并开始创建和运行应用容器。</p><h3 id="26、简述Kubernetes-deployment升级过程"><a href="#26、简述Kubernetes-deployment升级过程" class="headerlink" title="26、简述Kubernetes deployment升级过程"></a><strong>26、简述Kubernetes deployment升级过程</strong></h3><ul><li>初始创建Deployment时，系统创建了一个ReplicaSet，并按用户的需求创建了对应数量的Pod副本。</li><li>当更新Deployment时，系统创建了一个新的ReplicaSet，并将其副本数量扩展到1，然后将旧ReplicaSet缩减为2。</li><li>之后，系统继续按照相同的更新策略对新旧两个ReplicaSet进行逐个调整。</li><li>最后，新的ReplicaSet运行了对应个新版本Pod副本，旧的ReplicaSet副本数量则缩减为0。</li></ul><h3 id="27、简述Kubernetes-deployment升级策略"><a href="#27、简述Kubernetes-deployment升级策略" class="headerlink" title="27、简述Kubernetes deployment升级策略"></a><strong>27、简述Kubernetes deployment升级策略</strong></h3><p>在Deployment的定义中，可以通过spec.strategy指定Pod更新的策略，目前支持两种策略：Recreate（重建）和RollingUpdate（滚动更新），默认值为RollingUpdate。</p><ul><li>Recreate：设置spec.strategy.type=Recreate，表示Deployment在更新Pod时，会先杀掉所有正在运行的Pod，然后创建新的Pod。</li><li>RollingUpdate：设置spec.strategy.type=RollingUpdate，表示Deployment会以滚动更新的方式来逐个更新Pod。同时，可以通过设置spec.strategy.rollingUpdate下的两个参数（maxUnavailable和maxSurge）来控制滚动更新的过程。</li></ul><h3 id="28、简述Kubernetes-DaemonSet类型的资源特性"><a href="#28、简述Kubernetes-DaemonSet类型的资源特性" class="headerlink" title="28、简述Kubernetes DaemonSet类型的资源特性"></a><strong>28、简述Kubernetes DaemonSet类型的资源特性</strong></h3><p>DaemonSet资源对象会在每个Kubernetes集群中的节点上运行，并且每个节点只能运行一个Pod，这是它和Deployment资源对象的最大也是唯一的区别。因此，在定义yaml文件中，不支持定义replicas。</p><p>它的一般使用场景如下：</p><ul><li>在去做每个节点的日志收集工作。</li><li>监控每个节点的的运行状态。</li></ul><h3 id="29、简述Kubernetes自动扩容机制"><a href="#29、简述Kubernetes自动扩容机制" class="headerlink" title="29、简述Kubernetes自动扩容机制"></a><strong>29、简述Kubernetes自动扩容机制</strong></h3><p>Kubernetes使用Horizontal Pod Autoscaler（HPA）的控制器实现基于CPU使用率进行自动Pod扩缩容的功能。HPA控制器周期性地监测目标Pod的资源性能指标，并与HPA资源对象中的扩缩容条件进行对比，在满足条件时对Pod副本数量进行调整。</p><p>Kubernetes中的某个Metrics Server（Heapster或自定义Metrics Server）持续采集所有Pod副本的指标数据。HPA控制器通过Metrics Server的API（Heapster的API或聚合API）获取这些数据，基于用户定义的扩缩容规则进行计算，得到目标Pod副本数量。</p><p>当目标Pod副本数量与当前副本数量不同时，HPA控制器就向Pod的副本控制器（Deployment、RC或ReplicaSet）发起scale操作，调整Pod的副本数量，完成扩缩容操作。</p><h3 id="30、简述Kubernetes-Service类型"><a href="#30、简述Kubernetes-Service类型" class="headerlink" title="30、简述Kubernetes Service类型"></a><strong>30、简述Kubernetes Service类型</strong></h3><p>通过创建Service，可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发到后端的各个容器应用上。其主要类型有：</p><ul><li>ClusterIP：虚拟的服务IP地址，该地址用于Kubernetes集群内部的Pod访问，在Node上kube-proxy通过设置的iptables规则进行转发；</li><li>NodePort：使用宿主机的端口，使能够访问各Node的外部客户端通过Node的IP地址和端口号就能访问服务；</li><li>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，需要在spec.status.loadBalancer字段指定外部负载均衡器的IP地址，通常用于<a href="https://www.zhihu.com/search?q=公有云&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">公有云</a>。</li></ul><h3 id="31、简述Kubernetes-Service分发后端的策略"><a href="#31、简述Kubernetes-Service分发后端的策略" class="headerlink" title="31、简述Kubernetes Service分发后端的策略"></a><strong>31、简述Kubernetes Service分发后端的策略</strong></h3><p>Service负载分发的策略有：RoundRobin和SessionAffinity</p><ul><li>RoundRobin：默认为轮询模式，即轮询将请求转发到后端的各个Pod上。</li><li>SessionAffinity：基于客户端IP地址进行会话保持的模式，即第1次将某个客户端发起的请求转发到后端的某个Pod上，之后从相同的<a href="https://www.zhihu.com/search?q=客户端&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">客户端</a>发起的请求都将被转发到后端相同的Pod上。</li></ul><h3 id="32、简述Kubernetes-Headless-Service"><a href="#32、简述Kubernetes-Headless-Service" class="headerlink" title="32、简述Kubernetes Headless Service"></a><strong>32、简述Kubernetes Headless Service</strong></h3><p>在某些应用场景中，若需要人为指定负载均衡器，不使用Service提供的默认负载均衡的功能，或者应用程序希望知道属于同组服务的其他实例。Kubernetes提供了Headless Service来实现这种功能，即不为Service设置ClusterIP（入口IP地址），仅通过Label Selector将后端的Pod列表返回给调用的客户端。</p><h3 id="33、简述Kubernetes外部如何访问集群内的服务"><a href="#33、简述Kubernetes外部如何访问集群内的服务" class="headerlink" title="33、简述Kubernetes外部如何访问集群内的服务"></a><strong>33、简述Kubernetes外部如何访问集群内的服务</strong></h3><p>对于Kubernetes，集群外的客户端默认情况，无法通过Pod的IP地址或者Service的虚拟IP地址：虚拟端口号进行访问。通常可以通过以下方式进行访问Kubernetes集群内的服务：</p><ul><li>映射Pod到物理机：将Pod端口号映射到宿主机，即在Pod中采用hostPort方式，以使客户端应用能够通过物理机访问容器应用。</li><li>映射Service到物理机：将Service端口号映射到宿主机，即在Service中采用nodePort方式，以使客户端应用能够通过物理机访问容器应用。</li><li>映射Sercie到LoadBalancer：通过设置LoadBalancer映射到云服务商提供的LoadBalancer地址。这种用法仅用于在公有云服务提供商的云平台上设置Service的场景。</li></ul><h3 id="34、简述Kubernetes-ingress"><a href="#34、简述Kubernetes-ingress" class="headerlink" title="34、简述Kubernetes ingress"></a><strong>34、简述Kubernetes ingress</strong></h3><p>Kubernetes的Ingress资源对象，用于将不同URL的访问请求转发到后端不同的Service，以实现HTTP层的业务路由机制。</p><p>Kubernetes使用了Ingress策略和Ingress Controller，两者结合并实现了一个完整的Ingress负载均衡器。使用Ingress进行负载分发时，Ingress Controller基于Ingress规则将客户端请求直接转发到Service对应的后端Endpoint（Pod）上，从而跳过kube-proxy的转发功能，kube-proxy不再起作用，全过程为：ingress controller + ingress 规则 —-&gt; services。</p><p>同时当Ingress Controller提供的是对外服务，则实际上实现的是边缘路由器的功能。</p><h3 id="35、简述Kubernetes镜像的下载策略"><a href="#35、简述Kubernetes镜像的下载策略" class="headerlink" title="35、简述Kubernetes镜像的下载策略"></a><strong>35、简述Kubernetes镜像的下载策略</strong></h3><p>Kubernetes的镜像下载策略有三种：Always、Never、IFNotPresent。</p><ul><li>Always：镜像标签为latest时，总是从指定的仓库中获取镜像。</li><li>Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像。</li><li>IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。</li></ul><h3 id="36、简述Kubernetes的负载均衡器"><a href="#36、简述Kubernetes的负载均衡器" class="headerlink" title="36、简述Kubernetes的负载均衡器"></a><strong>36、简述Kubernetes的负载均衡器</strong></h3><p>负载均衡器是暴露服务的最常见和标准方式之一。</p><p>根据工作环境使用两种类型的负载均衡器，即内部负载均衡器或外部负载均衡器。内部负载均衡器自动平衡负载并使用所需配置分配容器，而外部负载均衡器将流量从外部负载引导至后端容器。</p><h3 id="37、简述Kubernetes各模块如何与API-Server通信"><a href="#37、简述Kubernetes各模块如何与API-Server通信" class="headerlink" title="37、简述Kubernetes各模块如何与API Server通信"></a><strong>37、简述Kubernetes各模块如何与API Server通信</strong></h3><p>Kubernetes API Server作为集群的核心，负责集群各功能模块之间的通信。集群内的各个功能模块通过API Server将信息存入etcd，当需要获取和操作这些数据时，则通过API Server提供的REST接口（用GET、LIST或WATCH方法）来实现，从而实现各模块之间的信息交互。</p><p>如kubelet进程与API Server的交互：每个Node上的kubelet每隔一个时间周期，就会调用一次API Server的REST接口报告自身状态，API Server在接收到这些信息后，会将节点状态信息更新到etcd中。</p><p>如kube-controller-manager进程与API Server的交互：kube-controller-manager中的Node Controller模块通过API Server提供的Watch接口实时监控Node的信息，并做相应处理。</p><p>如kube-scheduler进程与API Server的交互：Scheduler通过API Server的Watch接口监听到新建Pod副本的信息后，会检索所有符合该Pod要求的Node列表，开始执行Pod调度逻辑，在调度成功后将Pod绑定到目标节点上。</p><h3 id="38、简述Kubernetes-Scheduler作用及实现原理"><a href="#38、简述Kubernetes-Scheduler作用及实现原理" class="headerlink" title="38、简述Kubernetes Scheduler作用及实现原理"></a><strong>38、简述Kubernetes Scheduler作用及实现原理</strong></h3><p>Kubernetes Scheduler是负责Pod调度的重要功能模块，Kubernetes Scheduler在整个系统中承担了“承上启下”的重要功能，“承上”是指它负责接收Controller Manager创建的新Pod，为其调度至目标Node；“启下”是指调度完成后，目标Node上的kubelet服务进程接管后继工作，负责Pod接下来生命周期。</p><p>Kubernetes Scheduler的作用是将待调度的Pod（API新创建的Pod、Controller Manager为补足副本而创建的Pod等）按照特定的调度算法和调度策略绑定（Binding）到集群中某个合适的Node上，并将绑定信息写入etcd中。</p><p>在整个调度过程中涉及三个对象，分别是待调度Pod列表、可用Node列表，以及调度算法和策略。</p><p>Kubernetes Scheduler通过调度算法调度为待调度Pod列表中的每个Pod从Node列表中选择一个最适合的Node来实现Pod的调度。随后，目标节点上的kubelet通过API Server监听到Kubernetes Scheduler产生的Pod绑定事件，然后获取对应的Pod清单，下载Image镜像并启动容器。</p><h3 id="39、简述Kubernetes-Scheduler使用哪两种算法将Pod绑定到worker节点"><a href="#39、简述Kubernetes-Scheduler使用哪两种算法将Pod绑定到worker节点" class="headerlink" title="39、简述Kubernetes Scheduler使用哪两种算法将Pod绑定到worker节点"></a><strong>39、简述Kubernetes Scheduler使用哪两种算法将Pod绑定到worker节点</strong></h3><p>Kubernetes Scheduler根据如下两种调度算法将 Pod 绑定到最合适的工作节点：</p><ul><li>预选（Predicates）：输入是所有节点，输出是满足预选条件的节点。kube-scheduler根据预选策略过滤掉不满足策略的Nodes。如果某节点的资源不足或者不满足预选策略的条件则无法通过预选。如“Node的label必须与Pod的Selector一致”。</li><li>优选（Priorities）：输入是预选阶段筛选出的节点，优选会根据优先策略为通过预选的Nodes进行打分排名，选择得分最高的Node。例如，资源越富裕、负载越小的Node可能具有越高的排名。</li></ul><h3 id="40、简述Kubernetes-kubelet的作用"><a href="#40、简述Kubernetes-kubelet的作用" class="headerlink" title="40、简述Kubernetes kubelet的作用"></a><strong>40、简述Kubernetes kubelet的作用</strong></h3><p>在Kubernetes集群中，在每个Node（又称Worker）上都会启动一个kubelet服务进程。该进程用于处理Master下发到本节点的任务，管理Pod及Pod中的容器。每个kubelet进程都会在API Server上注册节点自身的信息，定期向Master汇报节点资源的使用情况，并通过cAdvisor监控容器和节点资源。</p><h3 id="41、简述Kubernetes-kubelet监控Worker节点资源是使用什么组件来实现的"><a href="#41、简述Kubernetes-kubelet监控Worker节点资源是使用什么组件来实现的" class="headerlink" title="41、简述Kubernetes kubelet监控Worker节点资源是使用什么组件来实现的"></a><strong>41、简述Kubernetes kubelet监控Worker节点资源是使用什么组件来实现的</strong></h3><p>kubelet使用cAdvisor对worker节点资源进行监控。在Kubernetes系统中，cAdvisor已被默认集成到kubelet组件内，当kubelet服务启动时，它会自动启动cAdvisor服务，然后cAdvisor会实时采集所在节点的性能指标及在节点上运行的容器的性能指标。</p><h3 id="42、简述Kubernetes如何保证集群的安全性"><a href="#42、简述Kubernetes如何保证集群的安全性" class="headerlink" title="42、简述Kubernetes如何保证集群的安全性"></a><strong>42、简述Kubernetes如何保证集群的安全性</strong></h3><p>Kubernetes通过一系列机制来实现集群的安全控制，主要有如下不同的维度：</p><ul><li><p>基础设施方面：保证容器与其所在宿主机的隔离；</p></li><li><p>权限方面：</p></li><li><ul><li>最小权限原则：合理限制所有组件的权限，确保组件只执行它被授权的行为，通过限制单个组件的能力来限制它的权限范围。</li><li>用户权限：划分普通用户和管理员的角色。</li></ul></li></ul><ul><li><p>集群方面：</p></li><li><ul><li>API Server的认证授权：Kubernetes集群中所有资源的访问和变更都是通过Kubernetes API Server来实现的，因此需要建议采用更安全的HTTPS或Token来识别和认证客户端身份（Authentication），以及随后访问权限的授权（Authorization）环节。</li><li>API Server的授权管理：通过授权策略来决定一个API调用是否合法。对合法用户进行授权并且随后在用户访问时进行鉴权，建议采用更安全的RBAC方式来提升集群安全授权。</li></ul></li></ul><ul><li>敏感数据引入Secret机制：对于集群敏感数据建议使用Secret方式进行保护。</li><li>AdmissionControl（准入机制）：对kubernetes api的请求过程中，顺序为：先经过认证 &amp; 授权，然后执行准入操作，最后对目标对象进行操作。</li></ul><h3 id="43、简述Kubernetes准入机制"><a href="#43、简述Kubernetes准入机制" class="headerlink" title="43、简述Kubernetes准入机制"></a><strong>43、简述Kubernetes准入机制</strong></h3><p>在对集群进行请求时，每个准入控制代码都按照一定顺序执行。如果有一个准入控制拒绝了此次请求，那么整个请求的结果将会立即返回，并提示用户相应的error信息。</p><p>准入控制（AdmissionControl）准入控制本质上为一段准入代码，在对kubernetes api的请求过程中，顺序为：先经过认证 &amp; 授权，然后执行准入操作，最后对目标对象进行操作。常用组件（控制代码）如下：</p><ul><li>AlwaysAdmit：允许所有请求</li><li>AlwaysDeny：禁止所有请求，多用于测试环境。</li><li>ServiceAccount：它将serviceAccounts实现了自动化，它会辅助serviceAccount做一些事情，比如如果pod没有serviceAccount属性，它会自动添加一个default，并确保pod的serviceAccount始终存在。</li><li>LimitRanger：观察所有的请求，确保没有违反已经定义好的约束条件，这些条件定义在namespace中LimitRange对象中。</li><li>NamespaceExists：观察所有的请求，如果请求尝试创建一个不存在的namespace，则这个请求被拒绝。</li></ul><h3 id="44、简述Kubernetes-RBAC及其特点（优势）"><a href="#44、简述Kubernetes-RBAC及其特点（优势）" class="headerlink" title="44、简述Kubernetes RBAC及其特点（优势）"></a><strong>44、简述Kubernetes RBAC及其特点（优势）</strong></h3><p>RBAC是基于角色的访问控制，是一种基于个人用户的角色来管理对计算机或网络资源的访问的方法。</p><p>相对于其他授权模式，RBAC具有如下优势：</p><ul><li>对集群中的资源和非资源权限均有完整的覆盖。</li><li>整个RBAC完全由几个API对象完成， 同其他API对象一样， 可以用kubectl或API进行操作。</li><li>可以在运行时进行调整，无须重新启动API Server。</li></ul><h3 id="45、简述Kubernetes-Secret作用"><a href="#45、简述Kubernetes-Secret作用" class="headerlink" title="45、简述Kubernetes Secret作用"></a><strong>45、简述Kubernetes Secret作用</strong></h3><p>Secret对象，主要作用是保管私密数据，比如密码、OAuth Tokens、SSH Keys等信息。将这些私密信息放在Secret对象中比直接放在Pod或Docker Image中更安全，也更便于使用和分发。</p><h3 id="46、简述Kubernetes-Secret有哪些使用方式"><a href="#46、简述Kubernetes-Secret有哪些使用方式" class="headerlink" title="46、简述Kubernetes Secret有哪些使用方式"></a><strong>46、简述Kubernetes Secret有哪些使用方式</strong></h3><p>创建完secret之后，可通过如下三种方式使用：</p><ul><li>在创建Pod时，通过为Pod指定Service Account来自动使用该Secret。</li><li>通过挂载该Secret到Pod来使用它。</li><li>在Docker镜像下载时使用，通过指定Pod的spc.ImagePullSecrets来引用它。</li></ul><h3 id="47、简述Kubernetes-PodSecurityPolicy机制"><a href="#47、简述Kubernetes-PodSecurityPolicy机制" class="headerlink" title="47、简述Kubernetes PodSecurityPolicy机制"></a><strong>47、简述Kubernetes PodSecurityPolicy机制</strong></h3><p>Kubernetes PodSecurityPolicy是为了更精细地控制Pod对资源的使用方式以及提升安全策略。在开启PodSecurityPolicy准入控制器后，Kubernetes默认不允许创建任何Pod，需要创建PodSecurityPolicy策略和相应的RBAC授权策略（Authorizing Policies），Pod才能创建成功。</p><h3 id="48、简述Kubernetes-PodSecurityPolicy机制能实现哪些安全策略"><a href="#48、简述Kubernetes-PodSecurityPolicy机制能实现哪些安全策略" class="headerlink" title="48、简述Kubernetes PodSecurityPolicy机制能实现哪些安全策略"></a><strong>48、简述Kubernetes PodSecurityPolicy机制能实现哪些安全策略</strong></h3><p>在PodSecurityPolicy对象中可以设置不同字段来控制Pod运行时的各种安全策略，常见的有：</p><ul><li>特权模式：privileged是否允许Pod以特权模式运行。</li><li>宿主机资源：控制Pod对宿主机资源的控制，如hostPID：是否允许Pod共享宿主机的进程空间。</li><li>用户和组：设置运行容器的用户ID（范围）或组（范围）。</li><li>提升权限：AllowPrivilegeEscalation：设置容器内的子进程是否可以提升权限，通常在设置非root用户（MustRunAsNonRoot）时进行设置。</li><li>SELinux：进行SELinux的相关配置。</li></ul><h3 id="49、简述Kubernetes网络模型"><a href="#49、简述Kubernetes网络模型" class="headerlink" title="49、简述Kubernetes网络模型"></a><strong>49、简述Kubernetes网络模型</strong></h3><p>Kubernetes网络模型中每个Pod都拥有一个独立的IP地址，并假定所有Pod都在一个可以直接连通的、扁平的网络空间中。所以不管它们是否运行在同一个Node（宿主机）中，都要求它们可以直接通过对方的IP进行访问。设计这个原则的原因是，用户不需要额外考虑如何建立Pod之间的连接，也不需要考虑如何将容器端口映射到主机端口等问题。</p><p>同时为每个Pod都设置一个IP地址的模型使得同一个Pod内的不同容器会共享同一个网络命名空间，也就是同一个Linux网络协议栈。这就意味着同一个Pod内的容器可以通过localhost来连接对方的端口。</p><p>在Kubernetes的集群里，IP是以Pod为单位进行分配的。一个Pod内部的所有容器共享一个网络堆栈（相当于一个网络命名空间，它们的IP地址、网络设备、配置等都是共享的）。</p><h3 id="50、简述Kubernetes-CNI模型"><a href="#50、简述Kubernetes-CNI模型" class="headerlink" title="50、简述Kubernetes CNI模型"></a><strong>50、简述Kubernetes CNI模型</strong></h3><p>CNI提供了一种应用容器的插件化网络解决方案，定义对容器网络进行操作和配置的规范，通过插件的形式对CNI接口进行实现。CNI仅关注在创建容器时分配网络资源，和在销毁容器时删除网络资源。在CNI模型中只涉及两个概念：容器和网络。</p><ul><li>容器（Container）：是拥有独立Linux网络命名空间的环境，例如使用Docker或rkt创建的容器。容器需要拥有自己的Linux网络命名空间，这是加入网络的必要条件。</li><li>网络（Network）：表示可以互连的一组实体，这些实体拥有各自独立、唯一的IP地址，可以是容器、物理机或者其他网络设备（比如路由器）等。</li></ul><p>对容器网络的设置和操作都通过插件（Plugin）进行具体实现，CNI插件包括两种类型：CNI Plugin和IPAM（IP Address Management）Plugin。CNI Plugin负责为容器配置网络资源，IPAM Plugin负责对容器的IP地址进行分配和管理。IPAM Plugin作为CNI Plugin的一部分，与CNI Plugin协同工作。</p><h3 id="51、简述Kubernetes网络策略"><a href="#51、简述Kubernetes网络策略" class="headerlink" title="51、简述Kubernetes网络策略"></a><strong>51、简述Kubernetes网络策略</strong></h3><p>为实现细粒度的容器间网络访问隔离策略，Kubernetes引入Network Policy。</p><p>Network Policy的主要功能是对Pod间的网络通信进行限制和准入控制，设置允许访问或禁止访问的客户端Pod列表。Network Policy定义网络策略，配合策略控制器（Policy Controller）进行策略的实现。</p><h3 id="52、简述Kubernetes网络策略原理"><a href="#52、简述Kubernetes网络策略原理" class="headerlink" title="52、简述Kubernetes网络策略原理"></a><strong>52、简述Kubernetes网络策略原理</strong></h3><p>Network Policy的工作原理主要为：policy controller需要实现一个API Listener，监听用户设置的Network Policy定义，并将网络访问规则通过各Node的Agent进行实际设置（Agent则需要通过CNI网络插件实现）。</p><h3 id="53、简述Kubernetes中flannel的作用"><a href="#53、简述Kubernetes中flannel的作用" class="headerlink" title="53、简述Kubernetes中flannel的作用"></a><strong>53、简述Kubernetes中flannel的作用</strong></h3><p>Flannel可以用于Kubernetes底层网络的实现，主要作用有：</p><ul><li>它能协助Kubernetes，给每一个Node上的Docker容器都分配互相不冲突的IP地址。</li><li>它能在这些IP地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内。</li></ul><h3 id="54、简述Kubernetes-Calico网络组件实现原理"><a href="#54、简述Kubernetes-Calico网络组件实现原理" class="headerlink" title="54、简述Kubernetes Calico网络组件实现原理"></a><strong>54、简述Kubernetes Calico网络组件实现原理</strong></h3><p>Calico是一个基于BGP的纯三层的网络方案，与OpenStack、Kubernetes、AWS、GCE等云平台都能够良好地集成。</p><p>Calico在每个计算节点都利用Linux Kernel实现了一个高效的vRouter来负责数据转发。每个vRouter都通过BGP协议把在本节点上运行的容器的路由信息向整个Calico网络广播，并自动设置到达其他节点的路由转发规则。</p><p>Calico保证所有容器之间的数据流量都是通过IP路由的方式完成互联互通的。Calico节点组网时可以直接利用数据中心的网络结构（L2或者L3），不需要额外的NAT、隧道或者Overlay Network，没有额外的封包解包，能够节约CPU运算，提高网络效率。</p><h3 id="55、简述Kubernetes共享存储的作用"><a href="#55、简述Kubernetes共享存储的作用" class="headerlink" title="55、简述Kubernetes共享存储的作用"></a><strong>55、简述Kubernetes共享存储的作用</strong></h3><p>Kubernetes对于有状态的容器应用或者对数据需要持久化的应用，因此需要更加可靠的存储来保存应用产生的重要数据，以便容器应用在重建之后仍然可以使用之前的数据。因此需要使用共享存储。</p><h3 id="56、简述Kubernetes数据持久化的方式有哪些"><a href="#56、简述Kubernetes数据持久化的方式有哪些" class="headerlink" title="56、简述Kubernetes数据持久化的方式有哪些"></a><strong>56、简述Kubernetes数据持久化的方式有哪些</strong></h3><p>Kubernetes通过数据持久化来持久化保存重要数据，常见的方式有：</p><ul><li><p>EmptyDir（空目录）：没有指定要挂载宿主机上的某个目录，直接由Pod内保部映射到宿主机上。类似于docker中的manager volume。</p></li><li><p>场景：</p></li><li><ul><li>只需要临时将数据保存在磁盘上，比如在合并/排序算法中；</li><li>作为两个容器的共享存储。</li></ul></li></ul><ul><li><p>特性：</p></li><li><ul><li>同个pod里面的不同容器，共享同一个持久化目录，当pod节点删除时，volume的数据也会被删除。</li><li>emptyDir的数据持久化的生命周期和使用的pod一致，一般是作为临时存储使用。</li></ul></li></ul><ul><li>Hostpath：将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。</li><li>特性：增加了Pod与节点之间的耦合。</li></ul><p>PersistentVolume（简称PV）：如基于NFS服务的PV，也可以基于GFS的PV。它的作用是统一数据持久化目录，方便管理。</p><h3 id="57、简述Kubernetes-PV和PVC"><a href="#57、简述Kubernetes-PV和PVC" class="headerlink" title="57、简述Kubernetes PV和PVC"></a><strong>57、简述Kubernetes PV和PVC</strong></h3><p>PV是对底层网络共享存储的抽象，将共享存储定义为一种“资源”。</p><p>PVC则是用户对存储资源的一个“申请”。</p><h3 id="58、简述Kubernetes-PV生命周期内的阶段"><a href="#58、简述Kubernetes-PV生命周期内的阶段" class="headerlink" title="58、简述Kubernetes PV生命周期内的阶段"></a><strong>58、简述Kubernetes PV生命周期内的阶段</strong></h3><p>某个PV在生命周期中可能处于以下4个阶段（Phaes）之一。</p><ul><li>Available：可用状态，还未与某个PVC绑定。</li><li>Bound：已与某个PVC绑定。</li><li>Released：绑定的PVC已经删除，资源已释放，但没有被集群回收。</li><li>Failed：自动资源回收失败。</li></ul><h3 id="59、简述Kubernetes所支持的存储供应模式"><a href="#59、简述Kubernetes所支持的存储供应模式" class="headerlink" title="59、简述Kubernetes所支持的存储供应模式"></a><strong>59、简述Kubernetes所支持的存储供应模式</strong></h3><p>Kubernetes支持两种资源的存储供应模式：静态模式（Static）和动态模式（Dynamic）。</p><ul><li>静态模式：集群管理员手工创建许多PV，在定义PV时需要将后端存储的特性进行设置。</li><li>动态模式：集群管理员无须手工创建PV，而是通过StorageClass的设置对后端存储进行描述，标记为某种类型。此时要求PVC对存储的类型进行声明，系统将自动完成PV的创建及与PVC的绑定。</li></ul><h3 id="60、简述Kubernetes-CSI模型"><a href="#60、简述Kubernetes-CSI模型" class="headerlink" title="60、简述Kubernetes CSI模型"></a><strong>60、简述Kubernetes CSI模型</strong></h3><p>Kubernetes CSI是Kubernetes推出与容器对接的存储接口标准，存储提供方只需要基于标准接口进行存储插件的实现，就能使用Kubernetes的原生存储机制为容器提供存储服务。CSI使得存储提供方的代码能和Kubernetes代码彻底解耦，部署也与Kubernetes核心组件分离，显然，存储插件的开发由提供方自行维护，就能为Kubernetes用户提供更多的存储功能，也更加安全可靠。</p><p>CSI包括CSI Controller和CSI Node：</p><ul><li>CSI Controller的主要功能是提供存储服务视角对存储资源和存储卷进行管理和操作。</li><li>CSI Node的主要功能是对主机（Node）上的Volume进行管理和操作。</li></ul><h3 id="61、简述Kubernetes-Worker节点加入集群的过程"><a href="#61、简述Kubernetes-Worker节点加入集群的过程" class="headerlink" title="61、简述Kubernetes Worker节点加入集群的过程"></a><strong>61、简述Kubernetes Worker节点加入集群的过程</strong></h3><p>通常需要对Worker节点进行扩容，从而将应用系统进行水平扩展。主要过程如下：</p><ul><li>在该Node上安装Docker、kubelet和kube-proxy服务；</li><li>然后配置kubelet和kubeproxy的启动参数，将Master URL指定为当前Kubernetes集群Master的地址，最后启动这些服务；</li><li>通过kubelet默认的自动注册机制，新的Worker将会自动加入现有的Kubernetes集群中；</li><li>Kubernetes Master在接受了新Worker的注册之后，会自动将其纳入当前集群的调度范围。</li></ul><h3 id="62、简述Kubernetes-Pod如何实现对节点的资源控制"><a href="#62、简述Kubernetes-Pod如何实现对节点的资源控制" class="headerlink" title="62、简述Kubernetes Pod如何实现对节点的资源控制"></a><strong>62、简述Kubernetes Pod如何实现对节点的资源控制</strong></h3><p>Kubernetes集群里的节点提供的资源主要是计算资源，计算资源是可计量的能被申请、分配和使用的基础资源。当前Kubernetes集群中的计算资源主要包括CPU、GPU及Memory。CPU与Memory是被Pod使用的，因此在配置Pod时可以通过参数CPU Request及Memory Request为其中的每个容器指定所需使用的CPU与Memory量，Kubernetes会根据Request的值去查找有足够资源的Node来调度此Pod。</p><p>通常，一个程序所使用的CPU与Memory是一个动态的量，确切地说，是一个范围，跟它的负载密切相关：负载增加时，CPU和Memory的使用量也会增加。</p><h3 id="63、简述Kubernetes-Requests和Limits如何影响Pod的调度"><a href="#63、简述Kubernetes-Requests和Limits如何影响Pod的调度" class="headerlink" title="63、简述Kubernetes Requests和Limits如何影响Pod的调度"></a><strong>63、简述Kubernetes Requests和Limits如何影响Pod的调度</strong></h3><p>当一个Pod创建成功时，Kubernetes调度器（Scheduler）会为该Pod选择一个节点来执行。对于每种计算资源（CPU和Memory）而言，每个节点都有一个能用于运行Pod的最大容量值。调度器在调度时，首先要确保调度后该节点上所有Pod的CPU和内存的Requests总和，不超过该节点能提供给Pod使用的CPU和Memory的最大容量值。</p><h3 id="64、简述Kubernetes-Metric-Service"><a href="#64、简述Kubernetes-Metric-Service" class="headerlink" title="64、简述Kubernetes Metric Service"></a><strong>64、简述Kubernetes Metric Service</strong></h3><p>在Kubernetes从1.10版本后采用Metrics Server作为默认的性能数据采集和监控，主要用于提供核心指标（Core Metrics），包括Node、Pod的CPU和内存使用指标。</p><p>对其他自定义指标（Custom Metrics）的监控则由Prometheus等组件来完成。</p><h3 id="65、简述Kubernetes中，如何使用EFK实现日志的统一管理"><a href="#65、简述Kubernetes中，如何使用EFK实现日志的统一管理" class="headerlink" title="65、简述Kubernetes中，如何使用EFK实现日志的统一管理"></a><strong>65、简述Kubernetes中，如何使用EFK实现日志的统一管理</strong></h3><p>在Kubernetes集群环境中，通常一个完整的应用或服务涉及组件过多，建议对日志系统进行集中化管理，通常采用EFK实现。</p><p>EFK是 Elasticsearch、Fluentd 和 Kibana 的组合，其各组件功能如下：</p><ul><li>Elasticsearch：是一个<a href="https://www.zhihu.com/search?q=搜索引擎&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">搜索引擎</a>，负责存储日志并提供查询接口；</li><li>Fluentd：负责从 Kubernetes 搜集日志，每个Node节点上面的Fluentd监控并收集该节点上面的系统日志，并将处理过后的日志信息发送给Elasticsearch；</li><li>Kibana：提供了一个 Web GUI，用户可以浏览和搜索存储在 Elasticsearch 中的日志。</li></ul><p>通过在每台Node上部署一个以DaemonSet方式运行的Fluentd来收集每台Node上的日志。Fluentd将Docker日志目录/var/lib/docker/containers和/var/log目录挂载到Pod中，然后Pod会在Node节点的/var/log/pods目录中创建新的目录，可以区别不同的容器日志输出，该目录下有一个日志文件链接到/var/lib/docker/contianers目录下的容器日志输出。</p><h3 id="66、简述Kubernetes如何进行优雅的节点关机维护"><a href="#66、简述Kubernetes如何进行优雅的节点关机维护" class="headerlink" title="66、简述Kubernetes如何进行优雅的节点关机维护"></a><strong>66、简述Kubernetes如何进行优雅的节点关机维护</strong></h3><p>由于Kubernetes节点运行大量Pod，因此在进行关机维护之前，建议先使用kubectl drain将该节点的Pod进行驱逐，然后进行关机维护。</p><h3 id="67、简述Kubernetes集群联邦"><a href="#67、简述Kubernetes集群联邦" class="headerlink" title="67、简述Kubernetes集群联邦"></a><strong>67、简述Kubernetes集群联邦</strong></h3><p>Kubernetes集群联邦可以将多个Kubernetes集群作为一个集群进行管理。因此，可以在一个数据中心/云中创建多个Kubernetes集群，并使用集群联邦在一个地方控制/管理所有集群。</p><h3 id="68、简述Helm及其优势"><a href="#68、简述Helm及其优势" class="headerlink" title="68、简述Helm及其优势"></a><strong>68、简述Helm及其优势</strong></h3><p>Helm是Kubernetes的软件包管理工具。类似Ubuntu中使用的APT、CentOS中使用的yum 或者Python中的 pip 一样。</p><p>Helm能够将一组Kubernetes资源打包统一管理, 是查找、共享和使用为Kubernetes构建的软件的最佳方式。</p><p>Helm中通常每个包称为一个Chart，一个Chart是一个目录（一般情况下会将目录进行打包压缩，形成name-version.tgz格式的单一文件，方便传输和存储）。</p><p>在Kubernetes中部署一个可以使用的应用，需要涉及到很多的 Kubernetes 资源的共同协作。使用Helm则具有如下优势：</p><ul><li>统一管理、配置和更新这些分散的Kubernetes的应用资源文件；</li><li>分发和复用一套应用模板；</li><li>将应用的一系列资源当做一个软件包管理。</li><li>对于应用发布者而言，可以通过 Helm 打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。</li></ul><p>对于使用者而言，使用Helm后不用需要编写复杂的应用部署文件，可以以简单的方式在Kubernetes上查找、安装、升级、回滚、卸载应用程序。</p><h3 id="69、k8s是什么？请说出你的了解？"><a href="#69、k8s是什么？请说出你的了解？" class="headerlink" title="69、k8s是什么？请说出你的了解？"></a><strong>69、k8s是什么？请说出你的了解？</strong></h3><p>答：Kubenetes是一个针对容器应用，进行自动部署，弹性伸缩和管理的开源系统。主要功能是生产环境中的容器编排。</p><p>K8S是Google公司推出的，它来源于由Google公司内部使用了15年的Borg系统，集结了Borg的精华。</p><h3 id="70、K8s架构的组成是什么？"><a href="#70、K8s架构的组成是什么？" class="headerlink" title="70、K8s架构的组成是什么？"></a><strong>70、K8s架构的组成是什么？</strong></h3><p>答：和大多数分布式系统一样，K8S集群至少需要一个<a href="https://www.zhihu.com/search?q=主节点&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra={" sourcetype"%3a"answer"%2c"sourceid"%3a2200949037}" target="_blank" rel="noopener">主节点</a>（Master）和多个计算节点（Node）。</p><ul><li>主节点主要用于暴露API，调度部署和节点的管理；</li><li>计算节点运行一个容器运行环境，一般是docker环境（类似docker环境的还有rkt），同时运行一个K8s的代理（kubelet）用于和master通信。计算节点也会运行一些额外的组件，像记录日志，节点监控，服务发现等等。计算节点是k8s集群中真正工作的节点。</li></ul><h3 id="K8S架构细分："><a href="#K8S架构细分：" class="headerlink" title="K8S架构细分："></a><strong>K8S架构细分：</strong></h3><p>1、Master节点（默认不参加实际工作）：</p><ul><li>Kubectl：客户端命令行工具，作为整个K8s集群的操作入口；</li><li>Api Server：在K8s架构中承担的是“桥梁”的角色，作为资源操作的唯一入口，它提供了认证、授权、访问控制、API注册和发现等机制。客户端与k8s群集及K8s内部组件的通信，都要通过Api Server这个组件；</li><li>Controller-manager：负责维护群集的状态，比如故障检测、自动扩展、滚动更新等；</li><li>Scheduler：负责资源的调度，按照预定的调度策略将pod调度到相应的node节点上；</li><li>Etcd：担任数据中心的角色，保存了整个群集的状态；</li></ul><p>2、Node节点：</p><ul><li>Kubelet：负责维护容器的生命周期，同时也负责Volume和网络的管理，一般运行在所有的节点，是Node节点的代理，当Scheduler确定某个node上运行pod之后，会将pod的具体信息（image，volume）等发送给该节点的kubelet，kubelet根据这些信息创建和运行容器，并向master返回运行状态。（自动修复功能：如果某个节点中的容器宕机，它会尝试重启该容器，若重启无效，则会将该pod杀死，然后重新创建一个容器）；</li><li>Kube-proxy：Service在逻辑上代表了后端的多个pod。负责为Service提供cluster内部的服务发现和负载均衡（外界通过Service访问pod提供的服务时，Service接收到的请求后就是通过kube-proxy来转发到pod上的）；</li><li>container-runtime：是负责管理运行容器的软件，比如docker</li><li>Pod：是k8s集群里面最小的单位。每个pod里边可以运行一个或多个container（容器），如果一个pod中有两个container，那么container的USR（用户）、MNT（挂载点）、PID（进程号）是相互隔离的，UTS（主机名和域名）、IPC（消息队列）、NET（网络栈）是相互共享的。我比较喜欢把pod来当做豌豆夹，而豌豆就是pod中的container；</li></ul><h3 id="71、容器和主机部署应用的区别是什么？"><a href="#71、容器和主机部署应用的区别是什么？" class="headerlink" title="71、容器和主机部署应用的区别是什么？"></a><strong>71、容器和主机部署应用的区别是什么？</strong></h3><p>答：容器的中心思想就是秒级启动；一次封装、到处运行；这是主机部署应用无法达到的效果，但同时也更应该注重容器的数据持久化问题。</p><p>另外，容器部署可以将各个服务进行隔离，互不影响，这也是容器的另一个核心概念。</p><h3 id="72、请你说一下kubenetes针对pod资源对象的健康监测机制？"><a href="#72、请你说一下kubenetes针对pod资源对象的健康监测机制？" class="headerlink" title="72、请你说一下kubenetes针对pod资源对象的健康监测机制？"></a><strong>72、请你说一下kubenetes针对pod资源对象的健康监测机制？</strong></h3><p>答：K8s中对于pod资源对象的健康状态检测，提供了三类probe（探针）来执行对pod的健康监测：</p><p>1） <code>livenessProbe</code>探针</p><p>可以根据用户自定义规则来判定pod是否健康，如果livenessProbe探针探测到容器不健康，则kubelet会根据其重启策略来决定是否重启，如果一个容器不包含livenessProbe探针，则kubelet会认为容器的livenessProbe探针的返回值永远成功。</p><p>2） <code>ReadinessProbe</code>探针</p><p>同样是可以根据用户自定义规则来判断pod是否健康，如果探测失败，控制器会将此pod从对应service的endpoint列表中移除，从此不再将任何请求调度到此Pod上，直到下次探测成功。</p><p>3） <code>startupProbe</code>探针</p><p>启动检查机制，应用一些启动缓慢的业务，避免业务长时间启动而被上面两类探针kill掉，这个问题也可以换另一种方式解决，就是定义上面两类探针机制时，初始化时间定义的长一些即可。</p><p>每种探测方法能支持以下几个相同的检查参数，用于设置控制检查时间：</p><ul><li><code>initialDelaySeconds</code>：初始第一次探测间隔，用于应用启动的时间，防止应用还没启动而健康检查失败</li><li><code>periodSeconds</code>：检查间隔，多久执行probe检查，默认为10s；</li><li><code>timeoutSeconds</code>：检查超时时长，探测应用timeout后为失败；</li><li><code>successThreshold</code>：成功探测阈值，表示探测多少次为健康正常，默认探测1次。</li></ul><p>上面两种探针都支持以下三种探测方法：</p><p>1）Exec：通过执行命令的方式来检查服务是否正常，比如使用cat命令查看pod中的某个重要配置文件是否存在，若存在，则表示pod健康。反之异常。</p><p>Exec探测方式的yaml文件语法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">liveness</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">k8s.gcr.io/busybox</span></span><br><span class="line"><span class="attr">    args:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-c</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">touch</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">30</span><span class="string">;</span> <span class="string">rm</span> <span class="bullet">-rf</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">600</span></span><br><span class="line"><span class="attr">    livenessProbe:</span>         <span class="comment">#选择livenessProbe的探测机制</span></span><br><span class="line"><span class="attr">      exec:</span>                      <span class="comment">#执行以下命令</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/tmp/healthy</span></span><br><span class="line"><span class="attr">      initialDelaySeconds:</span> <span class="number">5</span>          <span class="comment">#在容器运行五秒后开始探测</span></span><br><span class="line"><span class="attr">      periodSeconds:</span> <span class="number">5</span>               <span class="comment">#每次探测的时间间隔为5秒</span></span><br></pre></td></tr></table></figure><p>在上面的配置文件中，探测机制为在容器运行5秒后，每隔五秒探测一次，如果cat命令返回的值为“0”，则表示健康，如果为非0，则表示异常。</p><p>2）Httpget：通过发送http/htps请求检查服务是否正常，返回的状态码为200-399则表示容器健康（注http get类似于命令<code>curl -I</code>）。</p><p>Httpget探测方式的yaml文件语法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">liveness</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">k8s.gcr.io/liveness</span></span><br><span class="line"><span class="attr">    livenessProbe:</span>              <span class="comment">#采用livenessProbe机制探测</span></span><br><span class="line"><span class="attr">      httpGet:</span>                  <span class="comment">#采用httpget的方式</span></span><br><span class="line"><span class="attr">    scheme:</span><span class="string">HTTP</span>         <span class="comment">#指定协议，也支持https</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/healthz</span>          <span class="comment">#检测是否可以访问到网页根目录下的healthz网页文件</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">8080</span>              <span class="comment">#监听端口是8080</span></span><br><span class="line"><span class="attr">      initialDelaySeconds:</span> <span class="number">3</span>     <span class="comment">#容器运行3秒后开始探测</span></span><br><span class="line"><span class="attr">      periodSeconds:</span> <span class="number">3</span>                <span class="comment">#探测频率为3秒</span></span><br></pre></td></tr></table></figure><p>上述配置文件中，探测方式为项容器发送HTTP GET请求，请求的是8080端口下的healthz文件，返回任何大于或等于200且小于400的状态码表示成功。任何其他代码表示异常。</p><p>3）tcpSocket：通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康，这种方式与HTTPget的探测机制有些类似，tcpsocket健康检查适用于TCP业务。</p><p>tcpSocket探测方式的yaml文件语法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">goproxy</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">k8s.gcr.io/goproxy:0.1</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">- containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#这里两种探测机制都用上了，都是为了和容器的8080端口建立TCP连接</span></span><br><span class="line"><span class="attr">    readinessProbe:</span></span><br><span class="line"><span class="attr">      tcpSocket:</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">    livenessProbe:</span></span><br><span class="line"><span class="attr">      tcpSocket:</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">      periodSeconds:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>在上述的yaml配置文件中，两类探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接容器的8080端口，如果探测成功，则该pod为健康，十秒后，kubelet将进行第二次连接。</p><p>除了readinessProbe探针外，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败，则重启容器。</p><p>探针探测的结果无外乎以下三者之一：</p><ul><li>Success：Container通过了检查；</li><li>Failure：Container没有通过检查；</li><li>Unknown：没有执行检查，因此不采取任何措施（通常是我们没有定义探针检测，默认为成功）。</li></ul><p>若觉得上面还不够透彻，可以移步其官网文档：</p><p><a href="https://link.zhihu.com/?target=https%3A//kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/</a></p><h3 id="73、如何控制滚动更新过程？"><a href="#73、如何控制滚动更新过程？" class="headerlink" title="73、如何控制滚动更新过程？"></a><strong>73、如何控制滚动更新过程？</strong></h3><p>答：可以通过下面的命令查看到更新时可以控制的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master yaml]<span class="comment"># kubectl explain deploy.spec.strategy.rollingUpdate</span></span><br></pre></td></tr></table></figure><p><code>maxSurge</code>： 此参数控制滚动更新过程，副本总数超过预期pod数量的上限。可以是百分比，也可以是具体的值。默认为1。</p><p>（上述参数的作用就是在更新过程中，值若为3，那么不管三七二一，先运行三个pod，用于替换旧的pod，以此类推）</p><p><code>maxUnavailable</code>：此参数控制滚动更新过程中，不可用的Pod的数量。</p><p>（这个值和上面的值没有任何关系，举个例子：我有十个pod，但是在更新的过程中，我允许这十个pod中最多有三个不可用，那么就将这个参数的值设置为3，在更新的过程中，只要不可用的pod数量小于或等于3，那么更新过程就不会停止）。</p><h3 id="74、K8s中镜像的下载策略是什么？"><a href="#74、K8s中镜像的下载策略是什么？" class="headerlink" title="74、K8s中镜像的下载策略是什么？"></a><strong>74、K8s中镜像的下载策略是什么？</strong></h3><p>答：可通过命令“kubectl explain pod.spec.containers”来查看imagePullPolicy这行的解释。</p><p>K8s的镜像下载策略有三种：Always、Never、IFNotPresent；</p><ul><li>Always：镜像标签为latest时，总是从指定的仓库中获取镜像；</li><li>Never：禁止从仓库中下载镜像，也就是说只能使用本地镜像；</li><li>IfNotPresent：仅当本地没有对应镜像时，才从目标仓库中下载。</li><li>默认的镜像下载策略是：当镜像标签是latest时，默认策略是Always；当镜像标签是自定义时（也就是标签不是latest），那么默认策略是IfNotPresent。</li></ul><h3 id="75、image的状态有哪些？"><a href="#75、image的状态有哪些？" class="headerlink" title="75、image的状态有哪些？"></a><strong>75、image的状态有哪些？</strong></h3><ul><li>Running：Pod所需的容器已经被成功调度到某个节点，且已经成功运行，</li><li>Pending：APIserver创建了pod资源对象，并且已经存入etcd中，但它尚未被调度完成或者仍然处于仓库中下载镜像的过程</li><li>Unknown：APIserver无法正常获取到pod对象的状态，通常是其无法与所在工作节点的kubelet通信所致。</li></ul><h3 id="76、pod的重启策略是什么？"><a href="#76、pod的重启策略是什么？" class="headerlink" title="76、pod的重启策略是什么？"></a><strong>76、pod的重启策略是什么？</strong></h3><p>答：可以通过命令“kubectl explain pod.spec”查看pod的重启策略。（restartPolicy字段）</p><ul><li>Always：但凡pod对象终止就重启，此为默认策略。</li><li>OnFailure：仅在pod对象出现错误时才重启</li></ul><h3 id="77、Service这种资源对象的作用是什么？"><a href="#77、Service这种资源对象的作用是什么？" class="headerlink" title="77、Service这种资源对象的作用是什么？"></a><strong>77、Service这种资源对象的作用是什么？</strong></h3><p>答：用来给相同的多个pod对象提供一个固定的统一访问接口，常用于服务发现和服务访问。</p><h3 id="78、版本回滚相关的命令？"><a href="#78、版本回滚相关的命令？" class="headerlink" title="78、版本回滚相关的命令？"></a><strong>78、版本回滚相关的命令？</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master httpd-web]<span class="comment"># kubectl apply -f httpd2-deploy1.yaml  --record  </span></span><br><span class="line"><span class="comment">#运行yaml文件，并记录版本信息；</span></span><br><span class="line">[root@master httpd-web]<span class="comment"># kubectl rollout history deployment httpd-devploy1  </span></span><br><span class="line"><span class="comment">#查看该deployment的历史版本</span></span><br><span class="line">[root@master httpd-web]<span class="comment"># kubectl rollout undo deployment httpd-devploy1 --to-revision=1    </span></span><br><span class="line"><span class="comment">#执行回滚操作，指定回滚到版本1</span></span><br><span class="line"><span class="comment">#在yaml文件的spec字段中，可以写以下选项（用于限制最多记录多少个历史版本）：</span></span><br><span class="line">spec:</span><br><span class="line">  revisionHistoryLimit: 5            </span><br><span class="line"><span class="comment">#这个字段通过 kubectl explain deploy.spec  命令找到revisionHistoryLimit   &lt;integer&gt;行获得</span></span><br></pre></td></tr></table></figure><h3 id="79、标签与标签选择器的作用是什么？"><a href="#79、标签与标签选择器的作用是什么？" class="headerlink" title="79、标签与标签选择器的作用是什么？"></a><strong>79、标签与标签选择器的作用是什么？</strong></h3><p>标签：是当相同类型的资源对象越来越多的时候，为了更好的管理，可以按照标签将其分为一个组，为的是提升资源对象的管理效率。</p><p>标签选择器：就是标签的查询过滤条件。目前API支持两种标签选择器：</p><ul><li>基于等值关系的，如：“=”、“”“==”、“！=”（注：“==”也是等于的意思，yaml文件中的matchLabels字段）；</li><li>基于集合的，如：in、notin、exists（yaml文件中的matchExpressions字段）；</li></ul><p>注：in:在这个集合中；notin：不在这个集合中；exists：要么全在（exists）这个集合中，要么都不在（notexists）；</p><p>使用标签选择器的操作逻辑：</p><ul><li>在使用基于集合的标签选择器同时指定多个选择器之间的逻辑关系为“与”操作（比如：- {key: name,operator: In,values: [zhangsan,lisi]} ，那么只要拥有这两个值的资源，都会被选中）；</li><li>使用空值的标签选择器，意味着每个资源对象都被选中（如：标签选择器的键是“A”，两个资源对象同时拥有A这个键，但是值不一样，这种情况下，如果使用空值的标签选择器，那么将同时选中这两个资源对象）</li><li>空的标签选择器（注意不是上面说的空值，而是空的，都没有定义键的名称），将无法选择出任何资源；</li></ul><p>在基于集合的选择器中，使用“In”或者“Notin”操作时，其values可以为空，但是如果为空，这个标签选择器，就没有任何意义了。</p><p>两种标签选择器类型（基于等值、基于集合的书写方法）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">selector:</span></span><br><span class="line"><span class="attr">  matchLabels:</span>           <span class="comment">#基于等值</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  matchExpressions:</span>         <span class="comment">#基于集合</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;key:</span> <span class="string">name,operator:</span> <span class="string">In,values:</span> <span class="string">[zhangsan,lisi]&#125;</span>     <span class="comment">#key、operator、values这三个字段是固定的</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;key:</span> <span class="string">age,operator:</span> <span class="string">Exists,values:&#125;</span>   <span class="comment">#如果指定为exists，那么values的值一定要为空</span></span><br></pre></td></tr></table></figure><h3 id="80、常用的标签分类有哪些？"><a href="#80、常用的标签分类有哪些？" class="headerlink" title="80、常用的标签分类有哪些？"></a><strong>80、常用的标签分类有哪些？</strong></h3><p>标签分类是可以自定义的，但是为了能使他人可以达到一目了然的效果，一般会使用以下一些分类：</p><ul><li>版本类标签（release）：stable（稳定版）、canary（金丝雀版本，可以将其称之为测试版中的测试版）、beta（测试版）；</li><li>环境类标签（environment）：dev（开发）、qa（测试）、production（生产）、op（运维）；</li><li>应用类（app）：ui、as、pc、sc；</li><li>架构类（tier）：frontend（前端）、backend（后端）、cache（缓存）；</li><li>分区标签（partition）：customerA（客户A）、customerB（客户B）；</li><li>品控级别（Track）：daily（每天）、weekly（每周）。</li></ul><h3 id="81、有几种查看标签的方式？"><a href="#81、有几种查看标签的方式？" class="headerlink" title="81、有几种查看标签的方式？"></a><strong>81、有几种查看标签的方式？</strong></h3><p>答：常用的有以下三种查看方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get pod --show-labels    #查看pod，并且显示标签内容</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pod -L env,tier      #显示资源对象标签的值</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pod -l env,tier      #只显示符合键值资源对象的pod，而“-L”是显示所有的pod</span></span><br></pre></td></tr></table></figure><h3 id="82、添加、修改、删除标签的命令？"><a href="#82、添加、修改、删除标签的命令？" class="headerlink" title="82、添加、修改、删除标签的命令？"></a><strong>82、添加、修改、删除标签的命令？</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对pod标签的操作</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl label pod label-pod abc=123     #给名为label-pod的pod添加标签</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl label pod label-pod abc=456 --overwrite       #修改名为label-pod的标签</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl label pod label-pod abc-             #删除名为label-pod的标签</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pod --show-labels</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#对node节点的标签操作   </span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl label nodes node01 disk=ssd      #给节点node01添加disk标签</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl label nodes node01 disk=sss –overwrite    #修改节点node01的标签</span></span><br><span class="line">[root@master ~]<span class="comment"># kubectl label nodes node01 disk-         #删除节点node01的disk标签</span></span><br></pre></td></tr></table></figure><h3 id="83、DaemonSet资源对象的特性？"><a href="#83、DaemonSet资源对象的特性？" class="headerlink" title="83、DaemonSet资源对象的特性？"></a><strong>83、DaemonSet资源对象的特性？</strong></h3><p>DaemonSet这种资源对象会在每个k8s集群中的节点上运行，并且每个节点只能运行一个pod，这是它和deployment资源对象的最大也是唯一的区别。所以，在其yaml文件中，不支持定义replicas，除此之外，与Deployment、RS等资源对象的写法相同。</p><p>它的一般使用场景如下：</p><ul><li>在去做每个节点的日志收集工作；</li><li>监控每个节点的的运行状态；</li></ul><h3 id="84、说说你对Job这种资源对象的了解？"><a href="#84、说说你对Job这种资源对象的了解？" class="headerlink" title="84、说说你对Job这种资源对象的了解？"></a><strong>84、说说你对Job这种资源对象的了解？</strong></h3><p>答：Job与其他服务类容器不同，Job是一种工作类容器（一般用于做一次性任务）。使用常见不多，可以忽略这个问题。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提高Job执行效率的方法：</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  parallelism:</span> <span class="number">2</span>           <span class="comment">#一次运行2个</span></span><br><span class="line"><span class="attr">  completions:</span> <span class="number">8</span>           <span class="comment">#最多运行8个</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">metadata:</span></span><br></pre></td></tr></table></figure><h3 id="85、描述一下pod的生命周期有哪些状态？"><a href="#85、描述一下pod的生命周期有哪些状态？" class="headerlink" title="85、描述一下pod的生命周期有哪些状态？"></a><strong>85、描述一下pod的生命周期有哪些状态？</strong></h3><ul><li>Pending：表示pod已经被同意创建，正在等待kube-scheduler选择合适的节点创建，一般是在准备镜像；</li><li>Running：表示pod中所有的容器已经被创建，并且至少有一个容器正在运行或者是正在启动或者是正在重启；</li><li>Succeeded：表示所有容器已经成功终止，并且不会再启动；</li><li>Failed：表示pod中所有容器都是非0（不正常）状态退出；</li><li>Unknown：表示无法读取Pod状态，通常是kube-controller-manager无法与Pod通信。</li></ul><h3 id="86、创建一个pod的流程是什么？"><a href="#86、创建一个pod的流程是什么？" class="headerlink" title="86、创建一个pod的流程是什么？"></a><strong>86、创建一个pod的流程是什么？</strong></h3><ul><li>客户端提交Pod的配置信息（可以是yaml文件定义好的信息）到kube-apiserver；</li><li>Apiserver收到指令后，通知给controller-manager创建一个资源对象；</li><li>Controller-manager通过api-server将pod的配置信息存储到ETCD数据中心中；</li><li>Kube-scheduler检测到pod信息会开始调度预选，会先过滤掉不符合Pod资源配置要求的节点，然后开始调度调优，主要是挑选出更适合运行pod的节点，然后将pod的资源配置单发送到node节点上的kubelet组件上。</li><li>Kubelet根据scheduler发来的资源配置单运行pod，运行成功后，将pod的运行信息返回给scheduler，scheduler将返回的pod运行状况的信息存储到etcd数据中心。</li></ul><h3 id="87、删除一个Pod会发生什么事情？"><a href="#87、删除一个Pod会发生什么事情？" class="headerlink" title="87、删除一个Pod会发生什么事情？"></a><strong>87、删除一个Pod会发生什么事情？</strong></h3><p>答：Kube-apiserver会接受到用户的删除指令，默认有30秒时间等待优雅退出，超过30秒会被标记为死亡状态，此时Pod的状态Terminating，kubelet看到pod标记为Terminating就开始了关闭Pod的工作；</p><p>关闭流程如下：</p><ul><li>pod从service的endpoint列表中被移除；</li><li>如果该pod定义了一个停止前的钩子，其会在pod内部被调用，停止钩子一般定义了如何优雅的结束进程；</li><li>进程被发送TERM信号（kill -14）</li><li>当超过优雅退出的时间后，Pod中的所有进程都会被发送SIGKILL信号（kill -9）。</li></ul><h3 id="88、K8s的Service是什么？"><a href="#88、K8s的Service是什么？" class="headerlink" title="88、K8s的Service是什么？"></a><strong>88、K8s的Service是什么？</strong></h3><p>答：Pod每次重启或者重新部署，其IP地址都会产生变化，这使得pod间通信和pod与外部通信变得困难，这时候，就需要Service为pod提供一个固定的入口。</p><p>Service的Endpoint列表通常绑定了一组相同配置的pod，通过负载均衡的方式把外界请求分配到多个pod上</p><h3 id="89、k8s是怎么进行服务注册的？"><a href="#89、k8s是怎么进行服务注册的？" class="headerlink" title="89、k8s是怎么进行服务注册的？"></a><strong>89、k8s是怎么进行服务注册的？</strong></h3><p>答：Pod启动后会加载当前环境所有Service信息，以便不同Pod根据Service名进行通信。</p><h3 id="90、k8s集群外流量怎么访问Pod？"><a href="#90、k8s集群外流量怎么访问Pod？" class="headerlink" title="90、k8s集群外流量怎么访问Pod？"></a><strong>90、k8s集群外流量怎么访问Pod？</strong></h3><p>答：可以通过Service的NodePort方式访问，会在所有节点监听同一个端口，比如：30000，访问节点的流量会被重定向到对应的Service上面。</p><h3 id="91、k8s数据持久化的方式有哪些？"><a href="#91、k8s数据持久化的方式有哪些？" class="headerlink" title="91、k8s数据持久化的方式有哪些？"></a><strong>91、k8s数据持久化的方式有哪些？</strong></h3><p>答：</p><h3 id="1）EmptyDir（空目录）："><a href="#1）EmptyDir（空目录）：" class="headerlink" title="1）EmptyDir（空目录）："></a><strong>1）EmptyDir（空目录）：</strong></h3><p>没有指定要挂载宿主机上的某个目录，直接由Pod内保部映射到宿主机上。类似于docker中的manager volume。</p><p>主要使用场景：</p><ul><li>只需要临时将数据保存在磁盘上，比如在合并/排序算法中；</li><li>作为两个容器的共享存储，使得第一个内容管理的容器可以将生成的数据存入其中，同时由同一个webserver容器对外提供这些页面。</li></ul><p>emptyDir的特性：</p><p>同个pod里面的不同容器，共享同一个持久化目录，当pod节点删除时，volume的数据也会被删除。如果仅仅是容器被销毁，pod还在，则不会影响volume中的数据。</p><p>总结来说：emptyDir的数据持久化的生命周期和使用的pod一致。一般是作为临时存储使用。</p><h3 id="2）Hostpath："><a href="#2）Hostpath：" class="headerlink" title="2）Hostpath："></a><strong>2）Hostpath：</strong></h3><p>将宿主机上已存在的目录或文件挂载到容器内部。类似于docker中的bind mount挂载方式。</p><p>这种数据持久化方式，运用场景不多，因为它增加了pod与节点之间的耦合。</p><p>一般对于k8s集群本身的数据持久化和docker本身的数据持久化会使用这种方式，可以自行参考apiService的yaml文件，位于：/etc/kubernetes/main…目录下。</p><h3 id="3）PersistentVolume（简称PV）："><a href="#3）PersistentVolume（简称PV）：" class="headerlink" title="3）PersistentVolume（简称PV）："></a><strong>3）PersistentVolume（简称PV）：</strong></h3><p>基于NFS服务的PV，也可以基于GFS的PV。它的作用是统一数据持久化目录，方便管理。</p><p>在一个PV的yaml文件中，可以对其配置PV的大小，指定PV的访问模式：</p><ul><li><code>ReadWriteOnce</code>：只能以读写的方式挂载到单个节点；</li><li><code>ReadOnlyMany</code>：能以只读的方式挂载到多个节点；</li><li><code>ReadWriteMany</code>：能以读写的方式挂载到多个节点。以及指定pv的回收策略：</li><li><code>recycle</code>：清除PV的数据，然后自动回收；</li><li><code>Retain</code>：需要手动回收；</li><li><code>delete</code>：删除云存储资源，云存储专用；</li></ul><p>PS：这里的回收策略指的是在PV被删除后，在这个PV下所存储的源文件是否删除）。</p><p>若需使用PV，那么还有一个重要的概念：PVC，PVC是向PV申请应用所需的容量大小，K8s集群中可能会有多个PV，PVC和PV若要关联，其定义的访问模式必须一致。定义的storageClassName也必须一致，若群集中存在相同的（名字、访问模式都一致）两个PV，那么PVC会选择向它所需容量接近的PV去申请，或者随机申请。</p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="Mysql性能优化"><a href="#Mysql性能优化" class="headerlink" title="Mysql性能优化"></a>Mysql性能优化</h2><p>优化思路：</p><ul><li>开启慢查询日志，查看哪些sql耗时长</li><li>查看执行慢的sql的执行计划（为优化提供方向）</li><li>优化查询sql（怎么优化）</li><li>使用【show profils】查看问题sql的使用情况（使用方法是啥）</li><li>调整操作系统参数优化（怎么调整）</li><li>升级服务硬件（什么条件下升级）</li></ul><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a><strong>慢查询日志</strong></h3><p><strong>1、MySQL的慢查询日志功能默认是关闭的，需要手动开启</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%slow_query%&apos;</span><br><span class="line">- 【slow_query_log】 ：是否开启慢查询日志，1为开启，0为关闭。</span><br><span class="line">- 【slow-query-log-file】：新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置</span><br><span class="line">该参数，系统则会默认给一个缺省的文件host_name-slow.log</span><br><span class="line">show variables like &apos;long_query_time%&apos;</span><br><span class="line">- 【long_query_time】 ：慢查询阈值，当查询时间多于设定的阈值时，记录日志，【单位为秒】。</span><br></pre></td></tr></table></figure><p><strong>2、临时开启慢查询功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global slow_query_log = ON;</span><br><span class="line">set global long_query_time = 1;</span><br></pre></td></tr></table></figure><p><strong>3、永久开启慢查询功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#修改/etc/my.cnf配置文件，重启 MySQL, 这种永久生效.</span><br><span class="line">[mysqld]</span><br><span class="line">slow_query_log=ON</span><br><span class="line">long_query_time=1</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-1c44ad58e68f9997dcb5c28d55ce1dbd_1440w.jpg" alt="img"></p><ul><li>第一行：SQL查询执行的具体时间</li><li>第二行：执行SQL查询的连接信息，用户和连接IP</li><li>第三行：记录了一些我们比较有用的信息</li></ul><ol><li>Query_time：这条SQL执行的时间，越长则越慢</li><li>Lock_time：在MySQL服务器阶段(不是在存储引擎阶段)等待表锁时间</li><li>Rows_sent：查询返回的行数</li><li>Rows_examined：查询检查的行数，越长就当然越费时间</li></ol><h3 id="分析慢查询日志的工具"><a href="#分析慢查询日志的工具" class="headerlink" title="分析慢查询日志的工具"></a>分析慢查询日志的工具</h3><p><strong>mysqldumpslow</strong>工具：是MySQL自带的慢查询日志工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldumpslow -s t -t 10 -g &quot;left join&quot; /var/lib/mysql/localhost-slow.log</span><br></pre></td></tr></table></figure><p>常用参数说明：</p><p>-s：是表示按照何种方式排序</p><ul><li>al 平均锁定时间</li><li>ar 平均返回记录时间</li><li>at 平均查询时间（默认）</li><li>c 计数</li><li>l 锁定时间</li><li>r 返回记录</li><li>t <strong>查询时间</strong></li></ul><p>-t：<strong>是top n的意思</strong>，即为返回前面多少条的数据</p><p>-g：后边可以写一个<strong>正则匹配模式</strong>，大小写不敏感的</p><h3 id="查看执行计划"><a href="#查看执行计划" class="headerlink" title="查看执行计划"></a>查看执行计划</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create table tuser(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(100),</span><br><span class="line">age int,</span><br><span class="line">sex char(1),</span><br><span class="line">address varchar(100)</span><br><span class="line">);</span><br><span class="line">alter table tuser add index idx_name_age(name(100),age);</span><br><span class="line">alter table tuser add index idx_sex(sex(1));</span><br><span class="line">insert into tuser(id,name,age,sex,address) values (1,&apos;张三&apos;,20,&apos;1&apos;,&apos;北京&apos;);</span><br><span class="line">insert into tuser(id,name,age,sex,address) values (2,&apos;李四&apos;,16,&apos;1&apos;,&apos;上海&apos;);</span><br><span class="line">insert into tuser(id,name,age,sex,address) values (3,&apos;王五&apos;,34,&apos;1&apos;,&apos;杭州&apos;);</span><br><span class="line">insert into tuser(id,name,age,sex,address) values (4,&apos;方六&apos;,26,&apos;2&apos;,&apos;广州&apos;);</span><br><span class="line">insert into tuser(id,name,age,sex,address) values (5,&apos;季七&apos;,18,&apos;2&apos;,&apos;上海&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">explain select * from tuser where id = 2</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-9d44bdbdfd3e2d1ab5dab401796230da_1440w.png" alt="img"></p><ul><li>id: SELECT 查询的标识符. <strong>每个 SELECT 都会自动分配一个唯一的标识符</strong>.</li><li><strong>select_type: SELECT 查询的类型。（普通查询、联合查询(union、union all)、子查询等复杂查询）</strong></li><li>table: 查询的是<strong>哪个表</strong></li><li>partitions: 匹配的<strong>分区</strong></li><li>type: join 类型</li><li>possible_keys: 此次查询中<strong>可能选用的索引</strong></li><li>key: 此次查询中<strong>确切使用到的索引</strong>.</li><li>ref: 哪个字段或常数与 key 一起被使用</li><li>rows: 显示此查询<strong>一共扫描了多少行</strong>. 这个是一个估计值.</li><li>filtered: 表示此查询条件所<strong>过滤的数据的百分比</strong></li><li>extra: 额外的信息</li></ul><h3 id="select-type（重要）"><a href="#select-type（重要）" class="headerlink" title="select_type（重要）"></a>select_type（重要）</h3><p>1、simple</p><ul><li>不需要union操作或者不包含子查询的简单select查询</li></ul><p>2、primary</p><ul><li>个需要union操作或者含有子查询的select</li></ul><p>3、union</p><ul><li>union连接的两个select查询，第一个查询是dervied派生表，除了第一个表外，第二个以后的表select_type都是union</li></ul><p>4、dependent union</p><ul><li>出现在union 或union all语句中，但是这个查询要受到外部查询的影响</li></ul><p>5、union result</p><ul><li>包含union的结果集，在union和union all语句中,因为它不需要参与查询，所以id字段为null</li></ul><p>6、subquery</p><ul><li>除了from字句中包含的子查询外，其他地方出现的子查询都可能是subquery</li></ul><p>7、dependent subquery</p><ul><li>表示这个subquery的查询要受到外部表查询的影响</li></ul><p>8、derived</p><ul><li>from字句中出现的子查询，也叫做派生表，其他数据库中可能叫做内联视图或嵌套select</li></ul><h3 id="type（重要）"><a href="#type（重要）" class="headerlink" title="type（重要）"></a>type（重要）</h3><ul><li>system：表中只有一行数据或者是空表</li><li><strong>const：使用唯一索引或者主键</strong></li><li><strong>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。</strong></li><li><strong>ref：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。</strong></li><li>fulltext：全文索引检索，要注意，全文索引的优先级很高，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引</li><li>ref_or_null：与ref方法类似，只是增加了null值的比较。</li><li>unique_subquery：用于where中的in形式子查询，子查询返回不重复值唯一值</li><li>index_subquery：用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重。</li><li><strong>range：索引范围扫描，常见于使用&gt;,&lt;,is null,between ,in ,like等运算符的查询中。</strong></li><li>index_merge：表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引</li><li><strong>index：select结果列中使用到了索引，type会显示为index。</strong></li><li><strong>ALL：这个就是全表扫描数据文件，然后再在server层进行过滤返回符合要求的记录。</strong></li></ul><h3 id="extra（重要）"><a href="#extra（重要）" class="headerlink" title="extra（重要）"></a><strong>extra（重要）</strong></h3><ul><li>Using filesort：说明mysql会对数据<strong>使用一个外部的索引排序</strong>，而不是按照表内的索引顺序进行读取。</li><li>Using temporary：MySQL在对查询结果排序时使用临时表。</li><li><strong>using index：查询时不需要回表查询，直接通过索引就可以获取查询的结果数据。（使用到了覆盖索引）</strong></li><li><strong>using where：Mysql将对storage engine提取的结果进行过滤，过滤条件字段无索引；</strong></li><li>Using join buffer：使用了连接缓存,比如说在查询的时候，多表join的次数非常多，那么将配置文件中的缓冲区的joinbuffer调大一些。</li><li>impossible where：where子句的值总是false ，不能用来获取任何元组（SELECT * FROM t_user WHERE id = ‘1’ and id = ‘2’）</li></ul><h3 id="SQL语句优化"><a href="#SQL语句优化" class="headerlink" title="SQL语句优化"></a>SQL语句优化</h3><ul><li>为<strong>搜索字段</strong>（where中的条件）、<strong>排序字段</strong>、<strong>select查询列</strong>，创建合适的索引，不过要考虑数据业务场景：<strong>查询多还是增删多</strong>？</li><li><strong>尽量建立组合索引</strong>并<strong>注意组合索引的创建顺序</strong>，按照顺序组织查询条件、尽量将筛选粒度大的查询条件放到最左边。</li><li><strong>尽量使用覆盖索引</strong>，SELECT语句中尽量不要使用*。</li><li><strong>索引长度尽量短</strong>，短索引可以节省索引空间，使查找的速度得到提升，同时内存中也可以装载更多的索引键值。<strong>太长的列，可以选择建立前缀索引</strong>。</li><li><strong>索引更新不能频繁</strong>，更新非常频繁的数据不适宜建索引，因为维护索引的成本。<br><strong>order by、group by语句要尽量使用到索引</strong></li><li><strong>order by的索引生效，order by排序应该遵循最左前缀查询</strong>，如果是使用多个索引字段进行排序，那么排序的规则必须相同（同是升序或者降序），否则索引同样会失效。</li></ul><h3 id="LIMIT优化"><a href="#LIMIT优化" class="headerlink" title="LIMIT优化"></a>LIMIT优化</h3><ul><li>如果预计SELECT语句的查询结果是一条，最好使用 LIMIT 1，可以停止全表扫描。</li><li>处理分页会使用到LIMIT ，当翻页到非常靠后的页面的时候，<strong>偏移量会非常大</strong>，这时<strong>LIMIT的效率会非常差</strong>。（单表分页时，使用自增主键排序之后，<strong>先使用where条件 id &gt; offset值</strong>，<strong>limit后面只写rows</strong>） （select * from (select * from tuser2 <strong>where id &gt; 1000000 and id &lt; 1000500 ORDER BY id</strong>) t <strong>limit 0, 20）</strong></li></ul><ol><li><strong>小表驱动大表，建议使用left join时，以小表关联大表（使用join的话，第一张表是必须全扫描的，以少关联多就可以减少这个扫描次数。）</strong></li><li><strong>避免全表扫描</strong></li><li><strong>避免mysql放弃索引查询</strong></li><li><strong>尽量不使用count(*)、尽量使用count（主键）</strong></li><li><strong>JOIN两张表的关联字段最好都建立索引</strong></li><li><strong>WHERE条件中尽量不要使用not in语句</strong></li><li><strong>合理利用慢查询日志、explain执行计划查询、show profile查看SQL执行时的资源使用情况</strong></li></ol><h3 id="profile分析语句"><a href="#profile分析语句" class="headerlink" title="profile分析语句"></a><strong>profile分析语句</strong></h3><ul><li>Query Profiler是<strong>MySQL自带</strong>的一种query诊断分析工具</li><li>通过它可以分析出一条SQL语句的<strong>硬件性能瓶颈</strong>在什么地方</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%profil%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-91a75c8f444894425aab4dc1bcda3d27_1440w.jpg" alt="img"></p><p>profiling ： ON 表示开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#开启profile功能</span><br><span class="line">set profiling=1; --1是开启、0是关闭</span><br></pre></td></tr></table></figure><ul><li><strong>show profile: 展示最近一条语句执行的详细资源占用信息,默认显示 Status和Duration两列</strong></li></ul><p><img src="https://pic3.zhimg.com/80/v2-7218789ff54d1e5173ebbccb1fca7b52_1440w.jpg" alt="img"></p><ul><li>show profile 还可<strong>根据 show profiles 列表中的 Query_ID</strong> ,选择显示某条记录的性能分析信息</li></ul><p><img src="https://pic1.zhimg.com/80/v2-e2b95d909d2c82d9320faef7a4e30484_1440w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-5689efac56e639b1688abd2cb3b9bc9c_1440w.jpg" alt="img"></p><h3 id="服务器层面优化"><a href="#服务器层面优化" class="headerlink" title="服务器层面优化"></a>服务器层面优化</h3><p><strong>1、缓冲区优化</strong></p><ul><li>设置<strong>足够大的innodb_buffer_pool_size</strong> ，将数据读取到内存中</li><li>建议innodb_buffer_pool_size<strong>设置为总内存大小的3/4或者4/5</strong></li></ul><p><strong>2、降低磁盘写入次数</strong></p><ul><li><strong>生产环境，很多日志是不需要开启的，比如：通用查询日志、慢查询日志、错误日志</strong></li><li><strong>使用足够大的写入缓存 innodb_log_file_size（0.25 * innodb_buffer_pool_size）</strong></li></ul><p><strong>3、MySQL数据库配置优化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size #总内存大小的3/4或者4/5</span><br><span class="line">innodb_flush_log_at_trx_commit=1 #控制redo log刷新到磁盘的策略</span><br><span class="line">sync_binlog=1 #每提交1次事务同步写到磁盘中</span><br><span class="line">innodb_max_dirty_pages_pct=30 #脏页占innodb_buffer_pool_size的比例时，触发刷脏页到磁盘。 推荐值为25%~50%。</span><br><span class="line">innodb_io_capacity=200 #后台进程最大IO性能指标。默认200，如果SSD，调整为5000~20000</span><br><span class="line">innodb_data_file_path  #指定innodb共享表空间文件的大小</span><br><span class="line">ong_qurey_time=0.3 #慢查询日志的阈值设置，单位秒</span><br><span class="line">binlog_format=row #mysql复制的形式，row为MySQL8.0的默认形式。</span><br><span class="line">max_connections=200 #调高该参数则应降低interactive_timeout、wait_timeout的值</span><br><span class="line">innodb_log_file_size #过大，实例恢复时间长；过小，造成日志切换频繁。</span><br><span class="line">general_log=0 #全量日志建议关闭，默认关闭</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-a68f90cbe319f0cf041340ccc3b319cd_1440w.jpg" alt="img"></p><h3 id="操作系统优化"><a href="#操作系统优化" class="headerlink" title="操作系统优化"></a>操作系统优化</h3><p><strong>内核参数优化</strong></p><p><strong>CentOS系统针对mysql的参数优化，内核相关参数(/etc/sysctl.conf)，以下参数可以直接放到sysctl.conf文件的末尾。</strong></p><ul><li><strong>增加监听队列上限：</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.core.somaxconn = 65535</span><br><span class="line">net.core.netdev_max_backlog = 65535</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65535</span><br></pre></td></tr></table></figure><ul><li><strong>加快TCP连接的回收：</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_fin_timeout = 10</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br></pre></td></tr></table></figure><ul><li>TCP连接接收和发送缓冲区大小的默认值和最大值:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.core.wmem_default = 87380</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.rmem_default = 87380</span><br><span class="line">net.core.rmem_max = 16777216</span><br></pre></td></tr></table></figure><ul><li>减少失效连接所占用的TCP资源的数量，加快资源回收的效率：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_keepalive_time = 120</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br></pre></td></tr></table></figure><ul><li>单个共享内存段的最大值：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kernel.shmmax = 4294967295</span><br><span class="line">#这个参数应该设置的足够大，以便能在一个共享内存段下容纳整个的Innodb缓冲池的大小。</span><br><span class="line">#这个值的大小对于64位linux系统，可取的最大值为(物理内存值-1)byte，建议值为大于物理</span><br><span class="line">内存的一半，一般取值大于Innodb缓冲池的大小即可。</span><br></pre></td></tr></table></figure><ul><li>控制换出运行时内存的相对权重</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness = 0</span><br><span class="line">#这个参数当内存不足时会对性能产生比较明显的影响</span><br><span class="line">#设置为0，表示Linux内核虚拟内存完全被占用，才会要使用交换区</span><br></pre></td></tr></table></figure><p><strong>增加资源限制</strong></p><ul><li><strong>打开文件数的限制(/etc/security/limit.conf)</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line"></span><br><span class="line">*：表示对所有用户有效</span><br><span class="line">soft：表示当前系统生效的设置（soft不能大于hard ）</span><br><span class="line">hard：表明系统中所能设定的最大值</span><br><span class="line">nofile：表示所限制的资源是打开文件的最大数目</span><br><span class="line">65535：限制的数量</span><br></pre></td></tr></table></figure><ul><li>磁盘调度策略（选用deadline）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">查看调度策略的方法：</span><br><span class="line">cat /sys/block/devname/queue/scheduler</span><br><span class="line">修改调度策略的方法：</span><br><span class="line">echo &gt; /sys/block/devname/queue/scheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#该模式按进程创建多个队列，各个进程发来的IO请求会被cfq以轮循方式处理，对每个IO请求都是公平</span><br><span class="line">#的。该策略适合离散读的应用。</span><br><span class="line">cfq (完全公平队列策略，Linux2.6.18之后内核的系统默认策略)</span><br><span class="line"></span><br><span class="line">#deadline，包含读和写两个队列，确保在一个截止时间内服务请求（截止时间是可调整的），而默认读</span><br><span class="line">#期限短于写期限。这样就防止了写操作因为不能被读取而饿死的现象，deadline对数据库类应用是最好的选择。</span><br><span class="line">deadline (截止时间调度策略)</span><br><span class="line"></span><br><span class="line">#noop只实现一个简单的FIFO队列，倾向饿死读而利于写，因此noop对于闪存设备、RAM及嵌入式系统是最好的选择。</span><br><span class="line">noop (电梯式调度策略)</span><br><span class="line"></span><br><span class="line">#本质上与deadline策略一样，但在最后一次读操作之后，要等待6ms，才能继续进行对其它I/O请求进</span><br><span class="line">#行调度。它会在每个6ms中插入新的I/O操作，合并写入流，用写入延时换取最大的写入吞吐量。</span><br><span class="line">#anticipatory适合于写入较多的环境，比如文件服务器。该策略对数据库环境表现很差。</span><br><span class="line">anticipatory (预料I/O调度策略)</span><br></pre></td></tr></table></figure><h3 id="服务器硬件优化"><a href="#服务器硬件优化" class="headerlink" title="服务器硬件优化"></a>服务器硬件优化</h3><ul><li>尽量选择高频率的内存</li><li>提升网络带宽</li><li>使用SSD高速磁盘</li><li>提升CPU性能（对于数据库并发比较高的场景，CPU的数量比频率重要；对于CPU密集型场景和频繁执行复杂SQL的场景，CPU的频率越高越好）</li></ul><h1 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h1><p><a href="https://blog.csdn.net/weixin_38569499/article/details/86693916?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-5-86693916-blog-121605819.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-5-86693916-blog-121605819.pc_relevant_aa&utm_relevant_index=9" target="_blank" rel="noopener">知识点总结</a></p><h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h2 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表"></a>HTTP状态码列表</h2><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left">服务器无法满足Expect的请求头信息</td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML-基础篇</title>
      <link href="/2022/04/20/HTML-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2022/04/20/HTML-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1g9aaiah9j20l40b43yp.jpg" alt="HTML5_index"></p><a id="more"></a><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><p><a href="https://blog.csdn.net/weixin_45607293/article/details/121521557?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165044231416780271593390%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165044231416780271593390&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_positive~default-1-121521557.nonecase&utm_term=HTML5教程&spm=1018.2226.3001.4450" target="_blank" rel="noopener">HTML5开箱即用</a></p></li><li><p><a href="https://blog.csdn.net/kyl282889543/article/details/86755510?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165044231416780357252524%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=165044231416780357252524&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-20-86755510.nonecase&utm_term=HTML5教程&spm=1018.2226.3001.4450" target="_blank" rel="noopener">HTML5前端知识图谱</a></p></li></ul><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><h3 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1. 整体架构"></a>1. 整体架构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>   <span class="comment">&lt;!-- 文档类型说明 必须放在文档的最前面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  I'am very happy!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qxxf8kpgj21d40n4wf1.jpg" alt="image-20220429220319061"></p><h3 id="2-标题标签"><a href="#2-标题标签" class="headerlink" title="2. 标题标签"></a>2. 标题标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一共六级选,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文字加粗一行显,<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>由大到小依次减,<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>由重到轻随之变.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span>&gt;</span>语法规范书写后,<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span>&gt;</span>具体效果刷新见.<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qxy9cqw9j214k0ne402.jpg" alt="image-20220429220414366"></p><h3 id="3-段落和换行标签"><a href="#3-段落和换行标签" class="headerlink" title="3. 段落和换行标签"></a>3. 段落和换行标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ABCDEFGHIJKLMN<span class="tag">&lt;<span class="name">br</span>/&gt;</span>OPQRSTUVWXYZ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qy213dqzj214s0iygml.jpg" alt="image-20220429220756878"></p><h3 id="4-文本格式化标签"><a href="#4-文本格式化标签" class="headerlink" title="4. 文本格式化标签"></a>4. 文本格式化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>的文字 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的文字 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span>的文字 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span>的文字 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  我是<span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span>标签</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qyj58vdbj214u0jyq49.jpg" alt="image-20220429222424292"></p><h3 id="5-div和span标签"><a href="#5-div和span标签" class="headerlink" title="5. div和span标签"></a>5. div和span标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span>123</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qyr1wr34j20t20cy3yt.jpg" alt="image-20220429223200398" style="zoom:50%;"><h3 id="6-图像标签"><a href="#6-图像标签" class="headerlink" title="6. 图像标签"></a>6. 图像标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>图像标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>图像标签:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./maomi_laoshi-001-2 2.jpg"</span> <span class="attr">alt</span>=<span class="string">"图片显示不出来时显示此文字"</span> <span class="attr">title</span>=<span class="string">"鼠标放到图片上显示此文字"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>图像标签:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./maomi_laoshi-001-2 2.jpg"</span> <span class="attr">alt</span>=<span class="string">"图片显示不出来时显示此文字"</span> <span class="attr">title</span>=<span class="string">"鼠标放到图片上显示此文字"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>设定边框:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./maomi_laoshi-001-2 2.jpg"</span> <span class="attr">alt</span>=<span class="string">"图片显示不出来时显示此文字"</span> <span class="attr">title</span>=<span class="string">"鼠标放到图片上显示此文字"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">border</span>=<span class="string">"15"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qysomsruj20xb0u0wh0.jpg" alt="image-20220429223333539"></p><h3 id="7-链接标签"><a href="#7-链接标签" class="headerlink" title="7. 链接标签"></a>7. 链接标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>外部链接<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前页面打开页面:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>新标签页打开页面:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>内部链接:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./yunzhihui.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>云智慧简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>空链接:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>空链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>下载链接:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"maomi_laoshi-001-2 2.jpg.zip"</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页元素链接:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./maomi_laoshi-001-2 2.jpg"</span> <span class="attr">alt</span>=<span class="string">"图片"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qyw578hhj20u016877m.jpg" alt="image-20220429223653111"></p><h3 id="8-超链接标签"><a href="#8-超链接标签" class="headerlink" title="8. 超链接标签"></a>8. 超链接标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>点击链接,跳转到当前页面中的另一个位置:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#early"</span> <span class="attr">id</span>=<span class="string">"early_return"</span>&gt;</span>1 早年经历<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#act"</span> <span class="attr">id</span>=<span class="string">"act_return"</span>&gt;</span>2 演艺经历<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#life"</span> <span class="attr">id</span>=<span class="string">"life_return"</span>&gt;</span>3 个人生活<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#works"</span> <span class="attr">id</span>=<span class="string">"works_return"</span>&gt;</span>4 主要作品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#early_return"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"early"</span>&gt;</span>早年经历<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">刘德华出生于香港新界，在家中排行老四，幼时随家人搬到了九龙钻石山的木屋区居住，并和姐弟一起帮助家里打理卖稀饭的生意 [20]  。1973年，刘德华随家人搬入香港蓝田邨第15座14楼 [21]  。刘德华从黄大仙天主教小学毕业后升读可立中学 [22]  。在可立中学读书期间，刘德华积极参加校内学校剧社的表演，在老师杜国威的指导下学习戏剧方面的知识。此外，他还参与包括编剧在内的幕后制作。刘德华在中五会考获得1B3D2E（中文读本A）的成绩。中六上学期后，他到香港电视广播有限公司的艺员训练班受训，从而开始了演艺之路 [23]  。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#act_return"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"act"</span>&gt;</span>演艺经历<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">港剧时代</span><br><span class="line">1981年，刘德华考进第10期无线电视艺员训练班 [24]  。同年，出演个人首部电视剧《江湖再见》，在剧中饰演以贩卖妇女为生的小混混阿龙；该剧获得美国电视节电视剧特别奖 [25]  。</span><br><span class="line">刘德华电视剧剧照</span><br><span class="line">刘德华电视剧剧照(11张)</span><br><span class="line">1982年，刘德华以甲级成绩从艺员训练班毕业后正式签约TVB [26]  。同年在喜剧《花艇小英雄》中饰演败家仔钱日添。12月，与叶德娴搭档主演时装警匪剧《猎鹰》，凭借卧底警察江大伟一角获得关注 [27]  。</span><br><span class="line">1983年，主演金庸武侠剧《神雕侠侣》，在剧中饰演外貌俊俏、倜傥不羁的杨过 [28]  ；该剧在香港播出后取得62点的收视纪录。同年，与黄日华、梁朝伟、苗侨伟、汤镇业组成“无线五虎将” [29]  。</span><br><span class="line">1984年，与赵雅芝合作主演古装武侠剧《魔域桃源》，在剧中饰演资质出众、武功高强的傅青云 [30]  。同年，与梁朝伟共同主演金庸武侠剧《鹿鼎记》，在剧中饰演英明果断的康熙 [31]  。</span><br><span class="line">1985年，在古装武侠剧《杨家将》中饰演骁勇善战的杨六郎 [32]  。同年，TVB向刘德华提出加签五年的合约，刘德华因拒绝而被TVB雪藏400天 [33-34]  。</span><br><span class="line">1986年，在邵逸夫的调解下，刘德华与TVB和解并签下合约。同年，主演古装剧《真命天子》。1988年，在出演了武侠剧《天狼劫》后，刘德华将演艺事业的重心转向影坛 [34]  。</span><br><span class="line">电影时代</span><br><span class="line">刘德华写真</span><br><span class="line">刘德华写真(4张)</span><br><span class="line">1981年，刘德华出演电影处女作《彩云曲》，在片中扮演一个音乐班的学员 [35]  。1982年，在剧情片《投奔怒海》中饰演美军翻译官祖名，并凭借该片获得第2届香港电影金像奖最佳新演员提名 [35]  。</span><br><span class="line">1983年，与朱海玲 [36]  搭档主演剧情片《家在香港》，在片中饰演急功近利的青年人亚伦 [37]  。同年，主演动作片《毁灭号地车》，在片中与一个越南少女演绎了一段爱情故事 [38]  。</span><br><span class="line">1984年，在爱情片《停不了的爱》中饰演富家公子Eric [39]  。1985年，在与叶德娴共同主演的剧情片《法外情》中饰演少年得志的青年律师刘志鹏 [40]  。</span><br><span class="line">1986年，主演科幻冒险片《魔翡翠》，在片中饰演冒险专家猎鹰一号，这也是他首度出演科幻题材的电影 [41]  。同年，出演喜剧片《最佳福星》，在片中饰演身手矫健的特警组警员蓝保 [42]  。1987年，主演警匪片《肝胆相照》，在片中饰演亦正亦邪的犯罪集团成员阿定 [43]  。</span><br><span class="line">1988年，主演王家卫执导的黑帮片《旺角卡门》，在片中饰演重情重义的江湖混混华仔，并凭借该片获得第8届香港电影金像奖最佳男主角奖提名 [44]  。同年，主演警匪片《猎鹰计划》，在片中饰演具有正义感的警员国华 [45]  。此外，他还再度与叶德娴合作，在剧情片《法内情》中与叶德娴饰演绎了一段母子情 [46]  。</span><br><span class="line">1989年，在动作片《至尊无上》中饰演有“亚洲第一快手”之称的陈亚蟹 [47]  。同年，主演剧情片《神行太保》，在片中饰演一名公正、能干、勇敢的太保。此外，他还主演了动作片《人海孤鸿》，在片中饰演没有接受过良好教育的古惑仔沙士 [48]  。12月，与周润发共同主演动作片《赌神》，在片中饰演赌神高进的徒弟刀仔 [49]  。</span><br><span class="line">刘德华</span><br><span class="line">刘德华(11张)</span><br><span class="line">1990年，主演爱情片《天若有情之追梦人》，在片中饰演善良热情、讲义气的黑社会混混华Dee [50]  。同年，主演剧情片《至尊计状元才》。12月，与周星驰合作主演赌片《赌侠》，在片中饰演身怀绝技的陈刀仔 [51]  。</span><br><span class="line">1991年，刘德华开始改变银幕形象，主演了传记题材的系列电影《五亿探长雷洛传》，并在片中首次诠释年龄跨度较大的人物，该系列中的两部作品《五亿探长雷洛传I雷老虎》、《五亿探长雷洛传2:父子情仇》在香港的累积票房达到5300万 [52]  。6月，主演犯罪题材的电影《至尊无上Ⅱ之永霸天下》。此外，他还主演了动作片《九一神雕侠侣》，该片是刘德华投资出品的首部电影作品 [53]  。同年，创办天幕电影公司 [3]  。</span><br><span class="line">1992年，凭借传记片《五亿探长雷洛传》获得第11届香港电影金像奖最佳男主角提名 [54]  。8月，与王祖贤、叶德娴合作出演剧情片《庙街十二少》。11月，与林青霞、叶德娴共同主演古装片《绝代双骄》，在片中饰演聪明绝顶的小鱼儿 [55]  。同年，主演爱情片《九二神雕侠侣之痴心情长剑》，在片中饰演痴情大侠情仁 [56]  。</span><br><span class="line">1993年，在古装片《战神传说》中扮演一个武功超群的渔民 [57]  。同年，主演动作喜剧片《至尊三十六计之偷天换日》，在片中饰演赌术高明的千门高手钱文迪。此外，他还主演了爱情片《天长地久》，在片中塑造了一个风流不羁的江湖浪子形象 [58]  。</span><br><span class="line">1994年，刘德华投资并主演了剧情片《天与地》 [4]  ，并担任电影的制片人 [4]  ，他在片中饰演面对恶势力却毫不退缩的禁毒专员张一鹏 [59]  。1995年，主演赛车励志片《烈火战车》，在片中饰演叛逆、倔强的阿祖，并凭借该片获得第15届香港电影金像奖最佳男主角提名 [60]  。同年，在动作片《大冒险家》中演绎了立仁从小时候父母双亡到长大后进入泰国空军的故事 [61]  。</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">1996年，主演黑帮题材的电影《新上海滩》，在片中饰演对冯程程痴情一片的丁力。1997年，担任剧情片《香港制造》的制作人 [62]  。同年，主演爱情片《天若有情之烽火佳人》，在片中饰演家世显赫的空军少尉刘天伟 [63]  。12月，与梁家辉联袂主演警匪动作片《黑金》，在片中饰演精明干练、嫉恶如仇的调查局机动组组长方国辉 [64]  。</span><br><span class="line">1998年，主演动作片《龙在江湖》，饰演重义气的黑帮成员韦吉祥。同年，出演喜剧片《赌侠1999》 [65]  。此外，他还担任剧情片《去年烟花特别多》的制作人 [66]  。</span><br><span class="line">剧照海报</span><br><span class="line">剧照海报(3张)</span><br><span class="line">1999年1月，出演喜剧片《赌侠大战拉斯维加斯》。9月，刘德华与刘青云共同主演警匪片《暗战》；这部电影也成为刘德华表演生涯的转型之作，他在片中改变表演模式，饰演一个身患绝症却不颓废的大盗；并凭借该片获得第19届香港电影金像奖最佳男主角奖 [5]  。10月，在黑帮片《龙在边缘》中饰演决心改邪归正的洪兴帮大哥飞龙。同年，主演爱情片《黑马王子》，在片中饰演出身贫寒、不拘小节的阿华 [67]  。</span><br><span class="line">2000年，在动作片《阿虎》中饰演性感开朗、直爽的自由搏击拳手阿虎；该片是刘德华从影以来的第100部电影 [68]  ；刘德华凭借该片获得第20届香港电影金像奖最佳男主角提名以及第6届香港电影金紫荆奖最佳男主角奖 [69-70]  。</span><br><span class="line">2001年8月3日，刘德华与日本演员反町隆史共同主演的动作片《全职杀手》上映，他在片中饰演为名誉而生的职业杀手Tok [71]  ，并担任该片的制片人 [72]  。</span><br><span class="line">2002年，刘德华开始拓宽戏路，在与梁朝伟共同主演的警匪片《无间道》中饰混饰演个性复杂的反派人物刘建明 [73-74]  ；该片在香港上映两周票房突破3000万港币，最终票房达到5505万港币 [75]  ，刘德华凭借该片获得第22届香港电影金像奖最佳男主角提名以及第40届台湾电影金马奖最佳男主角奖提名 [76-77]  。3月28日，刘德华主演的科学幻想片《卫斯理之蓝血人》上映，他在片中饰演功夫出色的冒险家卫斯理 [78]  。</span><br><span class="line">2003年2月1日，刘德华主演的爱情喜剧片《老鼠爱上猫》上映，他在片中饰演风流倜傥、热爱自由的大侠展昭 [79]  。3月，主演剧情片《大块头有大智慧》，在片中饰演表面放荡不羁，但内心善良的武僧大块头 [80]  。12月，与梁朝伟共同主演强调正邪对峙、角色互换的警匪片《无间道Ⅲ终极无间》，在片中饰演被派到警队当内鬼的警员刘建明 [81]  ；并凭借该片获得第41届台湾电影金马奖最佳男主角奖 [6]  。</span><br><span class="line">刘德华获奖照片</span><br><span class="line">刘德华获奖照片(2张)</span><br><span class="line">2004年1月，凭借剧情片《大块头有大智慧》获得第10届香港电影评论学会大奖最佳男主角奖 [82]  。4月，主演由冯小刚执导的剧情片《天下无贼》，在片中突破固有的银幕形象，饰演痞子气十足的盗贼王薄 [83]  。7月16日，刘德华与金城武、章子怡共同主演的武侠片《十面埋伏》在中国内地上映，他在片中饰演飞刀门在官府的卧底刘捕头 [84]  。同年，他还凭借剧情片《大块头有大智慧》获得第23届香港电影金像奖最佳男主角奖 [85]  。</span><br><span class="line">2005年，担任爱情片《再说一次我爱你》的制片人以及男主角，并在片中一人分饰两角，扮演抑郁消沉的高医生以及外向张扬的发型师DEREK [86]  。9月29日，刘德华主演的奇幻剧情片《童梦奇缘》上映 [87]  。同年，担任华语电影传媒大奖中国电影百年形象大使 [88]  。2006年，主演古装动作片《墨攻》 [89]  ，在片中饰演用各种计策出奇制胜的革离；该片在中国内地上映三周票房超过6000万元 [90]  。</span><br><span class="line">2007年，与李连杰、金城武共同主演古装动作片《投名状》，在片中塑造了赵二虎率性而为的草莽英雄形象 [91]  。2月13日，在剧情片《门徒》中饰演为人低调的毒贩林昆，并凭借该片获得第27届香港电影金像奖最佳男配角奖 [92]  。同年，在香港国际电影节主办的首届亚洲电影大奖颁奖礼上，获得亚洲电影票房巨星大奖 [93]  。</span><br><span class="line">2008年，主演古装动作片《三国志之见龙卸甲》，在片中饰演智勇双全的常山赵子龙 [94]  。2009年1月20日，刘德华与舒淇联袂主演的爱情片《游龙戏凤》在中国内地上映；片中他首度扮演钻石王老五的角色，饰演事业成功的程仲森 [95]  。同年，参演战争片《建国大业》 [96]  。</span><br><span class="line">刘德华主演的电影</span><br><span class="line">刘德华主演的电影(7张)</span><br><span class="line">2010年，刘德华主演了由徐克执导的古装片《狄仁杰之通天帝国》，他在片中塑造了一个文武双全的大唐神探形象 [97]  。3月30日，刘德华与范冰冰合作主演的科幻警匪片《未来警察》在中国内地上映；他在片中饰演处事果断的未来警察周志豪 [98]  。5月，获得第十二届世界杰出华人奖 [99]  。</span><br><span class="line">2011年2月3日，刘德华与巩俐主演的都市爱情片《我知女人心》上映，他在片中饰演一位游走在美女间的风云人物；同年，在动作片《新少林寺》中饰演骁勇善战的军阀少帅侯杰 [100]  。2012年3月8日，与叶德娴搭档主演的文艺片《桃姐》上映，刘德华在片中饰演生长于大家庭的少爷罗杰 [101]  [262]  ，并凭借该片获得第48届台湾电影金马奖最佳男主角奖、第31届香港电影金像奖最佳男主角奖 [9]  [102]  。</span><br><span class="line">2013年1月16日，担任第7届亚洲电影大奖评审团主席 [103]  。6月9日，主演3D特工电影《天机·富春山居图》，在片中饰演身陷不白之冤的国际特工肖锦汉 [104]  。 [105]  同年，主演3D警匪动作片《风暴》在中国内地上映。</span><br><span class="line">2014年5月，主演中国首部打拐题材的电影《失孤》，在片中饰演倔强善良的农民雷泽宽。2015年3月20日，主演的电影《失孤》上映 [263]  。9月30日，刘德华主演的警匪片《解救吾先生》上映，他在片中饰演冷静、机智的电影明星吾先生 [106]  。同年，与周润发、张学友共同主演动作喜剧片《澳门风云3》 [107]  。</span><br><span class="line">2016年4月1日，刘德华参演的动作片《我的特工爷爷》上映，他在片中饰演嗜赌成性且脾气暴躁的小混混李政久 [108]  。同年，参演魔幻类型的3D动作片《长城》 [109]  。6月，凭借剧情片《失孤》获得第16届中国电影华表奖优秀男演员奖 [110]  。10月1日，刘德华主演的喜剧动作片《王牌逗王牌》上映 [111]  ，他在片中饰演破案能力与闯祸能力都很强的囧探宝爷 [112]  。此外，刘德华客串了电影《铁道飞虎》 [113]  。</span><br><span class="line">2017年4月28日，主演的警匪动作片《拆弹专家》在中国内地上映 [114]  ，他在片中饰演一名卧底拆弹专家，并担任影片的制作人 [115]  。7月，主演由冯德伦执导的动作冒险片《侠盗联盟》，在片中饰演温文尔雅的江洋大盗张丹 [116]  。9月30日，与甄子丹共同主演的动作犯罪片《追龙》上映，刘德华在片中饰演头脑精明的“五亿探长”雷洛 [117]  。</span><br><span class="line">2018年2月，凭借警匪片《拆弹专家》获得第37届香港电影金像奖最佳男主角奖提名 [118]  。此外，他还以监制、主演的身份参加《扫毒2》的拍摄 [119]  。5月，担任监制的迷你剧《东方华尔街》播出 [120]  。</span><br><span class="line">2019年1月，主演电影《香港地》 [121]  。3月，主演警匪片《拆弹专家2》 [122]  。9月12日，其友情客串的电影《花椒之味》上映 [123]  。同年，与葛优、张涵予主演电影《莫斯科大劫案》，同时他也是该片编剧 [124]  。</span><br><span class="line">2020年1月19日，取材经典神话故事的《七圣》系列电影正式启动，刘德华担任监制及主演，在片中饰演孙悟空 [125]  。同年，参与录制的全球户外生活文化实境秀节目《周游记》在浙江卫视播出 [126]  。11月13日，刘德华监制并领衔主演的青春励志电影《热血合唱团》上映 [127]  。12月24日，与刘青云、倪妮共同主演的动作犯罪片《拆弹专家2》上映，在片中饰演一边逃亡一边查明爆炸案真相的前拆弹专家潘乘风，刘德华凭借该片获得第30届华鼎奖最佳男主角奖、最佳专业精神奖 [270]  。</span><br><span class="line">2021年，主演庄文强执导的犯罪片《金手指》 [130]  。同年，参演悬疑喜剧片《唐人街探案3》，在片中饰演Q [247]  。2月12日，与肖央、万茜合作主演的犯罪喜剧电影《人潮汹涌》上映，他在片中饰演冷血杀手周全 [129]  。</span><br><span class="line">2022年2月，领衔主演宁浩执导的喜剧电影《红毯先生》，在片中饰演过气香港明星刘伟驰 [306]  。</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">音乐时代</span><br><span class="line">1985年，加入华星唱片公司；同年，发行首张个人专辑《只知道此刻爱你》，从而正式进入歌坛 [131]  。1987年，加入百代唱片公司。同年，发行粤语专辑《情感的禁区》，其中收录了电影《肝胆相照》的主题曲《当中究竟》以及电影《中国最后一个太监》的主题曲《错觉》 [272]  。</span><br><span class="line">1988年2月，发行第三张个人专辑《回到你身边》；这张专辑拓展了歌曲题材的表达范围，专辑所收录的歌曲也不再局限于爱情类型的歌曲 [132]  。1989年2月，发行个人首张普通话专辑《回到你身边·法内情》 [273]  。10月，发行普通话专辑《爱的连线》，收录了包括情歌《在我的胸前安歇》、《忘了爱》在内的8首歌曲 [286]  。</span><br><span class="line">1990年，凭借专辑《可不可以》奠定其在歌坛的地位 [133]  ；专辑中的歌曲《可不可以》获得第13届十大中文金曲奖 [274]  。6月，发行普通话专辑《如果你是我的传说》 [284]  ；专辑发行后在东南亚的销售量达150万张；这张专辑收录的歌曲多数采用了近似的题材与曲式，同名主打歌《如果你是我的传说》由刘德华个人填词 [134]  。12月，发行粤语专辑《再会了》 [285]  ；其中主打歌《再会了》获得十大劲歌金曲奖 [276]  。</span><br><span class="line">杂志封面</span><br><span class="line">杂志封面(7张)</span><br><span class="line">1991年2月，发行粤语专辑《爱不完》 [283]  ；该专辑发行首日录音带的销量达到16万张，而激光唱片的销量则有7.2万张 [135]  。6月，发行普通话专辑《我和我追逐的梦》，收录了《把今生忘掉》、《不甘寂寞》等10首歌曲 [277]  。8月，发行专辑《一起走过的日子》 [282]  ，其中主打歌《一起走过的日子》获得十大劲歌金曲奖以及十大中文金曲奖 [274-275]  。12月，推出普通话专辑《来生缘》，收录了《风中的歌》、《为了你请留下我》、《来生缘》等11首歌曲 [287]  。同年，获得十大劲歌金曲奖最受欢迎男歌手奖 [275]  。</span><br><span class="line">1992年，获得十大劲歌金曲奖最受欢迎男歌手奖 [278]  。2月，在提前录制的央视春晚视频中，刘德华与毛阿敏、张雨生合唱歌曲《心中常驻芳华》 [136]  ，随后在洛杉矶、旧金山等地举行美加巡回演唱会。7月10日，推出粤语专辑《爱的空间》，其中收录了时装剧《巨人》的主题曲《你震撼我的心灵》 [281]  。7月22日，发行普通话专辑《谢谢你的爱》 [248]  ，其中主打歌《谢谢你的爱》成为刘德华音乐生涯的代表作 [249]  。9月，发行加入华纳唱片公司后的首张粤语专辑《真我的风采》；该专辑销量达到40万张 [135]  ，其中粤语版的《谢谢你的爱》获得第16届十大中文金曲奖 [279]  ，专辑中的歌曲《真我的风采》获得第15届十大中文金曲奖以及十大劲歌金曲奖 [278]  [280]  。</span><br><span class="line">1993年1月至2月，在香港红磡体育馆举行20场“真我的风采演唱会”。3月，推出加入飞碟唱片公司后的首张专辑《真情难收》 [288]  ，其中主打歌曲《一辈子的错》由刘德华个人作词 [289]  。7月，推出粤语专辑《答案就是你》 [290]  ，专辑中的歌曲《永远寂寞》获得第16届十大中文金曲奖 [279]  。9月，发行普通话专辑《一生一次》 [297]  ，其中歌曲《不能没有你》获得第16届十大中文金曲优秀普通话歌曲奖 [299]  。</span><br><span class="line">1994年4月，发行普通话专辑《忘情水》，其中主打歌《忘情水》获得第17届十大中文金曲奖、十大劲歌金曲最受欢迎国语歌曲金奖、第1届华语榜中榜Channel [V]中文Top 20榜中榜歌曲奖 [137]  [291-292]  。8月6日至25日，在香港红磡体育馆举行20场演唱会。11月25日，发行普通话专辑《天意》；专辑中表达友情的主打歌曲《友谊历久一样浓》是刘德华个人填词的作品 [293]  。同年，获得十大劲歌金曲奖最受欢迎男歌手奖 [292]  。</span><br><span class="line">1995年，加入艺能动音唱片公司。同年，首次登上央视春晚舞台，并演唱歌曲《忘情水》 [13]  。8月，发行普通话专辑《真永远》，其中的代表作是具有励志色彩的歌曲《今天》；该专辑是刘德华在音乐视角上的一个分水岭，从这张专辑开始，刘德华歌唱爱的角度开始变得多元化。此外，他还在洛杉矶、芝加哥等地举行“刘德华真永远美加巡回演唱会”。12月，发行粤语专辑《情未鸟》，同名主打歌《情未鸟》获得十大劲歌金曲奖以及第19届十大中文金曲奖。</span><br><span class="line">1996年，发行普通话专辑《相思成灾》，其中主打歌《相思成灾》获得第19届十大中文金曲奖优秀国语歌曲银奖。同年，在香港红磡体育馆举行20场“刘德华反转红馆倒转地球演唱会”。</span><br><span class="line">1997年4月，发行普通话专辑《爱如此神奇》，其中爱国主义题材的歌曲《中国人》获得十大中文金曲优秀国语歌曲金奖以及十大劲歌金曲奖。12月，发行普通话专辑《爱在刻骨铭心时》，其中的代表作《世界第一等》是刘德华第一首闽南语歌曲。同年，为迎接香港回归，刘德华与那英合唱《东方之珠》 [138-139]  ；在香港回归庆典晚会上，刘德华演唱了代表作《中国人》。</span><br><span class="line">刘德华</span><br><span class="line">刘德华(12张)</span><br><span class="line">1998年，在中央电视台春节联欢晚会上，刘德华与张信哲、毛宁合唱歌曲《大中国》 [140]  。3月，发行粤语专辑《你是我的女人》。11月，发行曲风多元的普通话专辑《笨小孩》；其中与柯受良、吴宗宪合唱的同名主打歌《笨小孩》获得第21届十大中文金曲最受欢迎国语歌曲金奖。</span><br><span class="line">1999年5月，发行普通话专辑《人间爱》，并在专辑中融入中国内地的流行音乐元素。8月7日-21日，在香港红磡体育馆举行举行15场“爱你一万年演唱会”。同年，受迈克尔·杰克逊私人邀请，参加“迈克尔·杰克逊与他的好友韩国汉城慈善音乐会” [141]  。</span><br><span class="line">2000年8月，发行国语专辑《男人的爱》；专辑主打歌《男人哭吧不是罪》是刘德华个人填词的作品。2001年6月，发行普通话专辑《天开了》 [142]  ；其中主打歌《我的心只可容纳你》由刘德华个人填词；而在演唱歌曲《偷听女孩心》时，刘德华还初次尝试了Rap曲风 [143]  。8月17日至31日，在香港红磡体育馆举行15场“夏日Fiesta演唱会”，并在演唱会现场表演了拉丁舞 [144]  。</span><br><span class="line">2002年7月，加入加际娱乐后的首张专辑《美丽的一天》，专辑中歌曲的灵感全部来自10个真实故事 [145]  ；其中歌曲《练习》获得第二届全球华语歌曲排行榜20大金曲奖以及第25届香港十大中文金曲奖优秀国语歌曲奖 [146]  。同年，在南昌、西安等地举行中国巡回演唱会 [141]  。</span><br><span class="line">2003年6月，发行粤语专辑《如果有一天》，同名主打歌《如果有一天》是由刘德华个人填词的作品 [147]  。2004年8月，推出粤语专辑《Coffee or Tea》，刘德华参与其中五首歌曲的创作 [148]  ；其中主打歌曲《常言道》获得第27届十大中文金曲奖 [149]  。同年，在香港十大劲歌金曲颁奖典礼上，获得最受欢迎男歌星奖。</span><br><span class="line">2005年，刘德华在央视春晚舞台上演唱歌曲《恭喜发财》 [150]  。8月4日，发行了普通话专辑《再说一次我爱你》 [264]  ；该专辑以纯爱故事为架构，用十首歌诠释不同角色对爱情的感受 [151]  。12月13日，发行专辑《继续谈情》，其中爱情片《童梦奇缘》的主题曲《下次不敢》是刘德华个人填词的作品 [152]  。</span><br><span class="line">2006年8月8日，刘德华发行了粤语专辑《声音》 [265]  ，这是一张关注人性的唱片 [153]  ；他在该专辑中改变抒情歌曲的风格，尝试演唱摇滚曲风的歌曲《累斗累》以及R&amp;B风格的歌曲《心肝宝贝》。同年，获得十大中文金曲奖优秀流行歌手奖。</span><br><span class="line">2007年7月，刘德华推出了涉及爱情、环保、人生态度等主题的普通话专辑《一只牛的异想世界》 [154]  。12月5日，加入寰亚集团旗下的东亚唱片 [155]  。12月21日起，在香港红馆举行16场Wonderful World香港跨年演唱会，并在现场演唱了《一起走过的日子》、《17岁》等不同时期的代表作。同年，发行专辑《Everyone Is No.1》 [156]  。</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">刘德华</span><br><span class="line">2008年1月，获得第30届十大中文金曲全国最佳男歌手奖、最优秀男歌手大奖、优秀流行歌手大奖 [157]  。2月，发行演唱会专辑《Wonderful World 香港演唱会2007》 [158]  。</span><br><span class="line">2009年2月，推出唱片《希望·爱》，专辑收录了励志作品《一晚长大》、情歌《未到伤心处》等作品。7月，发行粤语精选集《长途伴侣》 [159]  。同年，在广州、长沙等地举行“Wonderful World 中国巡回演唱会” [160]  。8月，为浙江卫视中国蓝打造并演唱台歌《海阔天空一路是蓝》 [161]  。同年，获得第31届十大中文金曲优秀流行歌手大奖 [162]  。</span><br><span class="line">2010年10月，刘德华在入行30周年之际，推出了以翻唱其他歌手歌曲为主的怀旧专辑《忘不了的》 [163]  。12月20日起，在香港红馆举行20场“Unforgettable Concert跨年演唱会”，并演唱了《谢谢你的爱》、《中国人》等代表作 [164]  。</span><br><span class="line">刘德华</span><br><span class="line">刘德华(3张)</span><br><span class="line">2011年，发行原声带专辑《悟》。同年，在上海、郑州等地举行Unforgettable中国巡回演唱会 [165]  。2012年，发行精选专辑《我们的刘德华》。2013年，在北京、上海等地举行“Always刘德华中国巡回演唱会” [166]  。2015年2月18日，刘德华第五次参加中央电视台春节联欢晚会，并演唱歌曲《回家的路》 [167]  。</span><br><span class="line">2016年，由刘德华填词并演唱的歌曲《原谅我》正式发行，这首歌曲是动作片《我的特工爷爷》的主题曲 [168]  。同年，演唱喜剧动作片《王牌逗王牌》的主题曲《笑一笑》，并为这首歌曲创作了歌词 [169]  。2017年，作词并演唱歌曲《慢慢习惯》。</span><br><span class="line">2020年2月，刘德华填词创作粤语歌曲《我知道》 [170]  。5月11日，参与由人民日报客户端、国家人文历史等联合发起的“致敬白衣天使”线上音乐会 [171]  。6月25日，参与中央广播电视总台端午特别节目《端午道安康》，与周笔畅演唱《我知道》 [172]  。10月27日，刘德华发行了单曲《继续美丽》，这首歌曲由刘德华亲自作词 [173]  。11月13日，刘德华演唱的电影《热血合唱团》片尾曲《谁能明白我》上线 [174]  。12月15日，刘德华发行了专辑《演·唱》，该专辑是刘德华的第一张数字专辑，其中所有原创作品均由刘德华亲自作词 [175]  。</span><br><span class="line">2021年2月1日，刘德华与肖央为电影《人潮汹涌》演唱的推广曲《新的一年》发布 [176]  。2月11日，参加中央广播电视总台春节联欢晚会，以云录制的方式与关晓彤、王一博表演创意节目《牛起来》 [128]  。5月6日，演唱电影《总是有爱在隔离》的主题曲《如果心里是爱》 [250]  。7月30日，发行出道40周年纪念单曲《奉陪到底》 [269]  。11月4日，发行为电影《铁道英雄》演唱的片尾主题曲《又弹起心爱的土琵琶》 [296]  。</span><br><span class="line">2022年1月7日，刘德华与易烊千玺演唱的电影《奇迹》宣传主题曲《还是笨小孩》正式上线。 [302-303]  2月，加盟献唱香港无线电视台推出抗疫歌曲《狮子山下同心抗疫》 [307]  。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#life_return"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"life"</span>&gt;</span>个人生活<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">家庭</span><br><span class="line">刘德华的父亲刘礼在启德机场做过消防员的工作。20世纪60年代，刘礼开了一间小吃杂货店以赚钱维持家用。刘德华在家中还有三位姐姐，一位妹妹以及一位弟弟（刘德盛）。</span><br><span class="line">刘德华获香港树仁大学颁予荣誉文学博士</span><br><span class="line">刘德华获香港树仁大学颁予荣誉文学博士(7张)</span><br><span class="line">感情</span><br><span class="line">1986年，刘德华随香港明星足球队赴吉隆坡时，结识了朱丽倩。2008年6月23日，刘德华与朱丽倩在美国拉斯维加斯注册结婚 [177]  。2012年5月9日，刘德华的妻子朱丽倩生下一个女儿 [178-179]  。</span><br><span class="line">学历</span><br><span class="line">2006年7月，香港演艺学院第20届毕业典礼上，刘德华获颁香港演艺学院荣誉院士 [181]  。2017年12月14日，刘德华获香港树仁大学颁予荣誉文学博士 [180]  。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#works_return"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"works"</span>&gt;</span>主要作品<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">参演电影</span><br><span class="line"> </span><br><span class="line">流浪地球2[295] 2023-1-22</span><br><span class="line">导演郭帆 主演吴京</span><br><span class="line"> </span><br><span class="line">红毯先生2023</span><br><span class="line">饰演刘伟驰 导演宁浩 主演刘德华</span><br><span class="line"> </span><br><span class="line">危机航线2022</span><br><span class="line">饰演高皓军 导演彭顺 主演张子枫</span><br><span class="line"> </span><br><span class="line">人潮汹涌2021-2-12</span><br><span class="line">饰演周全 导演饶晓志 主演肖央、万茜</span><br><span class="line"> </span><br><span class="line">唐人街探案32021-2-12</span><br><span class="line">饰演Q（客串） 导演陈思诚 主演王宝强、刘昊然</span><br><span class="line"> </span><br><span class="line">战疫天使[182] 2021</span><br><span class="line">导演邱礼涛 主演刘德华</span><br><span class="line"> </span><br><span class="line">金手指[183] 2021</span><br><span class="line">导演庄文强 主演梁朝伟、任达华</span><br><span class="line"> </span><br><span class="line">拆弹专家22020-12-24</span><br><span class="line">饰演潘乘风 导演邱礼涛 主演刘青云、倪妮</span><br><span class="line"> </span><br><span class="line">热血合唱团2020-11-13</span><br><span class="line">饰演严梓朗 导演关信辉 主演李丽珍</span><br><span class="line"> </span><br><span class="line">莫斯科大劫案2020</span><br><span class="line">饰演—— 导演—— 主演葛优、张涵予</span><br><span class="line"> </span><br><span class="line">香港地2020</span><br><span class="line">饰演—— 导演—— 主演——</span><br><span class="line"> </span><br><span class="line">花椒之味2019-09-12</span><br><span class="line">饰演郭天恩 导演麦曦茵 主演郑秀文、赖雅妍、李晓峰</span><br><span class="line"> </span><br><span class="line">扫毒2：天地对决2019-07-05</span><br><span class="line">饰演余顺天 导演邱礼涛 主演古天乐、苗侨伟、林嘉欣</span><br><span class="line"> </span><br><span class="line">追龙2017-09-30</span><br><span class="line">饰演雷诺 导演刘伟强 主演甄子丹、郑则仕、胡然</span><br><span class="line"> </span><br><span class="line">侠盗联盟2017-08-11</span><br><span class="line">饰演张丹 导演冯德伦 主演张静初、舒淇、杨佑宁</span><br><span class="line"> </span><br><span class="line">拆弹专家2017-4-28</span><br><span class="line">饰演章在山 导演邱礼涛 主演姜武、小宋佳、黄宗泽</span><br><span class="line"> </span><br><span class="line">铁道飞虎2016-12-23</span><br><span class="line">饰演特别出演 导演丁晟 主演成龙、黄子韬、王凯</span><br><span class="line"> </span><br><span class="line">长城2016-12-18</span><br><span class="line">饰演王军师 导演张艺谋 主演马特·达蒙、景甜、张涵予</span><br><span class="line"> </span><br><span class="line">王牌逗王牌2016-10-01</span><br><span class="line">饰演宝爷 导演王晶 主演黄晓明、王祖蓝、沈腾</span><br><span class="line"> </span><br><span class="line">我的特工爷爷2016-04-01</span><br><span class="line">饰演李政玖 导演洪金宝 主演洪金宝、朱雨辰、李勤勤</span><br><span class="line"> </span><br><span class="line">澳门风云32016-02-08</span><br><span class="line">饰演刀仔 导演王晶 主演周润发、张家辉、刘嘉玲、李宇春</span><br><span class="line"> </span><br><span class="line">我的少女时代[191] 2015-11-19</span><br><span class="line">饰演刘德华（客串） 导演陈玉珊 主演宋芸桦、王大陆</span><br><span class="line"> </span><br><span class="line">解救吾先生2015-09-30</span><br><span class="line">饰演吾先生 导演丁晟 主演刘烨、王千源、吴若普</span><br><span class="line"> </span><br><span class="line">失孤2015-03-21</span><br><span class="line">饰演雷泽宽 导演彭三源 主演井柏然、梁家辉</span><br><span class="line"> </span><br><span class="line">风暴2013-12-12</span><br><span class="line">饰演吕明哲 导演袁锦麟 主演姚晨、林家栋</span><br><span class="line"> </span><br><span class="line">盲探2013-07-04</span><br><span class="line">饰演庄士敦 导演杜琪峰 主演郑秀文</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qywz9nrfj21ib0u04ea.jpg" alt="image-20220429223741680"></p><h3 id="9-注释和特殊字符"><a href="#9-注释和特殊字符" class="headerlink" title="9. 注释和特殊字符"></a>9. 注释和特殊字符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 我想喝咖啡 --&gt;</span></span><br><span class="line">  讲 &amp;nbsp;&amp;nbsp;&amp;nbsp; 究 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &amp;lt;p&amp;gt;是一个段落标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1qyxecnckj20oc0cgaa8.jpg" alt="image-20220429223806059" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的使用方法&amp;相关配置</title>
      <link href="/2022/03/24/vim%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95-%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/24/vim%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95-%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-5b52bdd1788e37518d13c70c48e93e01_r.png&refer=http%3A%2F%2Fpic4.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1665127211&t=bd1a358c8904b624519e411996d86f91" alt="img" style="zoom: 33%;"><a id="more"></a><h1 id="vim的使用方法与相关配置"><a href="#vim的使用方法与相关配置" class="headerlink" title="vim的使用方法与相关配置"></a>vim的使用方法与相关配置</h1><h2 id="插件的使用（后面会用到，可以先跳过不看）"><a href="#插件的使用（后面会用到，可以先跳过不看）" class="headerlink" title="插件的使用（后面会用到，可以先跳过不看）"></a>插件的使用（后面会用到，可以先跳过不看）</h2><h3 id="vim-plug插件"><a href="#vim-plug插件" class="headerlink" title="vim-plug插件"></a>vim-plug插件</h3><p>网址：<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug</a><br>里面详细介绍了各个平台的安装的方法<br><strong>这里以mac系统为例子:</strong></p><p>安装(mac终端上安装)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h3 id="我们的第一个插件-startify"><a href="#我们的第一个插件-startify" class="headerlink" title="我们的第一个插件-startify"></a>我们的第一个插件-startify</h3><p>网址：<a href="https://github.com/mhinz/vim-startify" target="_blank" rel="noopener">https://github.com/mhinz/vim-startify</a></p><ul><li>打开vimrc，终端 ~ 目录下输入：<br>新建<code>.vimrc</code>配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .vimrc</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>call plug#begin(‘~/.vim/plugged’)    //插件开始</li><li>Plug ‘mhinz/vim-startify’        //以后的安装插件方式，基本就是把github链接的最后两个路径输入即可</li><li>call plug#end()        //插件结束<br>在vimrc配置文件中，输入：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call plug#begin(&apos;~/.vim/plugged&apos;)</span><br><span class="line"></span><br><span class="line">Plug &apos;mhinz/vim-startify&apos;</span><br><span class="line"></span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure><p>进入command模式：</p><ul><li>:w</li><li>:source .vimrc</li><li>:PlugInstall</li><li>:wq</li></ul><p>之后在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim</span><br></pre></td></tr></table></figure><p>然后就可以看到这个界面了：<br><img src="/images/vim-startify.png" alt="vim-startify"></p><p>如果出现打不开的情况，<code>startify: Can&#39;t read viminfo file. Read :help startify-faq-02</code><br>在终端下执行：</p><ul><li>chmod 777 .viminfo</li><li>vim .viminfo</li><li>:wq</li></ul><p>即可解决</p><h3 id="如何搜寻自己需要的插件"><a href="#如何搜寻自己需要的插件" class="headerlink" title="如何搜寻自己需要的插件"></a>如何搜寻自己需要的插件</h3><ol><li>在 github 上搜索</li><li>网址：<a href="https://vimawesome.com" target="_blank" rel="noopener">https://vimawesome.com</a></li></ol><h3 id="清除插件"><a href="#清除插件" class="headerlink" title="清除插件"></a>清除插件</h3><p> .vimrc的command下执行：</p><ul><li>:PlugClean</li></ul><hr><h2 id="vimrc文件的配置"><a href="#vimrc文件的配置" class="headerlink" title=".vimrc文件的配置"></a>.vimrc文件的配置</h2><p><strong>作用：</strong>让配置持久化，不用每次进入vim都要打开<code>显示行数</code>等的操作</p><p>在终端执行以下两个命令：</p><ul><li>cd ~</li><li>vim .vimrc</li></ul><p>.vimrc一些常用的设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">set number</span><br><span class="line">syntax on</span><br><span class="line">" 高亮搜索</span><br><span class="line">set hlsearch</span><br><span class="line">" 设置折叠格式</span><br><span class="line">set foldmethod=indent</span><br><span class="line">" 使用jj 进入normal模式</span><br><span class="line">inoremap jj &lt;Esc&gt;`^</span><br><span class="line"></span><br><span class="line">" 一些方便的映射</span><br><span class="line">let mapleader=','</span><br><span class="line">let g:mapleader=','</span><br><span class="line"></span><br><span class="line">" 使用 leader + w 直接保存</span><br><span class="line">inoremap &lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;</span><br><span class="line">nnoremap &lt;leader&gt;w :w&lt;cr&gt;</span><br></pre></td></tr></table></figure><p>以下内容可以选择自己需要的补充进来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible &quot; 关闭 vi 兼容模式</span><br><span class="line">syntax on &quot; 自动语法高亮</span><br><span class="line">colorscheme molokai &quot; 设定配色方案</span><br><span class="line">set number &quot; 显示行号</span><br><span class="line">set cursorline &quot; 突出显示当前行</span><br><span class="line">set ruler &quot; 打开状态栏标尺</span><br><span class="line">set shiftwidth=4 &quot; 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</span><br><span class="line">set softtabstop=4 &quot; 使得按退格键时可以一次删掉 4 个空格</span><br><span class="line">set tabstop=4 &quot; 设定 tab 长度为 4</span><br><span class="line">set nobackup &quot; 覆盖文件时不备份</span><br><span class="line">set autochdir &quot; 自动切换当前目录为当前文件所在的目录</span><br><span class="line">filetype plugin indent on &quot; 开启插件</span><br><span class="line">set backupcopy=yes &quot; 设置备份时的行为为覆盖</span><br><span class="line">set ignorecase smartcase &quot; 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感</span><br><span class="line">set nowrapscan &quot; 禁止在搜索到文件两端时重新搜索</span><br><span class="line">set incsearch &quot; 输入搜索内容时就显示搜索结果</span><br><span class="line">set hlsearch &quot; 搜索时高亮显示被找到的文本</span><br><span class="line">set noerrorbells &quot; 关闭错误信息响铃</span><br><span class="line">set novisualbell &quot; 关闭使用可视响铃代替呼叫</span><br><span class="line">set t_vb= &quot; 置空错误铃声的终端代码</span><br><span class="line">&quot; set showmatch &quot; 插入括号时，短暂地跳转到匹配的对应括号</span><br><span class="line">&quot; set matchtime=2 &quot; 短暂跳转到匹配括号的时间</span><br><span class="line">set magic &quot; 设置魔术</span><br><span class="line">set hidden &quot; 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存</span><br><span class="line">set guioptions-=T &quot; 隐藏工具栏</span><br><span class="line">set guioptions-=m &quot; 隐藏菜单栏</span><br><span class="line">set smartindent &quot; 开启新行时使用智能自动缩进</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line">&quot; 不设定在插入状态无法用退格键和 Delete 键删除回车符</span><br><span class="line">set cmdheight=1 &quot; 设定命令行的行数为 1</span><br><span class="line">set laststatus=2 &quot; 显示状态栏 (默认值为 1, 无法显示状态栏)</span><br><span class="line">set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\ </span><br><span class="line">&quot; 设置在状态行显示的信息</span><br><span class="line">set foldenable &quot; 开始折叠</span><br><span class="line">set foldmethod=syntax &quot; 设置语法折叠</span><br><span class="line">set foldcolumn=0 &quot; 设置折叠区域的宽度</span><br><span class="line">setlocal foldlevel=1 &quot; 设置折叠层数为</span><br><span class="line">&quot; set foldclose=all &quot; 设置为自动关闭折叠 </span><br><span class="line">&quot; nnoremap &lt;space&gt; @=((foldclosed(line(&apos;.&apos;)) &lt; 0) ? &apos;zc&apos; : &apos;zo&apos;)&lt;CR&gt;</span><br><span class="line">&quot; 用空格键来开关折叠</span><br></pre></td></tr></table></figure><hr><h2 id="vim的四种模式"><a href="#vim的四种模式" class="headerlink" title="vim的四种模式"></a>vim的四种模式</h2><ul><li><em>normal</em>模式（进入vim后的默认模式）</li><li><em>insert</em>模式</li><li><em>command</em>模式</li><li><em>visual</em>模式</li></ul><h3 id="如何进入command模式"><a href="#如何进入command模式" class="headerlink" title="如何进入command模式"></a>如何进入command模式</h3><p>normal模式下按下<code>:</code></p><h3 id="如何进入insert模式："><a href="#如何进入insert模式：" class="headerlink" title="如何进入insert模式："></a>如何进入insert模式：</h3><p>小写：</p><ul><li>i : 在当前位置的前一个空隙插入 </li><li>a： 在当前位置的后一个空隙插入 </li><li>o： 在当前行的下一行插入</li><li>gi：快速进入insert模式并跳转到最后一次编辑的地方</li></ul><p>大写： </p><ul><li>I ： 在行首插入</li><li>A： 在行尾插入    </li><li>O：在当前行的上一行插入</li></ul><h3 id="如何进入visual模式："><a href="#如何进入visual模式：" class="headerlink" title="如何进入visual模式："></a>如何进入visual模式：</h3><ul><li>v: 区域选取</li><li>V：行选取</li><li>ctrl + v：块选取</li></ul><h3 id="退出insert-visual模式："><a href="#退出insert-visual模式：" class="headerlink" title="退出insert/visual模式："></a>退出insert/visual模式：</h3><ul><li>左上角的 ESC</li><li>ctrl + [</li></ul><hr><h2 id="光标的移动"><a href="#光标的移动" class="headerlink" title="光标的移动"></a>光标的移动</h2><h3 id="基本移动"><a href="#基本移动" class="headerlink" title="基本移动"></a>基本移动</h3><ul><li>h：左移</li><li>j：右移</li><li>k：下移</li><li>l：上移</li></ul><h3 id="word移动"><a href="#word移动" class="headerlink" title="word移动"></a>word移动</h3><ul><li>w：下一个word的开头</li><li>e：下一个word的结尾</li><li>W：下一个WORD的开头</li><li>E：下一个WORD的结尾</li><li>b：上一个word的开头</li><li>B：上一个WORD的开头</li></ul><p><em>注意</em>：<code>WORD指的是以空格为单位进行移动</code></p><h3 id="行间搜索移动"><a href="#行间搜索移动" class="headerlink" title="行间搜索移动"></a>行间搜索移动</h3><p>在normal模式下：</p><ul><li>f + 字符   分号/逗号跳转到下一个/上一个，大写的F表示反过来搜索前面的字符</li></ul><h3 id="水平移动"><a href="#水平移动" class="headerlink" title="水平移动"></a>水平移动</h3><ul><li>0：移动到行首</li><li>$：移动到行尾</li></ul><h3 id="页面的移动"><a href="#页面的移动" class="headerlink" title="页面的移动"></a>页面的移动</h3><ul><li>gg/G：移动到文件的开头/结尾</li><li>H/M/L：跳转到屏幕的开头(Head)/中间(Middle)/结尾(Lower)</li><li>Ctrl + o：快速返回</li><li>Ctrl + u:向上翻页</li><li>Ctrl + f:向下翻页</li><li>zz：把屏幕置为中间  </li></ul><h3 id="插件：快速移动光标"><a href="#插件：快速移动光标" class="headerlink" title="插件：快速移动光标"></a>插件：快速移动光标</h3><ul><li>不懂如何使用插件的童鞋直接跳转到本文章的插件位置，有详细使用过程。</li></ul><p>网址：<a href="https://github.com/easymotion/vim-easymotion" target="_blank" rel="noopener">https://github.com/easymotion/vim-easymotion</a></p><p>映射(快捷键 ss)：</p><ul><li>nmap ss <plug>(easymotion-s2)</plug></li></ul><hr><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><h3 id="normal模式下："><a href="#normal模式下：" class="headerlink" title="normal模式下："></a>normal模式下：</h3><ul><li>y和p 进行复制</li><li>d和p 进行剪贴</li><li>yiw 复制一个单词</li><li>yy 复制一行</li></ul><p>提示：<code>可以进入visual模式选中要操作的区域进行复制或者剪贴的操作</code></p><h3 id="insert模式下："><a href="#insert模式下：" class="headerlink" title="insert模式下："></a>insert模式下：</h3><p>假如粘贴代码出现缩进混乱的情况解决方案：</p><ul><li>出现这种情况一般是因为设置了autoindent<br>步骤：<ul><li>:set paste</li><li>粘贴</li><li>:set nopaste</li></ul></li></ul><p>提示：<code>是不是感觉很麻烦？其实可以用映射来处理</code></p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p><strong>其实，复制与剪切下来的内容，都被临时的放在了“无名寄存器”中<br>我们可以利用寄存器进行复制粘贴的操作</strong></p><p>示例：</p><ul><li>把内容保存到寄存器：<ul><li>“ayiw 复制一个单词到寄存器a中</li><li>“bdd 删除当前行到寄存器b中</li></ul></li><li>查看寄存器：<ul><li>reg + 寄存器名称 </li></ul></li><li>粘贴：<ul><li>“ap    粘贴寄存器a中的内容 </li><li>“bp    粘贴寄存器b中的内容</li></ul></li></ul><h4 id="如何将vim里的内容复制到系统剪贴板："><a href="#如何将vim里的内容复制到系统剪贴板：" class="headerlink" title="如何将vim里的内容复制到系统剪贴板："></a>如何将vim里的内容复制到系统剪贴板：</h4><ul><li>首先要确保系统中有 clipboard（我的vim里没有，不知道如何安装）<ul><li>:echo has(‘clipboard’)</li><li>结果为“1”，表示存在</li></ul></li><li>一般使用v/V选择内容</li><li>“+y    表示复制到了系统剪贴板</li></ul><h4 id="把其他位置的内容复制到vim中："><a href="#把其他位置的内容复制到vim中：" class="headerlink" title="把其他位置的内容复制到vim中："></a>把其他位置的内容复制到vim中：</h4><ul><li>首先要确保系统中有 clipboard</li><li>:set clipboard=unnamed        </li><li>直接按下p进行粘贴</li></ul><hr><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="insert模式下-linux命令行下通用-："><a href="#insert模式下-linux命令行下通用-：" class="headerlink" title="insert模式下(linux命令行下通用)："></a>insert模式下(linux命令行下通用)：</h3><ul><li>ctrl + h：删除上一个字符</li><li>ctrl + w：删除上一个单词</li><li>ctrl + u：删除当前行光标前的所有内容</li></ul><h3 id="normal模式下：-1"><a href="#normal模式下：-1" class="headerlink" title="normal模式下："></a>normal模式下：</h3><ul><li>dd：删除当前行</li><li>x/X：删除后/前一个字符</li><li>dw：删除后一个word</li><li>dW：删除后一个WORD</li><li>db：删除前一个word</li><li>dB：删除前一个WORD</li><li>daw：删除一个单词（包括空格）</li><li>diw：删除一个单词（不包括空格）</li><li>dip：删除一个段落</li></ul><h3 id="特殊操作："><a href="#特殊操作：" class="headerlink" title="特殊操作："></a>特殊操作：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><h4 id="移动光标到要修改的位置："><a href="#移动光标到要修改的位置：" class="headerlink" title="移动光标到要修改的位置："></a>移动光标到要修改的位置：</h4><ul><li><p>viw：选中一个单词</p></li><li><p>vi + “    //选中双引号中的内容</p></li><li><p>ci + “    //删除双引号中的内容并进入插入模式</p></li></ul><h4 id="局部删除："><a href="#局部删除：" class="headerlink" title="局部删除："></a>局部删除：</h4><ul><li><p>如果想删除（hello world）括号里面的所有内容：</p><ul><li>dt)        <code>//意思是删除，直到遇到这个括号</code></li></ul></li><li><p>如果想删除光标后面的所有内容：</p><ul><li>VGd</li></ul></li><li><p>如果想删除当前行的光标前面所有内容：</p><ul><li>d0</li></ul></li><li><p>如果想删除当前行的光标后面所有内容：</p><ul><li>d$</li></ul></li></ul><p>其实所有删除的命令都可以结合数字来重复执行<br>例如：</p><ul><li>4dd：删除下面4行</li><li>5x：删除后面5个字符</li></ul><hr><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="字符串的查询："><a href="#字符串的查询：" class="headerlink" title="字符串的查询："></a>字符串的查询：</h3><p>normal 模式下:</p><ul><li>/ + word：前向搜索</li><li>? + word：后向搜索</li></ul><p><code>使用n/N跳转到下一个/上一个</code></p><h3 id="插件：文件的查询"><a href="#插件：文件的查询" class="headerlink" title="插件：文件的查询"></a>插件：文件的查询</h3><h4 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h4><p>网址：<a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="noopener">https://github.com/scrooloose/nerdtree</a><br>快捷键：<code>map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;</code></p><h4 id="模糊搜索器（ctrlp）"><a href="#模糊搜索器（ctrlp）" class="headerlink" title="模糊搜索器（ctrlp）"></a>模糊搜索器（ctrlp）</h4><p>网址：<a href="https://github.com/ctrlpvim/ctrlp.vim" target="_blank" rel="noopener">https://github.com/ctrlpvim/ctrlp.vim</a><br>快捷键：<code>&lt;C-p&gt;</code></p><ul><li>最好提前将目录移动至根目录下，方便全局搜索</li></ul><h4 id="更加强大的模糊搜索工具-fzf-vim"><a href="#更加强大的模糊搜索工具-fzf-vim" class="headerlink" title="更加强大的模糊搜索工具:fzf.vim"></a>更加强大的模糊搜索工具:fzf.vim</h4><p>网址：<a href="https://github.com/junegunn/fzf.vim" target="_blank" rel="noopener">https://github.com/junegunn/fzf.vim</a></p><p>撞上插件以后会发现<code>Ag</code>无法使用<br>解决办法：</p><ul><li>mac下需要安装(直接在终端执行下面两个语句)：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br><span class="line"></span><br><span class="line">brew install the_silver_searcher</span><br></pre></td></tr></table></figure><p>然后Ag就可以使用了</p><ul><li>centos下需要安装：<br>在 <strong><a href="https://github.com/ggreer/the_silver_searcher/releases" target="_blank" rel="noopener">https://github.com/ggreer/the_silver_searcher/releases</a></strong> 下随便找一个，拷贝连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ggreer/the_silver_searcher/archive/2.2.0.tar.gz</span><br><span class="line">tar -xf 2.2.0.tar.gz</span><br><span class="line">cd the_silver_searcher-2.2.0</span><br><span class="line">sh build.sh</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>然后进入vim执行<code>Ag</code>命令时有可能提示要更新，输入 y 即可，之后<code>Ag</code>就可以使用了<br>语法：</p><ul><li>:Ag      回车      输入字符串        （提示：最好是提前切换好目录，不然文件太多）</li><li>:Files   回车    输入文件名称    （例子：Files /hello.py    ，表示从根目录下，搜索名为<code>hello.py的</code>文件，如果输入一个目录名字的话，会把该目录下的所有文件展示出来）</li></ul><hr><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><h3 id="normal模式下的局部替换："><a href="#normal模式下的局部替换：" class="headerlink" title="normal模式下的局部替换："></a>normal模式下的局部替换：</h3><ul><li>r + 字符：替换为输入的字符</li><li>s：删除当前字符并进入插入模式</li><li>R：从左到右连续替换字符</li><li>S：删除当前行并进入插入模式</li><li>caw：删除当前单词,并进入插入模式</li></ul><h4 id="c-命令有很多，可以自己研究一下："><a href="#c-命令有很多，可以自己研究一下：" class="headerlink" title="c + 命令有很多，可以自己研究一下："></a>c + 命令有很多，可以自己研究一下：</h4><p>例子：</p><ul><li><p>t和f两个字母的含义：</p><ul><li>f:find</li><li>t:till</li></ul></li><li><p>经过我的测试可以和 v配合使用：</p><ul><li><p><code>v + f + 字符</code>：选中后面内容直到找到那个字符(也删选中那个字符)为止</p></li><li><p><code>v + t + &quot;</code>：选中后面的内容直到找到 “  （不选中”）为止</p></li><li><p><code>c + f + 字符</code>：删除后面内容直到找到那个字符(也删除那个字符)为止，并进入插入模式</p></li><li><p><code>c + t + &quot;</code>：删除后面的内容直到找到 “  （不删除”）为止，并进入插入模式</p></li></ul></li></ul><h3 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h3><p><strong>格式：</strong></p><ul><li><code>[range] s /{pattern}/{string}/[flags]</code><ul><li>range 表示范围 比如 10,20    表示10-20行，%表示全部</li><li>pattern 为要替换的模式，string 为替换后文本</li><li>g（global）：表示全局范围内执行</li><li>n（number）：报告匹配到的次数而不进行替换，可以用来查询匹配次数</li></ul></li></ul><p><strong>例子：</strong></p><ul><li><code>:% s/word1/word2/g</code></li></ul><p><strong>正则表达式的应用：</strong>    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_quack</span><span class="params">(ducker)</span>:</span></span><br><span class="line">    ducker.quack()</span><br></pre></td></tr></table></figure><p><em>这种情况下只想替换函数里面的quack，而不替换函数名称包含quack的do_quack话，可以这样做：</em></p><ul><li><code>:% s/\&lt;quack\&gt;/word/g</code></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="vim-surround（成对替换）"><a href="#vim-surround（成对替换）" class="headerlink" title="vim-surround（成对替换）"></a>vim-surround（成对替换）</h4><p>快速替换，添加，删除 单引号，双引号等<br>网址：<a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">https://github.com/tpope/vim-surround</a></p><p><strong>语法：</strong></p><ul><li>ds    删除</li><li>cs    替换</li><li>ys    添加</li></ul><p><strong>例子：</strong></p><ul><li>print(“hello world”) #<code>ds &quot;</code></li><li>print(“hello world”) #<code>cs &quot; &#39;</code></li><li>print(hello world) <ul><li>其中有很多空格的话用这个 <code>ys vf) &quot;</code>这一种光标要移动到句子开头      </li><li>只有一个单词的话用这个 <code>ys iw &quot;</code></li></ul></li></ul><hr><h4 id="多文件批量替换"><a href="#多文件批量替换" class="headerlink" title="多文件批量替换"></a>多文件批量替换</h4><p>网址：<a href="https://github.com/brooth/far.vim" target="_blank" rel="noopener">https://github.com/brooth/far.vim</a></p><p><strong>语法：</strong></p><ul><li><p>:Far {被替换的词} {要替换成的词} 路径        </p></li><li><p><em>注意，只能替换输入的路径中的文件内容，比如输入 / ，并不是替换根目录下的全部包括其下所有目录中的文件，而是只替换根目录下的文件内容*</em><br>例子：</p><ul><li><p>vim /tmp/hello.py</p></li><li><p>print(“hello world”)</p></li><li><p>:Far hello hi /tmp/*.py    或者    :Far hello hi /tmp/</p></li></ul></li><li><p>:Fardo    //确认替换</p></li></ul><hr><h2 id="多文件操作"><a href="#多文件操作" class="headerlink" title="多文件操作"></a>多文件操作</h2><h3 id="首先提一个概念-Buffer："><a href="#首先提一个概念-Buffer：" class="headerlink" title="首先提一个概念-Buffer："></a>首先提一个概念-Buffer：</h3><ul><li>Buffer 是指打开的一个文件的内存缓冲区</li><li>窗口是buffer可视化的分割区域</li><li>tab 可以组织窗口为一个工作区</li></ul><p><code>在文件中的修改都是针对内存中的缓冲区，并不会直接保存到文件直到我们执行 :w 的时候才会把修改内容写入到文件里</code></p><h3 id="如何切换Buffer："><a href="#如何切换Buffer：" class="headerlink" title="如何切换Buffer："></a>如何切换Buffer：</h3><ul><li>:ls       //查看缓冲区</li><li>:b n    //跳转到第n个缓冲区</li><li>:bpre    //跳转到上一个缓冲区</li><li>:bnext    //跳转到下一个缓冲区</li><li>:bfirst    //跳转到第一个缓冲区</li><li>:blast    //跳转到最后一个缓冲区</li><li>:b buffer_name + tab补全</li></ul><h3 id="如何在一个buffer中打开其他的文件："><a href="#如何在一个buffer中打开其他的文件：" class="headerlink" title="如何在一个buffer中打开其他的文件："></a>如何在一个buffer中打开其他的文件：</h3><ul><li>:e 文件名</li></ul><h3 id="窗口："><a href="#窗口：" class="headerlink" title="窗口："></a>窗口：</h3><p><em><code>一个缓冲区可以分割成多个窗口，每个窗口也可以打开不同缓冲区</code></em></p><ul><li>&lt;Ctrl + w&gt;s 水平分割    //或者sp</li><li>&lt;Ctrl + w&gt;v 垂直分割    //或者vs</li></ul><h3 id="切换窗口："><a href="#切换窗口：" class="headerlink" title="切换窗口："></a>切换窗口：</h3><ul><li>&lt;Ctrl + w&gt;w    //循环切换窗口</li><li>&lt;Ctrl + w&gt;h/j/k/l    //左/下/上/右切换窗口</li></ul><h3 id="移动窗口："><a href="#移动窗口：" class="headerlink" title="移动窗口："></a>移动窗口：</h3><ul><li>&lt;Ctrl + w&gt;H/L    //左右移动窗口</li></ul><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><ul><li>:tabe + filename    //在新的标签页中打开文件</li><li>:<c-w>T    //把当前窗口移动到一个新标签页</c-w></li><li>:tabc    //关闭当前标签页及其中的所有窗口</li><li>:tabo    //只保留活动标签页，关闭其他所有标签页</li><li>gt    //切换标签页</li></ul><hr><h2 id="“宏”的使用方法"><a href="#“宏”的使用方法" class="headerlink" title="“宏”的使用方法"></a>“宏”的使用方法</h2><p>宏就像是拍电影😂</p><p><code>q（开始） + 寄存器名称 + {操作} +  q（退出）</code></p><p><strong>例子：</strong><br><em>给所有的行首尾加上双引号：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br></pre></td></tr></table></figure><ol><li><p>录制过程：</p><ul><li><code>qaI&quot;&lt;Esc&gt;A&quot;&lt;Esc&gt;q</code></li></ul></li><li><p>录制完成后输入 <code>@a</code> 即可给光标所在行执行相同的操作</p></li></ol><ul><li>问题：这样一行一行的重复操作很麻烦，怎么办呢？</li></ul><p><strong>方法：</strong></p><ul><li>VG    把光标下的所有行选中</li><li>进入command模式</li><li>:normal @a</li></ul><p><strong>即可给所有行执行相同的操作</strong><br>屌不屌🐂</p><hr><h2 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h2><p><code>ctrl + n/p</code> 补全单词<br><code>ctrl + xf</code> 补全文件名</p><p><strong>补充：</strong><br>插入当前文件名    <code>:r! echo %</code><br>插入当前文件完整路径    <code>:r! echo %:p</code></p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><h3 id="递归映射（极度不推荐，有可能会出现map连锁）"><a href="#递归映射（极度不推荐，有可能会出现map连锁）" class="headerlink" title="递归映射（极度不推荐，有可能会出现map连锁）"></a>递归映射（极度不推荐，有可能会出现map连锁）</h3><p><strong>进入command模式下：</strong></p><ul><li>:map - x    //按下 - 等于 x 来删除字符</li><li>:map <space> viw    //按下空格选中单词</space></li><li>:map <c-d> dd    //按下 ctrl + d 来删除一行</c-d></li></ul><p><strong>map默认下是normal下的映射</strong></p><ul><li>nmap    //normal模式下的map</li><li>vmap    //visual模式下的map</li><li>imap    //insert模式下的map</li></ul><p><strong><em>之所以不推荐使用递归的map，是因为以下这种情况</em></strong><br>map - dd<br>map \ -</p><h3 id="非递归映射（用这个即可）"><a href="#非递归映射（用这个即可）" class="headerlink" title="非递归映射（用这个即可）"></a>非递归映射（用这个即可）</h3><ul><li>nnoremap</li><li>inoremap</li><li>vnoremap</li></ul><hr><h2 id="vim的配色和美化"><a href="#vim的配色和美化" class="headerlink" title="vim的配色和美化"></a>vim的配色和美化</h2><h3 id="配色方法："><a href="#配色方法：" class="headerlink" title="配色方法："></a>配色方法：</h3><ul><li>:colorscheme 显示当前的主题配色，默认是default</li><li>:colorscheme <c-d> 显示所有的配色</c-d></li><li>:colorscheme + 名称 更换配色</li></ul><h3 id="插件美化"><a href="#插件美化" class="headerlink" title="插件美化"></a>插件美化</h3><p>状态栏美化插件：<br>网址：<a href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener">https://github.com/vim-airline/vim-airline</a></p><p>代码缩进线<br>网址：<a href="https://github.com/yggdroot/indentline" target="_blank" rel="noopener">https://github.com/yggdroot/indentline</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sed的使用方法</title>
      <link href="/2022/02/03/sed%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/02/03/sed%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="sed的使用方法"><a href="#sed的使用方法" class="headerlink" title="sed的使用方法"></a>sed的使用方法</h1><p>sed文本处理：正则选定文本 -&gt; sed进行处理</p><p>sed处理后并不会改变其内容</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="命令行格式"><a href="#命令行格式" class="headerlink" title="命令行格式"></a>命令行格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [options] <span class="string">'command'</span> file(s)</span><br></pre></td></tr></table></figure><p>主要参数：</p><ul><li>options: -e,-n</li><li>command: 行定位（正则）+ sed命令（操作）</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/root/p'</span></span><br><span class="line"></span><br><span class="line">sed -e <span class="string">'10,20d'</span> -e <span class="string">'s/false/true/g'</span></span><br></pre></td></tr></table></figure><h3 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -f scriptfile file(s)</span><br></pre></td></tr></table></figure><h2 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h2><p><code>注意：增删改查等操作并不会真的修改文件本身，只是对输出进行修改而已</code></p><ul><li>p : 打印相关的行</li><li>a : 新增行并输出（与vim的命令类似）</li><li>i : 插入行（与vim的命令类似）</li><li>c : 代替行（与vim的命令类似）</li><li>d : 删除行（与vim的命令类似）</li><li>s : 替换（核心参数） | g : 全局</li></ul><h3 id="p"><a href="#p" class="headerlink" title="p"></a>p</h3><p>对<code>passwd</code>文件进行打印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'p'</span> passwd</span><br></pre></td></tr></table></figure><p>但是你会发现这样直接打印出的结果所有行会被<code>输出两次</code></p><p>应该加上<code>-n</code>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'p'</span> passwd</span><br></pre></td></tr></table></figure><h3 id="a（后）"><a href="#a（后）" class="headerlink" title="a（后）"></a>a（后）</h3><p>在<code>第5行</code>后添加分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'5a========================='</span></span><br></pre></td></tr></table></figure><p>在<code>第1-4行</code>后添加分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'1,4a========================='</span></span><br></pre></td></tr></table></figure><h3 id="i（前）"><a href="#i（前）" class="headerlink" title="i（前）"></a>i（前）</h3><p>在<code>第5行</code>前添加分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'5i========================='</span></span><br></pre></td></tr></table></figure><p>在<code>第1-4行</code>前添加分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'1,4i========================='</span></span><br></pre></td></tr></table></figure><h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><p>对<code>第10行</code>进行替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'10c hello'</span></span><br></pre></td></tr></table></figure><p>对<code>第1-10行</code>进行替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'1,10c hello'</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">    11  games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">    12  ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">    13  nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">    14  systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">    15  dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">    16  polkitd:x:999:997:User for polkitd:/:/sbin/nologin</span><br><span class="line">    17  abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">    18  tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">    19  postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">    20  chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21  sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">    22  mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash</span><br></pre></td></tr></table></figure><p><code>你会发现并不是一行行的进行替换，而是整体的替换为一个</code></p><h3 id="d"><a href="#d" class="headerlink" title="d"></a>d</h3><p>删除第10行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'10d'</span></span><br></pre></td></tr></table></figure><p>###s</p><p>将passwd文件每一行中的<code>nologin</code>替换为<code>login</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/nologin/login/'</span> passwd</span><br></pre></td></tr></table></figure><p><code>注意</code>：不要忽略上面示例命令中的每一个<code>/</code></p><p>将passwd文件中的每一个<code>:</code>替换为<code>%</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/:/%/'</span> passwd</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root%x:0:0:root:/root:/bin/bash</span><br><span class="line">bin%x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon%x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm%x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp%x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync%x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown%x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt%x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail%x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator%x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games%x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp%x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody%x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network%x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus%x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd%x:999:997:User for polkitd:/:/sbin/nologin</span><br><span class="line">abrt%x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">tss%x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">postfix%x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony%x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">sshd%x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">mysql%x:27:27:MySQL Server:/var/lib/mysql:/bin/bash</span><br></pre></td></tr></table></figure><p>每一行只替换了开头第一个冒号，这并不是我们想要得到的最后结果<br>怎么解决？<br>需要进行全局的替换操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/:/%/g'</span> passwd</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root%x%0%0%root%/root%/bin/bash</span><br><span class="line">bin%x%1%1%bin%/bin%/sbin/nologin</span><br><span class="line">daemon%x%2%2%daemon%/sbin%/sbin/nologin</span><br><span class="line">adm%x%3%4%adm%/var/adm%/sbin/nologin</span><br><span class="line">lp%x%4%7%lp%/var/spool/lpd%/sbin/nologin</span><br><span class="line">sync%x%5%0%sync%/sbin%/bin/sync</span><br><span class="line">shutdown%x%6%0%shutdown%/sbin%/sbin/shutdown</span><br><span class="line">halt%x%7%0%halt%/sbin%/sbin/halt</span><br><span class="line">mail%x%8%12%mail%/var/spool/mail%/sbin/nologin</span><br><span class="line">operator%x%11%0%operator%/root%/sbin/nologin</span><br><span class="line">games%x%12%100%games%/usr/games%/sbin/nologin</span><br><span class="line">ftp%x%14%50%FTP User%/var/ftp%/sbin/nologin</span><br><span class="line">nobody%x%99%99%Nobody%/%/sbin/nologin</span><br><span class="line">systemd-network%x%192%192%systemd Network Management%/%/sbin/nologin</span><br><span class="line">dbus%x%81%81%System message bus%/%/sbin/nologin</span><br><span class="line">polkitd%x%999%997%User for polkitd%/%/sbin/nologin</span><br><span class="line">abrt%x%173%173%%/etc/abrt%/sbin/nologin</span><br><span class="line">tss%x%59%59%Account used by the trousers package to sandbox the tcsd daemon%/dev/null%/sbin/nologin</span><br><span class="line">postfix%x%89%89%%/var/spool/postfix%/sbin/nologin</span><br><span class="line">chrony%x%998%996%%/var/lib/chrony%/sbin/nologin</span><br><span class="line">sshd%x%74%74%Privilege-separated SSH%/var/empty/sshd%/sbin/nologin</span><br><span class="line">mysql%x%27%27%MySQL Server%/var/lib/mysql%/bin/bash</span><br></pre></td></tr></table></figure><p>ok,这样就解决了（形式跟vim的替换神似啊朋友们🤯）</p><h2 id="行定位"><a href="#行定位" class="headerlink" title="行定位"></a>行定位</h2><h3 id="定位一行："><a href="#定位一行：" class="headerlink" title="定位一行："></a>定位一行：</h3><ul><li>x（行号）</li><li>/pattern/（正则）</li></ul><h4 id="x（行号）"><a href="#x（行号）" class="headerlink" title="x（行号）"></a>x（行号）</h4><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'10p'</span> passwd</span><br></pre></td></tr></table></figure><p>如何确认是不是第十行呢？<br>可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'10p'</span></span><br></pre></td></tr></table></figure><h4 id="pattern-（正则）"><a href="#pattern-（正则）" class="headerlink" title="/pattern/（正则）"></a>/pattern/（正则）</h4><p>如何打印包含特定字符有关的行呢？<br>比如你想在passwd文件中找到有<code>root</code>的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/root/p'</span> passwd</span><br></pre></td></tr></table></figure><h3 id="定位n行："><a href="#定位n行：" class="headerlink" title="定位n行："></a>定位n行：</h3><ul><li>x,y（行号）</li><li>/pattern/,/root/</li><li>x,y!（取反）</li><li>first~step（first表示从第几行开始，step表示间隔几行输出）</li></ul><h4 id="x-y（行号）"><a href="#x-y（行号）" class="headerlink" title="x,y（行号）"></a>x,y（行号）</h4><p>假如你想打印<code>第10-20行</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'10,20p'</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10  operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">11  games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">12  ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">13  nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">14  systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">15  dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">16  polkitd:x:999:997:User for polkitd:/:/sbin/nologin</span><br><span class="line">17  abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">18  tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">19  postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">20  chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br></pre></td></tr></table></figure><h4 id="pattern-root"><a href="#pattern-root" class="headerlink" title="/pattern/,/root/"></a>/pattern/,/root/</h4><p>如果想要通过<code>正则表达式</code>的方式输出<code>第10-20行</code><br>可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'/operator/,/chrony/p'</span></span><br></pre></td></tr></table></figure><p>你会发现，结果跟上面的命令结果一样<br>OK</p><h4 id="x-y-（取反）"><a href="#x-y-（取反）" class="headerlink" title="x,y!（取反）"></a>x,y!（取反）</h4><p>其实也可以通过<code>取反</code>的方式输出行</p><p>比如你不想输出第十行<br>可以这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'10!p'</span></span><br></pre></td></tr></table></figure><p>或者说你不想输出第10-20行<br>可以这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'10,20!p'</span></span><br></pre></td></tr></table></figure><h4 id="first-step"><a href="#first-step" class="headerlink" title="first~step"></a>first~step</h4><p>间隔指定行数进行输出<br>比如从第一行开始每隔一行进行输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'1~2p'</span></span><br></pre></td></tr></table></figure><h2 id="练习（1）"><a href="#练习（1）" class="headerlink" title="练习（1）"></a>练习（1）</h2><h3 id="案例一：增加文件内容"><a href="#案例一：增加文件内容" class="headerlink" title="案例一：增加文件内容"></a>案例一：增加文件内容</h3><p>在qq.txt文件中加入相应文本：<br>Port 52113<br>PermitRootLogin no<br>PermitEmptyPasswords no</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'$a port52113 \npermitrootlogin no'</span> qq.txt</span><br></pre></td></tr></table></figure><p>假如说加入的这两行没有跟文本<code>对齐</code><br>可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'$a \    port52113 \n    permitrootlogin no'</span> qq.txt</span><br></pre></td></tr></table></figure><p>这样就在两行的前面各加上了四个空格<br>其中<code>$a</code>后面的<code>\</code>是转义字符，是为了与语句的空格区别开,<code>\n</code>表示换行</p><h3 id="案例二：文本处理"><a href="#案例二：文本处理" class="headerlink" title="案例二：文本处理"></a>案例二：文本处理</h3><p>删除文本中的<code>空行</code></p><p>在qq.txt文件中随便加上几个空行，保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'/^$/d'</span> qq.txt</span><br></pre></td></tr></table></figure><h3 id="案例三：服务器日志处理"><a href="#案例三：服务器日志处理" class="headerlink" title="案例三：服务器日志处理"></a>案例三：服务器日志处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/yum.log</span><br></pre></td></tr></table></figure><p>找出install信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/install/p'</span> /var/<span class="built_in">log</span>/yum.log</span><br></pre></td></tr></table></figure><h3 id="案例四：数据筛选"><a href="#案例四：数据筛选" class="headerlink" title="案例四：数据筛选"></a>案例四：数据筛选</h3><p>获取网卡的ip信息</p><p>首先看一下网卡的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.43.254  netmask 255.255.255.0  broadcast 192.168.43.255</span><br><span class="line">        inet6 2409:8910:608:bee0:43c2:af5d:e823:ff1b  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::d127:5715:bfe1:fad8  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:d2:af:1d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 564525  bytes 625035188 (596.0 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 280887  bytes 24583679 (23.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 44  bytes 3964 (3.8 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 44  bytes 3964 (3.8 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>然后利用替换把不需要的部分替换为空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 | sed -n <span class="string">'/inet /p'</span> | sed <span class="string">'s/inet //'</span> | sed <span class="string">'s/ net.*//'</span></span><br></pre></td></tr></table></figure><h2 id="高级操作命令"><a href="#高级操作命令" class="headerlink" title="高级操作命令"></a>高级操作命令</h2><ul><li>{} : 允许同时使用多个sed命令，用<code>;</code>分隔</li><li>n : 读取下一个输入行（用下一个命令处理）</li><li>&amp; : 具体作用看示例</li><li>() : 与替换操作结合使用效果更佳呦</li><li>r : 复制指定文件插入到匹配行</li><li>w : 复制匹配行拷贝指定文件里</li><li>q : 退出sed</li></ul><h3 id><a href="#" class="headerlink" title="{}"></a>{}</h3><p>将第10-20行删除并且把所有<code>nologin</code>替换为<code>login</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'&#123;10,20d;s/nologin/login/g&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="n"><a href="#n" class="headerlink" title="n"></a>n</h3><p>其实<code>n</code>的用处跟first~step类似，只不过比它高级（装逼）😏</p><p>示例：</p><p>输出偶数行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'&#123;n;p&#125;'</span></span><br><span class="line">nl passwd | sed -n <span class="string">'2~2p'</span></span><br></pre></td></tr></table></figure><p>输出奇数行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'&#123;p;n&#125;'</span></span><br><span class="line">nl passwd | sed -n <span class="string">'1~2p'</span></span><br></pre></td></tr></table></figure><p>按照1，4，7，10进行输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'&#123;p;n;n&#125;'</span></span><br><span class="line">nl passwd | sed -n <span class="string">'1~3p'</span></span><br></pre></td></tr></table></figure><p>按照3，6，9，12进行输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'n;n;p'</span></span><br><span class="line">nl passwd | sed -n <span class="string">'3~3p'</span></span><br></pre></td></tr></table></figure><p>按照2，5，8，11进行输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed -n <span class="string">'n;p;n'</span></span><br><span class="line">nl passwd | sed -n <span class="string">'2~3p'</span></span><br></pre></td></tr></table></figure><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>将passwd文件中的用户名称后面加上一些空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'s/[a-zA-Z_-]\+/&amp;      /'</span></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1  root      :x:0:0:root:/root:/bin/bash</span><br><span class="line">     2  bin      :x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">     3  daemon      :x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">     4  adm      :x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">     5  lp      :x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6  sync      :x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">     7  shutdown      :x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8  halt      :x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9  mail      :x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10  operator      :x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    11  games      :x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">    12  ftp      :x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">    13  nobody      :x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">    14  systemd-network      :x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">    15  dbus      :x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">    16  polkitd      :x:999:997:User for polkitd:/:/sbin/nologin</span><br><span class="line">    17  abrt      :x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">    18  tss      :x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">    19  postfix      :x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">    20  chrony      :x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">    21  sshd      :x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">    22  mysql      :x:27:27:MySQL Server:/var/lib/mysql:/bin/bash</span><br></pre></td></tr></table></figure><p>案例一：大小写转换</p><p>将用户名的首字母转换为大写/小写</p><p><code>知识点</code>：<br>元字符\u\I\U\L : 转换为大写/小写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'s/[a-z_-]\+/\u&amp;/'</span> passwd</span><br></pre></td></tr></table></figure><p>案例二：大小写转换</p><p>将文件夹下的<code>.txt</code>文件名转换为大写</p><p>首先看一下我的当前目录下有什么.txt文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qq.txt  test.txt</span><br></pre></td></tr></table></figure><p>那么接下来进行操作吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt | sed <span class="string">'s/\w\+/\U&amp;/'</span></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QQ.txt</span><br><span class="line">TEST.txt</span><br></pre></td></tr></table></figure><p>也许你会奇怪为什么后面的txt没有被大写<br>其实是因为<code>\w</code>并不包括<code>.</code>，所以后面的内容便不再进行替换</p><h3 id="-1"><a href="#-1" class="headerlink" title="()"></a>()</h3><p>与练习（1）中的案例四一样，获取网卡的ip<br>只不过方式有一些不同<br>究竟不同在哪里<br>请看例子(其实是我也迷迷糊糊，说不明白)…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 | sed -n <span class="string">'/inet /p'</span> | sed <span class="string">'s/inet \([0-9.]\+\).*$/\1/'</span></span><br></pre></td></tr></table></figure><p>大概来说一下吧，我的理解是被<code>()</code>括起来的部分会被保留，其余的会被替换为空白<br>此处只有一对<code>()</code>，所以后面要替换的位置只有一个<code>\1</code><br>假如命令中有两处被括号括起来，也就是说<br>有两个地方想要被保留下来，那么后面要替换的位置就要这样写<code>\1\2</code><br>究竟如何，我也不知道，先这样吧。</p><p>看一个案例吧…</p><p>案例：获取passwd文件信息</p><p>获取用户的名字，id，和组id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'s/^\([a-z_-]\+\):x:\([0-9]\+\):\([0-9]\+\).*$/USER:\1 \t ID:\2 \t  UID:\3/'</span> passwd</span><br></pre></td></tr></table></figure><h3 id="r"><a href="#r" class="headerlink" title="r"></a>r</h3><p>在开始解析<code>r</code>的使用方法之前，首先创建两个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">'3253152514\n12425352\n124135532355'</span> &gt; 123.txt</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'sdafaefasf\nfsafsffef\nsffdaawwa'</span> &gt; abc.txt</span><br></pre></td></tr></table></figure><p>目标：将<code>123.txt</code>中的内容放入到<code>abc.txt</code>的内容的第一行后进行输出（不会改变原文件的内容）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1r 123.txt'</span> abc.txt</span><br></pre></td></tr></table></figure><h3 id="w"><a href="#w" class="headerlink" title="w"></a>w</h3><p>目标1：将abc.txt中的第一行文件改写到123.txt文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'1w 123.txt'</span> abc.txt</span><br></pre></td></tr></table></figure><p>目标2:将<code>abc.txt</code>中的全部内容文件改写到<code>123.txt</code>文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">'w 123.txt'</span> abc.txt</span><br></pre></td></tr></table></figure><p>你有没有发现<code>w</code>的写入操作是将被改写的文件内容全部覆盖？</p><h3 id="q"><a href="#q" class="headerlink" title="q"></a>q</h3><p>目标：passwd文件中找到第一个nologin就停止输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl passwd | sed <span class="string">'/nologin/q'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux - top命令详解</title>
      <link href="/2021/10/31/Linux-top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/10/31/Linux-top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="top命令介绍"><a href="#top命令介绍" class="headerlink" title="top命令介绍"></a>top命令介绍</h1><p>top 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于 Windows 的任务管理器。</p><p>  top用于动态监控进程所占系统资源，每隔3秒变一次。这个命令的特点是把占用系统资源（CPU，内存，磁盘IO等）最高的进程放到最前面。top命令打印出了很多信息，包括系统负载（loadaverage）、进程数（Tasks）、cpu使用情况、内存使用情况以及交换分区使用情况。</p><h1 id="命令内容详解"><a href="#命令内容详解" class="headerlink" title="命令内容详解"></a>命令内容详解</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn76ulxzedj31bm0tme3q.jpg" alt="image-20210131211557441"></p><p><strong>第一行</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top - 04:25:26  当前系统时间</span><br><span class="line">up 3 min,       系统已经运行的时间（不间歇的运行）</span><br><span class="line">1 user,         当前登录系统的用户数</span><br><span class="line">load average: 0.01, 0.03, 0.00   平均负载，三个数分别表示1分钟、5分钟、15分钟的平均负载数</span><br></pre></td></tr></table></figure><p>load average 表示时间段内活动的进程数，这些值越大就说明你的服务器压力越大。一般情况下这个值只要不超过服务器的cpu数量就没有关系。如果长时间超出了cpu数量那就要关注一下了。</p><p><strong>第二行</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tasks:   任务</span><br><span class="line">97 total,   共有进程数</span><br><span class="line">1 running,  正在运行的进程数</span><br><span class="line">96 sleeping,   休眠状态下的进程数</span><br><span class="line">0 stopped,     停止状态的进程数</span><br><span class="line">0 zombie       僵尸进程数</span><br></pre></td></tr></table></figure><p><strong>第三行</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cpu(s):  cpu状态</span><br><span class="line">0.0%us,   用户占用的cpu时间百分比</span><br><span class="line">0.0%sy,   系统占用的cpu时间百分比</span><br><span class="line">0.0%ni,   改变优先级的进程占用cpu时间百分比</span><br><span class="line">99.8%id,  cpu处于空闲状态的时间百分比</span><br><span class="line">0.0%wa,   I/O等待所占用的cpu时间百分比</span><br><span class="line">0.2%hi,   硬中断（Hardware IRQ）占用CPU的百分比</span><br><span class="line">0.0%si,   软中断（Software Interrupts）占用CPU的百分比</span><br><span class="line">0.0%st    被偷走的cpu所占百分比（一般都为0，不用关注）</span><br></pre></td></tr></table></figure><p><strong>第四行:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mem:     内存状态</span><br><span class="line">1030416k total,  物理内存总量  </span><br><span class="line">79928k used,     被使用的内存</span><br><span class="line">950488k free,    空闲的内存</span><br><span class="line">10308k buffers   缓冲大小（即将写入磁盘的）</span><br></pre></td></tr></table></figure><p><strong>第五行</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Swap:     交换分区</span><br><span class="line">2047996k total,   交换区总量     </span><br><span class="line">0k used,          使用的大小</span><br><span class="line">2047996k free,    空闲的大小</span><br><span class="line">36296k cached     缓存大小（从磁盘中读取的）</span><br></pre></td></tr></table></figure><p><strong>第六行</strong>(空)</p><p><strong>第七行</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PID       进程id</span><br><span class="line">USER      进程所属的用户</span><br><span class="line">PR        进程优先级</span><br><span class="line">NI        进程优先值（nice值）</span><br><span class="line">VIRT      进程使用的虚拟内存总量，单位为kb</span><br><span class="line">RES       进程使用的、未被换出的物理内存大小，单位kb</span><br><span class="line">SHR       共享内存</span><br><span class="line">S         进程状态</span><br><span class="line">%CPU      上次更新到现在的CPU时间占用百分比</span><br><span class="line">%MEM      进程使用的物理内存百分比</span><br><span class="line">TIME+     进程使用的CPU时间总计，单位1/100秒</span><br><span class="line">COMMAND   进程名称（命令名/命令行）</span><br></pre></td></tr></table></figure><p>其中，PR为进程的实时优先级（跟内核有关），范围0-99，数字越小优先级越低；</p><p>nice值的范围为 -20-19 ，这个值越小，那么对应的进程优先级越高，在top里，PR-NI=20， 默认启动一个进程，nice是0；</p><p>S进程状态：D=不可中断的睡眠状态  R=运行  S=睡眠  T=跟踪/停止  Z=僵尸进程。</p><blockquote><p>  在日常的运维中关注的较多的项是 ：%CPU, %MEM, COMMAND 这三个，需要多注意。</p></blockquote><p>在top状态下，按键盘数字“<code>1</code>”，可监控每个逻辑CPU的状况：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn77ltkw5pj31bm0aiq6y.jpg" alt="image-20210131214222311"></p><p>在 top 状态下，按 “<strong>shift + m</strong>”, 可以按照内存使用大小排序</p><p><strong>top -bn1</strong> 它表示非动态打印系统资源使用情况，即一次性全部把所有信息输出出来而非动态显示，可以用在shell脚本中<br><strong>top -c</strong> 最右侧的命令可以显示更详细的信息</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn77mb1i52j318s0mq45z.jpg" alt="image-20210131214249097"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记-进阶篇</title>
      <link href="/2021/09/21/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
      <url>/2021/09/21/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gixjk8fk73j30q80g4mxr.jpg" alt="docker" style="zoom:67%;"><a id="more"></a><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p><code>镜像</code>是一种轻量级、可执行的独立软件包，用来<code>打包</code>软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><h2 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h2><ol><li><p>UnionFS（联合文件系统）<br> Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持<code>对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下</code>(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p></li><li><p>特性<br> 一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p></li></ol><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统<code>UnionFS</code>。</p><p><code>bootfs</code>(boot file system)主要包含<code>bootloader</code>和<code>kernel</code>, <code>bootloader</code>主要是引导加载<code>kernel</code>, Linux刚启动时会加载<code>bootfs</code>文件系统，在Docker镜像的最底层是<code>bootfs</code>。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由<code>bootfs</code>转交给内核，此时系统也会卸载<code>bootfs</code>。</p><p><code>rootfs</code> (root file system) ，在<code>bootfs</code>之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。<code>rootfs</code>就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 </p><p>平时我们安装进虚拟机的CentOS都是好几个<code>G</code>，为什么docker这里才200<code>M</code>？🤔🤔🤔</p><p>对于一个精简的OS，<code>rootfs</code> 可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的<code>kernel</code>，自己只需要提供 <code>rootfs</code> 就行了。由此可见对于不同的linux发行版, <code>bootfs</code>基本是一致的, <code>rootfs</code>会有差别, 因此不同的发行版可以<code>公用bootfs</code>。</p><h2 id="分层的镜像"><a href="#分层的镜像" class="headerlink" title="分层的镜像"></a>分层的镜像</h2><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载<br>为什么 Docker 镜像要采用这种分层结构呢?</p><p>最大的一个好处就是 - <code>共享资源</code></p><p>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，<br>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><p>哇塞,好牛笔的设计啊!</p><p>🙂😀😄😁😂🤣…</p><h2 id="镜像特点"><a href="#镜像特点" class="headerlink" title="镜像特点"></a>镜像特点</h2><p>Docker镜像都是<strong>只读</strong>的</p><p>当容器启动时，一个新的<code>可写层</code>被加载到镜像的顶部。<br>这一层通常被称作<code>容器层</code>，<code>容器层</code>之下的都叫<code>镜像层</code>。</p><h2 id="镜像commit操作补充"><a href="#镜像commit操作补充" class="headerlink" title="镜像commit操作补充"></a>镜像commit操作补充</h2><p><code>docker commit</code> 提交容器副本使之成为一个新的镜像</p><p>格式:docker commit -m=“提交的描述信息” -a=“作者” 容器ID(或者容器的名字) 要创建的目标镜像名:[标签名tags]</p><p>案例演示</p><p>从Hub上下载tomcat镜像到本地并成功运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8080:8080 --name=<span class="string">"tomcat_test"</span> tomcat /bin/bash</span><br><span class="line"><span class="comment">#-p 主机端口:docker容器端口</span></span><br><span class="line"><span class="comment">#-P 随机分配端口</span></span><br><span class="line"><span class="comment">#i:交互</span></span><br><span class="line"><span class="comment">#t:终端</span></span><br></pre></td></tr></table></figure><p>故意删除上一步镜像生产tomcat容器的文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入tomcat运行容器中</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat_test /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前目录下的所有文件</span></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除docs文档</span></span><br><span class="line">rm -rf docs</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>也即当前的tomcat运行实例是一个没有文档内容的容器，</p><p>以它为模板commit一个没有doc的tomcat新镜像del_docs_tomcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a=<span class="string">"shang-code"</span> -m=<span class="string">"delete docs tomcat"</span> tomcat_test del_docs_tomcat:1.2</span><br></pre></td></tr></table></figure><p>启动我们的新镜像并和原来的对比</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8888:8080 del_docs_tomcat /bin/bash</span><br></pre></td></tr></table></figure><p>在本地浏览器中输入当前机器的ip:端口号</p><p>新的del_docs_tomcat，它没有docs<br>原来的tomcat，它有docs</p><h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><p>直接命令添加</p><p>格式: docker run -it -v /宿主机目录:/容器内目录 镜像名</p><p>例子: docker run -it -v /宿主机目录:/容器内目录 centos /bin/bash</p><p>查看数据卷是否挂载成功: docker inspect 容器ID</p><p>容器和宿主机之间数据共享<br>容器停止退出后，主机修改映射的目录中的内容后,再次开启该容器,对应的目录也会发生变化<br>两者之间是同步的</p><p><strong>命令(带权限)</strong><br>docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</p><ul><li>ro: read only(只读模式)</li></ul><p>意思就是说,容器只能读取本地的映射目录,而不能修改它了</p><p>感兴趣的童鞋自己尝试一下吧,挺有意思的୧(๑•̀◡•́๑)૭</p><h1 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h1><p>共享同一个或几个卷目录</p><h2 id="数据卷容器是什么"><a href="#数据卷容器是什么" class="headerlink" title="数据卷容器是什么"></a>数据卷容器是什么</h2><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器</p><p>容器间传递共享(–volumes-from)</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol><li>利用 Dockerfile 新建一个镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.1 新建一个目录</span></span><br><span class="line">mkdir centos</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.2 切换到该目录内</span></span><br><span class="line"><span class="built_in">cd</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.3 编写一个Dockerfile文件</span></span><br><span class="line">vim Dockerfile</span><br><span class="line">    FROM centos</span><br><span class="line">    VOLUME [<span class="string">"dataVolumeContainer1"</span>,<span class="string">"dataVolumeContainer2"</span>]</span><br><span class="line">    CMD <span class="built_in">echo</span> <span class="string">"--------------success---------------"</span></span><br><span class="line">    CMD [<span class="string">"/bin/bash"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.4 建立build镜像</span></span><br><span class="line">docker build -t centos_volume .</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.5 运行这个新建的镜像</span></span><br><span class="line"><span class="comment">#按下 ctrl+q+p不停止容器退出</span></span><br><span class="line">docker run -it --name=centos_volume centos_volume</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><ol start="2"><li>利用 –volimes-from 随便运行两个容器,都继承上面👆这个容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#都是按下 ctrl+q+p不停止容器退出</span></span><br><span class="line">docker run -it --name=centos_volume1 --volumes-from=centos_volume centos_volume</span><br><span class="line"></span><br><span class="line">docker run -it --name=centos_volume2 --volumes-from=centos_volume centos_volume</span><br></pre></td></tr></table></figure><ol start="3"><li>查看三个容器是否都在运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ol start="4"><li><p>freeStyle</p><p> 随便(增/删/改)哪一个容器中dataVolumeContainer目录里面的内容,你会发现目录中的内容都是随时同步的,而且并不会因为某一个容器的删除或停止而产生数据丢失</p></li></ol><p>结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记-基础篇</title>
      <link href="/2021/09/21/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2021/09/21/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gixjk8fk73j30q80g4mxr.jpg" alt="docker" style="zoom: 67%;"><a id="more"></a><h1 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h1><h2 id="为什么会有docker出现"><a href="#为什么会有docker出现" class="headerlink" title="为什么会有docker出现"></a>为什么会有docker出现</h2><p>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验<br>Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。<br>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</p><p> 之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说吧，Java/Tomcat/MySQL/JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p><p>传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。Docker镜像的设计，使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</p><h2 id="docker理念"><a href="#docker理念" class="headerlink" title="docker理念"></a>docker理念</h2><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。<br>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作</p><p><strong>总结:</strong><br><code>解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</code></p><h1 id="docker能干什么"><a href="#docker能干什么" class="headerlink" title="docker能干什么"></a>docker能干什么</h1><h2 id="以前的虚拟化技术"><a href="#以前的虚拟化技术" class="headerlink" title="以前的虚拟化技术"></a>以前的虚拟化技术</h2><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p><p>它可以在一种操作系统里面运行另一种操作系统，比如在Windows 系统里面运行Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。  </p><p><strong>虚拟机的缺点：</strong></p><ul><li>资源占用多              </li><li>冗余步骤多                 </li><li>启动慢</li></ul><h2 id="容器虚拟化技术"><a href="#容器虚拟化技术" class="headerlink" title="容器虚拟化技术"></a>容器虚拟化技术</h2><p>由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<br>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。<br>比较了 Docker 和传统虚拟化方式的不同之处：</p><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li><li>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li></ul><h2 id="开发-运维（DevOps）"><a href="#开发-运维（DevOps）" class="headerlink" title="开发/运维（DevOps）"></a>开发/运维（DevOps）</h2><p>一次构建、随处运行</p><ol><li><p>更快速的应用交付和部署:<br>传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</p></li><li><p>更便捷的升级和扩缩容:<br>随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</p></li><li><p>更简单的系统运维:<br>应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</p></li><li><p>更高效的计算资源利用:<br>Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</p></li></ol><h1 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h1><ol><li><p>镜像（image）<br> Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。</p></li><li><p>容器（container）<br> Docker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。</p><p> 它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p><p> 可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。<br> 容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p></li><li><p>仓库（repository）<br> 仓库（Repository）是集中存放镜像文件的场所。<br> 仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p> 仓库分为公开仓库（Public）和私有仓库（Private）两种形式。<br> 最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/)，" target="_blank" rel="noopener">https://hub.docker.com/)，</a><br> 存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云 等</p></li></ol><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>需要正确的理解仓储/镜像/容器这几个概念:</p><p>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><ul><li><p>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</p></li><li><p>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</p></li><li><p>至于仓储，就是放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以了。</p></li></ul><h1 id="CentOS7安装Docker"><a href="#CentOS7安装Docker" class="headerlink" title="CentOS7安装Docker"></a>CentOS7安装Docker</h1><p>官方文档:<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>安装步骤:</p><h2 id="确定你是CentOS7及以上版本"><a href="#确定你是CentOS7及以上版本" class="headerlink" title="确定你是CentOS7及以上版本"></a>确定你是CentOS7及以上版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure><h2 id="卸载旧版本-没有安装过的童鞋请跳过此步骤"><a href="#卸载旧版本-没有安装过的童鞋请跳过此步骤" class="headerlink" title="卸载旧版本(没有安装过的童鞋请跳过此步骤)"></a>卸载旧版本(没有安装过的童鞋请跳过此步骤)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h2 id="必要设置"><a href="#必要设置" class="headerlink" title="必要设置"></a>必要设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager --<span class="built_in">disable</span> docker-ce-nightly</span><br></pre></td></tr></table></figure><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>静静等待一段时间…</p><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="查看docker"><a href="#查看docker" class="headerlink" title="查看docker"></a>查看docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="设置镜像加速"><a href="#设置镜像加速" class="headerlink" title="设置镜像加速"></a>设置镜像加速</h2><p>阿里云网址:<a href="https://www.aliyun.com" target="_blank" rel="noopener">https://www.aliyun.com</a></p><p>使用支付宝或者淘宝扫码登录后,在搜索栏中搜索<code>镜像服务</code>,即可列出参考选项<code>容器镜像服务</code>,点击进去,点击<code>管理控制台</code></p><p>在左边一栏的最下边点击<code>镜像加速器</code>,找到<code>centos</code>,复制里面的所有命令,粘贴到终端运行即可</p><p><img src="/images/aliyun_jiasu.png" alt="aliyun_image_speed"></p><h2 id="运行hello-world"><a href="#运行hello-world" class="headerlink" title="运行hello-world"></a>运行hello-world</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><ol><li><p>Docker是怎么工作的<br> Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p></li><li><p>为什么Docker比较比VM快<br> (1)docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p> (2)docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</p></li></ol><h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出本地主机上的镜像</span></span><br><span class="line"><span class="comment">#格式:docker images [OPTIONS]</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p>各个选项说明:<br>REPOSITORY：表示镜像的仓库源TAG：镜像的标签IMAGE ID：镜像IDCREATED：镜像创建时间SIZE：镜像大小 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。<br>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</p><p>OPTIONS说明：</p><ul><li>-a :列出本地所有的镜像（含中间映像层）</li><li>-q :只显示镜像ID。</li><li>–digests :显示镜像的摘要信息</li><li>–no-trunc :显示完整的镜像信息</li></ul><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从官网仓库中搜索镜像</span></span><br><span class="line"><span class="comment">#格式:docker search [OPTIONS] 镜像名字</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">docker search centos</span><br></pre></td></tr></table></figure><p>网站:<a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p><p>OPTIONS说明：</p><ul><li>–no-trunc : 显示完整的镜像描述</li><li>-s : 列出收藏数不小于指定值的镜像。</li><li>–automated : 只列出 automated build类型的镜像；</li></ul><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像到本地</span></span><br><span class="line"><span class="comment">#格式:docker pull 镜像名称</span></span><br><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式:docker rmi 某个XXX镜像名字ID</span></span><br><span class="line"><span class="comment">#删除镜像:</span></span><br><span class="line"><span class="comment">#删除单个</span></span><br><span class="line">    docker rmi  -f 镜像ID</span><br><span class="line"><span class="comment">#删除多个</span></span><br><span class="line">    docker rmi -f 镜像名1:TAG 镜像名2:TAG </span><br><span class="line"><span class="comment">#删除全部</span></span><br><span class="line">    docker rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure><h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><p>有镜像才能创建容器，这是根本前提(下载一个CentOS镜像演示)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h2 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h2><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>OPTIONS说明（常用）：<br>有些是一个减号，有些是两个减号</p><ul><li>–name=”容器新名字”: 为容器指定一个名称；</li><li>-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</li><li>-i：以交互模式运行容器，通常与 -t 同时使用；</li><li>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li>-P: 随机端口映射；</li><li>-p: 指定端口映射，有以下四种格式<br>  ip:hostPort:containerPort<br>  ip::containerPort<br>  hostPort:containerPort<br>  containerPort</li></ul><h2 id="启动交互式容器"><a href="#启动交互式容器" class="headerlink" title="启动交互式容器"></a>启动交互式容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</span></span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><h2 id="列出当前所有正在运行的容器"><a href="#列出当前所有正在运行的容器" class="headerlink" title="列出当前所有正在运行的容器"></a>列出当前所有正在运行的容器</h2><p>docker ps [OPTIONS]</p><p>OPTIONS说明（常用）：</p><ul><li>-a :列出当前所有正在运行的容器+历史上运行过的</li><li>-l :显示最近创建的容器。</li><li>-n：显示最近n个创建的容器。</li><li>-q :静默模式，只显示容器编号。</li><li>–no-trunc :不截断输出。</li></ul><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><p>两种退出方式</p><ol><li>exit<br> 容器停止退出</li><li>ctrl+P+Q<br> 容器不停止退出</li></ol><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID或者容器名</span><br></pre></td></tr></table></figure><h2 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器ID或者容器名</span><br></pre></td></tr></table></figure><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID或者容器名</span><br></pre></td></tr></table></figure><h2 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> 容器ID或者容器名</span><br></pre></td></tr></table></figure><h2 id="删除已停止的容器"><a href="#删除已停止的容器" class="headerlink" title="删除已停止的容器"></a>删除已停止的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID</span><br><span class="line"><span class="comment">#一次性删除多个容器:</span></span><br><span class="line">docker rm $(docker ps -a -q) <span class="comment">#删除停止的容器</span></span><br><span class="line">docker rm -f $(docker ps -a -q) <span class="comment">#删除所有的容器(强力删除)</span></span><br><span class="line">docker ps -a -q | xargs docker rm</span><br></pre></td></tr></table></figure><h2 id="启动守护式容器"><a href="#启动守护式容器" class="headerlink" title="启动守护式容器"></a>启动守护式容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式docker run -d 容器名</span></span><br><span class="line"><span class="comment">#使用镜像centos:latest以后台模式启动一个容器</span></span><br><span class="line">docker run -d centos</span><br></pre></td></tr></table></figure><p>问题：<br>docker ps -a 进行查看, 会发现容器刚刚运行的容器已经退出<br>why?<br>很重要的要说明的一点: <code>Docker容器后台运行,就必须有一个前台进程</code><br>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p><p>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。</p><p>解决办法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos /bin/bash -c <span class="string">"while true;do echo hello docker;sleep 2;done"</span></span><br></pre></td></tr></table></figure><h2 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式:docker logs [OPTIONS] 容器ID</span></span><br><span class="line">docker logs -f -t --tail dsf24dsdf242</span><br></pre></td></tr></table></figure><p>OPTIONS选项:</p><ul><li>-t 是加入时间戳</li><li>-f 跟随最新的日志打印</li><li>–tail 数字 显示最后多少条</li></ul><h2 id="查看容器内运行的进程"><a href="#查看容器内运行的进程" class="headerlink" title="查看容器内运行的进程"></a>查看容器内运行的进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID</span><br></pre></td></tr></table></figure><h2 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure><h2 id="进入正在运行的容器并以命令行交互"><a href="#进入正在运行的容器并以命令行交互" class="headerlink" title="进入正在运行的容器并以命令行交互"></a>进入正在运行的容器并以命令行交互</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器ID bashShell</span><br></pre></td></tr></table></figure><p>重新进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 容器ID</span><br></pre></td></tr></table></figure><p><strong>上述两个区别:</strong></p><ul><li>attach 直接进入容器启动命令的终端，不会启动新的进程</li><li>exec 是在容器中打开新的终端，并且可以启动新的进程</li></ul><h2 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  容器ID:容器内路径 目的主机路径</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff      Inspect changes on a container&apos;s filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix部署与使用记录</title>
      <link href="/2021/01/18/zabbix%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/01/18/zabbix%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms59b018pj30p00dw3z6.jpg" alt="zabbix"></p><a id="more"></a><h1 id="Zabbix-介绍"><a href="#Zabbix-介绍" class="headerlink" title="Zabbix 介绍"></a>Zabbix 介绍</h1><p>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</p><p><strong>Zabbix 是一个企业级分布式开源监控解决方案。</strong></p><p>Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</p><p>Zabbix 支持主动轮询（polling）和被动捕获（trapping）。Zabbix所有的报表、统计数据和配置参数都可以通过基于 Web 的前端页面进行访问。基于 Web 的前端页面确保您可以在任何地方访问您监控的网络状态和服务器健康状况。适当的配置后，Zabbix 可以在监控 IT 基础设施方面发挥重要作用。无论是对于有少量服务器的小型组织，还是拥有大量服务器的大企业而言，同样适用。</p><p>Zabbix 是免费的。Zabbix 是根据 GPL 通用公共许可证的第二版编写和发布的。这意味着产品源代码是免费发布的，可供公共使用。</p><h2 id="Zabbix-功能"><a href="#Zabbix-功能" class="headerlink" title="Zabbix 功能"></a>Zabbix 功能</h2><p>Zabbix 是一个高度成熟完善的网络监控解决方案，一个的软件包中包含了多种功能。</p><h3 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h3><ul><li>可用性和性能检查；</li><li>支持 SNMP（包括主动轮询和被动捕获）、IPMI、JMX、VMware 监控；</li><li>自定义检查；</li><li>按照自定义的时间间隔采集需要的数据；</li><li>通过 Server/Proxy 和 Agents 来执行数据采集。</li></ul><h3 id="灵活的阈值定义"><a href="#灵活的阈值定义" class="headerlink" title="灵活的阈值定义"></a>灵活的阈值定义</h3><ul><li><p>您可以参考后端数据库定义非常灵活的告警阈值，即触发器高度可配置化的告警</p></li><li><p>可以根据递增计划、接收者、媒介类型自定义发送告警通知；</p></li><li><p>使用宏变量可以使告警通知变得更加高效有用；</p></li><li><p>自动操作包含远程执行命令。</p></li></ul><h3 id="实施图形"><a href="#实施图形" class="headerlink" title="实施图形"></a>实施图形</h3><ul><li>使用内置图形功能可以将监控项实时绘制成图形。</li></ul><h3 id="Web-监控功能"><a href="#Web-监控功能" class="headerlink" title="Web 监控功能"></a>Web 监控功能</h3><ul><li>Zabbix可以追踪模拟鼠标在 Web 网站上的点击操作，来检查 Web 网站的功能和响应时间。</li></ul><h3 id="丰富的可视化选项"><a href="#丰富的可视化选项" class="headerlink" title="丰富的可视化选项"></a>丰富的可视化选项</h3><ul><li>可以组合多个监控项到单个视图中，创建自定义图表；</li><li>网络拓扑图；</li><li>以仪表盘样式展示自定义聚合图形和幻灯片演示；</li><li>报表；</li><li>监控资源的更高层次展示视图（业务视图）。</li></ul><h3 id="历史数据存储"><a href="#历史数据存储" class="headerlink" title="历史数据存储"></a>历史数据存储</h3><ul><li>存储在数据库中的数据；</li><li>历史配置；</li><li>内置数据管理机制（housekeeping）。</li></ul><h3 id="配置简单"><a href="#配置简单" class="headerlink" title="配置简单"></a>配置简单</h3><ul><li>将被监控设备添加为主机；</li><li>主机一旦添加到数据库中，就会采集数据用于监控；</li><li>将模板用于监控设备。</li></ul><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><ul><li>模板中分组检查；</li><li>模板可以关联模板，继承已关联模板的属性。</li></ul><h3 id="网络发现"><a href="#网络发现" class="headerlink" title="网络发现"></a>网络发现</h3><ul><li>自动发现网络设备；</li><li>Zabbix Agent 发现设备后自动注册；</li><li>自动发现文件系统、网络接口和 SNMP OIDs 值。</li></ul><h3 id="快捷的-Web-界面"><a href="#快捷的-Web-界面" class="headerlink" title="快捷的 Web 界面"></a>快捷的 Web 界面</h3><ul><li>基于 PHP 的 Web 前端；</li><li>可以从任何地方访问；</li><li>您可以定制自己的操作方式；</li><li>您可以通过审计日志来查看你的操作。</li></ul><h3 id="Zabbix-API"><a href="#Zabbix-API" class="headerlink" title="Zabbix API"></a>Zabbix API</h3><ul><li>Zabbix API 为 Zabbix 提供可编程接口，用于批量操作、第三方软件集成和其他用途。</li></ul><h3 id="权限管理系统"><a href="#权限管理系统" class="headerlink" title="权限管理系统"></a>权限管理系统</h3><ul><li>安全的用户身份验证；</li><li>指定的用户只能查看指定的权限范围内的视图。</li></ul><h3 id="强大且易于扩展的-Zabbix-Agent"><a href="#强大且易于扩展的-Zabbix-Agent" class="headerlink" title="强大且易于扩展的 Zabbix Agent"></a>强大且易于扩展的 Zabbix Agent</h3><ul><li>部署于被监控对象上；</li><li>支持 Linux 和 Windows ；</li></ul><h3 id="二进制守护进程"><a href="#二进制守护进程" class="headerlink" title="二进制守护进程"></a>二进制守护进程</h3><ul><li>为了更好的性能和更少的内存占用，采用 C 语言编写；</li><li>便于移植。</li></ul><h3 id="适合更复杂的环境"><a href="#适合更复杂的环境" class="headerlink" title="适合更复杂的环境"></a>适合更复杂的环境</h3><ul><li>使用 Zabbix Proxy 代理，可以轻松实现分布式远程监控。</li></ul><h2 id="Zabbix-概述"><a href="#Zabbix-概述" class="headerlink" title="Zabbix 概述"></a><strong>Zabbix 概述</strong></h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a><strong>架构</strong></h3><p>Zabbix 由几个主要的功能组件组成，其功能介绍如下所示。</p><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a><strong>Server</strong></h4><p>Zabbix server 是 Zabbix软件的核心组件，agent 向其报告可用性、系统完整性信息和统计信息。server也是存储所有配置信息、统计信息和操作信息的核心存储库。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h4><p>所有配置信息以及 Zabbix 采集到的数据都被存储在数据库中。</p><h4 id="Web-界面"><a href="#Web-界面" class="headerlink" title="Web 界面"></a><strong>Web 界面</strong></h4><p>为了从任何地方和任何平台轻松访问 Zabbix ，我们提供了基于 web 的界面。该界面是 Zabbix server 的一部分，通常（但不一定）和 Zabbix server 运行在同一台物理机器上。</p><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a><strong>Proxy</strong></h4><p>Zabbix proxy 可以代替 Zabbix server采集性能和可用性数据。Zabbix proxy在Zabbix的部署是可选部分；但是proxy的部署可以很好的分担单个Zabbix server的负载。</p><h4 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a><strong>Agent</strong></h4><p>Zabbix agent 部署在被监控目标上，用于主动监控本地资源和应用程序，并将收集的数据发送给 Zabbix server。</p><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a><strong>数据流</strong></h4><p>另外，回过头来整体的了解下 Zabbix 内部的数据流对Zabbix的使用也很重要。首先，为了创建一个采集数据的监控项，您就必须先创建主机。其次，在任务的另外一端，必须要有监控项才能创建触发器（trigger），必须要有触发器来创建动作（action）。因此，如果您想要收到类似“X个server上CPU负载过高”这样的告警，您必须首先为 <em>Server X</em> 创建一个主机条目，其次创建一个用于监控其 CPU的监控项，最后创建一个触发器，用来触发 CPU负载过高这个动作，并将其发送到您的邮箱里。虽然这些步骤看起来很繁琐，但是使用模板的话，实际操作非常简单。也正是由于这种设计，使得 Zabbix 的配置变得更加灵活易用。</p><h3 id="zabbix名词解释"><a href="#zabbix名词解释" class="headerlink" title="zabbix名词解释"></a><strong>zabbix名词解释</strong></h3><h4 id="主机-host"><a href="#主机-host" class="headerlink" title="主机 (host)"></a><strong>主机 (host)</strong></h4><ul><li>一台你想监控的网络设备，用IP或域名表示</li></ul><h4 id="主机组-host-group"><a href="#主机组-host-group" class="headerlink" title="主机组 (host group)"></a><strong>主机组 (host group)</strong></h4><ul><li>主机的逻辑组；它包含主机和模板。一个主机组里的主机和模板之间并没有任何直接的关联。通常在给不同用户组的主机分配权限时候使用主机组。</li></ul><h4 id="监控项-item"><a href="#监控项-item" class="headerlink" title="监控项 (item)"></a><strong>监控项 (item)</strong></h4><ul><li>你想要接收的主机的特定数据，一个度量数据。</li></ul><h4 id="触发器-trigger"><a href="#触发器-trigger" class="headerlink" title="触发器 (trigger)"></a><strong>触发器 (trigger)</strong></h4><ul><li>一个被用于定义问题阈值和“评估”监控项接收到的数据的逻辑表达式 当接收到的数据高于阈值时，触发器从“OK”变成“Problem”状态。当接收到的数据低于阈值时，触发器保留/返回一个“OK”的状态。</li></ul><h4 id="事件-event"><a href="#事件-event" class="headerlink" title="事件 (event)"></a><strong>事件 (event)</strong></h4><ul><li>单次发生的需要注意的事情，例如触发器状态改变或发现有监控代理自动注册</li></ul><h4 id="异常-problem"><a href="#异常-problem" class="headerlink" title="异常 (problem)"></a><strong>异常 (problem)</strong></h4><ul><li>一个处在“异常”状态的触发器</li></ul><h4 id="动作-action"><a href="#动作-action" class="headerlink" title="动作 (action)"></a><strong>动作 (action)</strong></h4><ul><li>一个对事件做出反应的预定义的操作。 一个动作由操作(例如发出通知)和条件(当时操作正在发生)组成</li></ul><h4 id="升级-escalation"><a href="#升级-escalation" class="headerlink" title="升级 (escalation)"></a><strong>升级 (escalation)</strong></h4><ul><li>一个在动作内执行操作的自定义场景; 发送通知/执行远程命令的序列</li></ul><h4 id="媒介-media"><a href="#媒介-media" class="headerlink" title="媒介(media)"></a>媒介(media)</h4><ul><li>发送告警通知的手段；告警通知的途径</li></ul><h4 id="通知-notification"><a href="#通知-notification" class="headerlink" title="通知 (notification)"></a><strong>通知 (notification)</strong></h4><ul><li>利用已选择的媒体途径把跟事件相关的信息发送给用户</li></ul><h4 id="远程命令-remote-command"><a href="#远程命令-remote-command" class="headerlink" title="远程命令 (remote command)"></a><strong>远程命令 (remote command)</strong></h4><ul><li>一个预定义好的，满足一些条件的情况下，可以在被监控主机上自动执行的命令</li></ul><h4 id="模版-template"><a href="#模版-template" class="headerlink" title="模版 (template)"></a><strong>模版 (template)</strong></h4><ul><li>一组可以被应用到一个或多个主机上的实体（监控项，触发器，图形，聚合图形，应用，LLD，Web场景）的集合 模版的任务就是加快对主机监控任务的实施；也可以使监控任务的批量修改更简单。模版是直接关联到每台单独的主机上。</li></ul><h4 id="应用-application"><a href="#应用-application" class="headerlink" title="应用 (application)"></a><strong>应用 (application)</strong></h4><ul><li>一组监控项组成的逻辑分组</li></ul><h4 id="web-场景-web-scenario"><a href="#web-场景-web-scenario" class="headerlink" title="web 场景 (web scenario)"></a><strong>web 场景 (web scenario)</strong></h4><ul><li>利用一个或多个HTTP请求来检查网站的可用性</li></ul><h4 id="前端-frontend"><a href="#前端-frontend" class="headerlink" title="前端 (frontend)"></a><strong>前端 (frontend)</strong></h4><ul><li>Zabbix提供的web界面</li></ul><h4 id="Zabbix-API-1"><a href="#Zabbix-API-1" class="headerlink" title="Zabbix API"></a><strong>Zabbix API</strong></h4><ul><li>Zabbix API允许你使用JSON RPC协议 <strong>(是一个无状态且轻量级的远程过程调用（RPC）传送协议，其传递内容透过 JSON 为主)</strong> 来创建、更新和获取Zabbix对象（如主机、监控项、图形和其他）信息或者执行任何其他的自定义的任务</li></ul><h4 id="Zabbix-server"><a href="#Zabbix-server" class="headerlink" title="Zabbix server"></a><strong>Zabbix server</strong></h4><ul><li>Zabbix软件实现监控的核心程序，主要功能是与Zabbix proxies和Agents进行交互、触发器计算、发送告警通知；并将数据集中保存等</li></ul><h4 id="Zabbix-agent"><a href="#Zabbix-agent" class="headerlink" title="Zabbix agent"></a><strong>Zabbix agent</strong></h4><ul><li>一个部署在监控对象上的，能够主动监控本地资源和应用的程序 Zabbix agent部署在监控的目标上，主动监测本地的资源和应用(硬件驱动，内存，处理器统计等)。 Zabbix agent收集本地的操作信息并将数据报告给Zabbix server用于进一步处理。一旦出现异常 (比如硬盘空间已满或者有崩溃的服务进程), Zabbix server会主动警告管理员指定机器上的异常。. Zabbix agents 的极端高效缘于它可以利用本地系统调用来完成统计数据的收集。</li></ul><h4 id="被动（passive）和主动（active）检查"><a href="#被动（passive）和主动（active）检查" class="headerlink" title="被动（passive）和主动（active）检查"></a><strong>被动（passive）和主动（active）检查</strong></h4><ul><li>Zabbix agents可以执行被动和主动两种检查方式。 在passive check 模式中agent应答数据请求，Zabbix server（或者proxy）询问agent数据,如CPU 的负载情况，然后Zabbix agent回送结果。 Active checks 处理过程将相对复杂。 Agent必须首先从Zabbix sever索取监控项列表以进行独立处理，然后周期性地发送新的值给server。 执行被动或主动检查是通过选择相应的监测项目类型来配置的。item type. Zabbix agent处理监控项类型有’Zabbix agent’和’Zabbix agent (active)’。</li></ul><h4 id="Zabbix-proxy"><a href="#Zabbix-proxy" class="headerlink" title="Zabbix proxy"></a><strong>Zabbix proxy</strong></h4><ul><li>一个帮助Zabbix Server收集数据，分担Zabbix Server的负载的程序 Zabbix Proxy是一个可以从一个或多个受监控设备收集监控数据，并将信息发送到Zabbix sever的进程，基本上是代表sever工作的。 所有收集的数据都在本地进行缓存，然后传送到proxy所属的Zabbix sever。 部署Proxy是可选的，但是可能非常有益于分散单个Zabbix sever的负载。 如果只有proxy收集数据，sever上的进程就会减少CPU消耗和磁盘I / O负载。 Zabbix proxy是完成远程区域、分支机构、没有本地管理员的网络的集中监控的理想解决方案。 Zabbix proxy需要使用独立的数据库。</li></ul><h1 id="Zabbix的部署"><a href="#Zabbix的部署" class="headerlink" title="Zabbix的部署"></a>Zabbix的部署</h1><p><strong>服务器规划:</strong></p><table><thead><tr><th align="center">IP</th><th align="center">主机名</th></tr></thead><tbody><tr><td align="center">192.168.100.161</td><td align="center">zabbix-server</td></tr><tr><td align="center">192.168.100.163</td><td align="center">zabbix-agent</td></tr></tbody></table><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p><code>在server/agent两台服务器上进行配置</code></p><h4 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "192.168.100.161" zabbix-server &gt;&gt; /etc/hosts</span><br><span class="line">echo "192.168.100.162" zabbix-proxy &gt;&gt; /etc/hosts</span><br><span class="line">echo "192.168.100.163" zabbix-agent &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="配置repo源"><a href="#配置repo源" class="headerlink" title="配置repo源"></a>配置repo源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/yum.repos.d/zabbix.repo&lt;&lt;EOF</span></span><br><span class="line">[zabbix]</span><br><span class="line">name=Zabbix</span><br><span class="line">baseurl=https://mirrors.huaweicloud.com/zabbix/zabbix/4.4/rhel/7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql用于server与proxy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/yum.repos.d/mysql57.repo &lt;&lt;EOF</span></span><br><span class="line">[mysql-5.7-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="清理repo源环境并重新建立"><a href="#清理repo源环境并重新建立" class="headerlink" title="清理repo源环境并重新建立"></a>清理repo源环境并重新建立</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum repolist</span></span><br></pre></td></tr></table></figure><h3 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h3><p><code>在server/proxy/agent上进行配置</code></p><h4 id="安装fping"><a href="#安装fping" class="headerlink" title="安装fping"></a>安装fping</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install epel-release</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install fping</span></span><br></pre></td></tr></table></figure><p><code>在server与proxy上进行配置</code></p><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install mysql-server </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start mysqld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看root账户的默认密码 =&gt; wIu8_wS_nXpf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /var/<span class="built_in">log</span>/mysqld.log | grep password</span></span><br><span class="line">2021-01-18T12:36:00.240888Z 1 [Note] A temporary password is generated for root@localhost: wIu8_wS_nXpf</span><br><span class="line">2021-01-18T12:36:20.507908Z 2 [Note] Access denied for user 'root'@'localhost' (using password: NO)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql并修改默认root账户的密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -pwIu8_wS_nXpf</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'Syz123!@#'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="server端配置"><a href="#server端配置" class="headerlink" title="server端配置"></a>server端配置</h2><h3 id="安装zabbix以及必要环境组件"><a href="#安装zabbix以及必要环境组件" class="headerlink" title="安装zabbix以及必要环境组件"></a>安装zabbix以及必要环境组件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zabbix-server-mysql zabbix-web-mysql   </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install httpd php php-gd php-mysql</span></span><br></pre></td></tr></table></figure><h3 id="数据库授权"><a href="#数据库授权" class="headerlink" title="数据库授权"></a>数据库授权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# mysql -uroot -p'Syz123!@#'</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all on zabbix.* to admin@<span class="string">'%'</span> identified by <span class="string">'Syz123!@#'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all on zabbix.* to admin@<span class="string">'localhost'</span> identified by <span class="string">'Syz123!@#'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">exit</span></span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h3 id="导入zabbix的表"><a href="#导入zabbix的表" class="headerlink" title="导入zabbix的表"></a>导入zabbix的表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/share/doc/zabbix-server-mysql-4.4.10/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zcat create.sql.gz | mysql -uroot -p<span class="string">'Syz123!@#'</span> zabbix</span></span><br></pre></td></tr></table></figure><h3 id="配置zabbix文件"><a href="#配置zabbix文件" class="headerlink" title="配置zabbix文件"></a>配置zabbix文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/zabbix/zabbix_server.conf | grep ^DB</span></span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=admin</span><br><span class="line">DBPassword=Syz123!@#</span><br><span class="line">DBSocket=/var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><h3 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/httpd/conf.d/zabbix.conf</span></span><br><span class="line">php_value date.timezone Asia/shanghai</span><br></pre></td></tr></table></figure><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-server</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart httpd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -anltp | grep zabbix</span></span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      12490/zabbix_server </span><br><span class="line">tcp6       0      0 :::10051                :::*                    LISTEN      12490/zabbix_server</span><br></pre></td></tr></table></figure><p>如果zabbix没有起来,那么查看日志进行问题排查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /var/<span class="built_in">log</span>/zabbix/zabbix_server.log</span></span><br></pre></td></tr></table></figure><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><p><a href="http://192.168.100.161/zabbix" target="_blank" rel="noopener">http://192.168.100.161/zabbix</a></p><p>用户:Admin<br>密码:zabbix</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6pailidj317b0u0gr3.jpg" alt="image-20210118214736111"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6pwsjrmj316a0u0qad.jpg" alt="image-20210118214813798"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6qs4w1bj316s0u0jy6.jpg" alt="image-20210118214904168"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6ve1y9kj31780u0wke.jpg" alt="image-20210118215330123"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6xe6cvcj31760u0n4d.jpg" alt="image-20210118215525393"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6xxe458j316f0u0jx7.jpg" alt="image-20210118215546365"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6zkttfyj316o0u0q79.jpg" alt="image-20210118215731539"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms6zxdy2jj31iw0u0jz5.jpg" alt="image-20210118215751155"></p><h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms71x0nhkj31lw0u0tgq.jpg" alt="image-20210118215945581"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms72tdczcj31ii0u0k7f.jpg" alt="image-20210118220037136"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gms76cfewlj31iy0u0dkv.jpg" alt></p><h2 id="agent端配置"><a href="#agent端配置" class="headerlink" title="agent端配置"></a>agent端配置</h2><p>安装zabbix-agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zabbix-agent</span></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=192.168.100.161</span><br><span class="line">ServerActive=192.168.100.161</span><br><span class="line">Hostname=zabbix-agent</span><br><span class="line">UnsafeUserParameters=1# 是否限制用户自定义keys使用特殊字符</span><br></pre></td></tr></table></figure><p>启动zabbix-agent服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-agent</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -antp | grep zabbix</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      11809/zabbix_agentd </span><br><span class="line">tcp6       0      0 :::10050                :::*                    LISTEN      11809/zabbix_agentd</span><br></pre></td></tr></table></figure><h1 id="Zabbix本地与远程监测"><a href="#Zabbix本地与远程监测" class="headerlink" title="Zabbix本地与远程监测"></a>Zabbix本地与远程监测</h1><h2 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h2><p>在zabbix-server端进行配置</p><p>首先要有字体文件</p><p>链接: <a href="https://pan.baidu.com/s/1nRqCDa9vie1yOR67uVr0iw" target="_blank" rel="noopener">https://pan.baidu.com/s/1nRqCDa9vie1yOR67uVr0iw</a>  密码: pql7</p><p>将字体放在 <code>/usr/share/zabbix/assets/fonts</code> 目录下</p><p>给字体权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod 777 /usr/share/zabbix/assets/fonts/simkai.ttf </span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /usr/share/zabbix/include/defines.inc.php</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zabbix4.2版本之后默认访问根路径为/usr/share/zabbix/，所以字体目录改为了assets/fonts下</span></span><br><span class="line">define('ZBX_FONTPATH',             realpath('assets/fonts'))</span><br><span class="line">define('ZBX_GRAPH_FONT_NAME','simkai');</span><br><span class="line">define('ZBX_FONT_NAME', 'simkai');</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-server</span></span><br></pre></td></tr></table></figure><h2 id="监控-server端-本地服务器"><a href="#监控-server端-本地服务器" class="headerlink" title="监控(server端)本地服务器"></a>监控(server端)本地服务器</h2><p>在zabbix-server端进行配置</p><h3 id="安装配置zabbix-agent"><a href="#安装配置zabbix-agent" class="headerlink" title="安装配置zabbix-agent"></a>安装配置zabbix-agent</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置agent文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=192.168.100.161</span><br><span class="line">ServerActive=192.168.100.161</span><br><span class="line">Hostname=zabbix-server</span><br><span class="line">UnsafeUserParameters=1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-agent</span></span><br></pre></td></tr></table></figure><h3 id="配置zabbix页面"><a href="#配置zabbix页面" class="headerlink" title="配置zabbix页面"></a>配置zabbix页面</h3><p>配置 =&gt; 主机 =&gt; Zabbix Server =&gt; 修改’agent代理程序的接口’为服务器的ip =&gt; 更新</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmu4a8ryncj31j10u0dp4.jpg" alt="image-20210120135504863"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmu4crh4njj31iy0u0agp.jpg" alt="image-20210120135731436"></p><p>点击”更新”</p><p>大约过两分钟后,即可看到下面的效果:</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmu4fm03gij31j70u07do.jpg" alt="image-20210120140016225"></p><h2 id="监测远程服务器"><a href="#监测远程服务器" class="headerlink" title="监测远程服务器"></a>监测远程服务器</h2><p><code>在zabbix-agent上进行配置</code></p><h3 id="安装配置zabbix-agent-1"><a href="#安装配置zabbix-agent-1" class="headerlink" title="安装配置zabbix-agent"></a>安装配置zabbix-agent</h3><p>首先在远程主机上安装 zabbix-agentx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zabbix-agent</span></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=192.168.100.161# server端</span><br><span class="line">ServerActive=192.168.100.161# server端</span><br><span class="line">Hostname=zabbix-agent# agent端</span><br><span class="line">UnsafeUserParameters=1</span><br></pre></td></tr></table></figure><p>重启zabbix-agent服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-agent</span></span><br></pre></td></tr></table></figure><h3 id="配置zabbix页面-1"><a href="#配置zabbix页面-1" class="headerlink" title="配置zabbix页面"></a>配置zabbix页面</h3><p>配置 =&gt; 主机群组 =&gt; 创建主机群组(右上角) =&gt; webservers =&gt; 添加</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmujgeumykj31iy0u015g.jpg" alt="image-20210120224000274"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmujpqs35hj30vc0eqwg0.jpg" alt="image-20210120224857974"></p><p>点击”添加”</p><p>配置 =&gt; 主机 =&gt; 创建主机(右上角) =&gt; 主机名称,群组(webservers),agent代理程序的接口(192.168.100.163) =&gt; 添加</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmujsubpuej31j40u0ajh.jpg" alt="image-20210120225156768"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmukpwhriqj31j40u07ar.jpg" alt="image-20210120232343752"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmul360k3nj31m20owaed.jpg" alt="image-20210120233628212"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmul45d11mj31ni0u0aj7.jpg" alt="image-20210120233726161"></p><p>监测 =&gt; 图形 =&gt; 选择(群组,主机,图形) =&gt; 观察</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmul920kdbj31j10u0n63.jpg" alt="image-20210120234208395"></p><h1 id="Zabbiz自定义item"><a href="#Zabbiz自定义item" class="headerlink" title="Zabbiz自定义item"></a>Zabbiz自定义item</h1><h2 id="删除zabbix-agent"><a href="#删除zabbix-agent" class="headerlink" title="删除zabbix-agent"></a>删除zabbix-agent</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmulk6v8h1j31c40mk42h.jpg" alt="image-20210120235250696"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmulleneo3j31zk0b276y.jpg" alt="image-20210120235400041"></p><h2 id="重新创建zabbix-agent"><a href="#重新创建zabbix-agent" class="headerlink" title="重新创建zabbix-agent"></a>重新创建zabbix-agent</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmuln6zp14j31hm0swwis.jpg" alt="image-20210120235544290"></p><p>直接点击下面的”添加”</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmulnzqw7sj31zo0f4jwx.jpg" alt="image-20210120235630245"></p><h2 id="应用集"><a href="#应用集" class="headerlink" title="应用集"></a>应用集</h2><p>点击”应用集”</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmv9i75rcej32020fggr6.jpg" alt="image-20210121134118650"></p><p>添加应用集 =&gt; web</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmv9jd4sr8j32020i4adw.jpg" alt="image-20210121134225885"></p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmv9jvqn5ej317a0fkwgu.jpg" alt="image-20210121134255904" style="zoom:50%;"><p>点击”添加”</p><h2 id="监控项"><a href="#监控项" class="headerlink" title="监控项"></a>监控项</h2><p>点击’监控项’</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmv9m0vbipj31sb0u0jyo.jpg" alt="image-20210121134458635"></p><p> 添加监控项 =&gt; 名称:agent_net_info_in,键值:net.if.in[ens33],单位:bps,应用集:web</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvrkjthk8j312i0u00z6.jpg" alt="image-20210122000620204"></p><p> 添加监控项 =&gt; 名称:agent_net_info_out,键值:net.if.out[ens33],单位:bps,应用集:web</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvrlg3c3lj30ze0u044u.jpg" alt="image-20210122000712951"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvrlwcrg5j31zm0dmgou.jpg" alt="image-20210122000738639"></p><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>点击’触发器’</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmv9strk1uj31ja0u0gvr.jpg" alt="image-20210121135130685"></p><p> 添加触发器 =&gt; </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmv9ul99lej31lk0u0dnl.jpg" alt="image-20210121135312715"></p><p> 名称:zabbix-agent_cpu_trigger_in<br> 严重性:灾难<br> 问题表现形式:{zabbix-agent:net.if.in[ens33].last()}&gt;=1.5G<br> 恢复表达式:{zabbix-agent:net.if.in[ens33].last()}&lt;1.5G </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmv9zi80smj31j10u07bj.jpg" alt="image-20210121135756863"></p><p> =&gt; 更新</p><p>添加触发器 =&gt;<br> 名称:zabbix-agent_cpu_trigger_out<br> 严重性:灾难<br> 问题表现形式:{zabbix-agent:net.if.out[ens33].last()}&gt;=1G<br> 恢复表达式:{zabbix-agent:net.if.out[ens33].last()}&lt;1G </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmva2sqs4mj31j70u045s.jpg" alt="image-20210121140106372"></p><p> =&gt; 更新</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmva3of2bnj31ja0u012k.jpg" alt="image-20210121140157470"></p><h2 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h2><p>点击’图形’</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmva6s22maj31iy0u0woo.jpg" alt="image-20210121140453065"></p><p> 创建图形 =&gt; </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmva7g8jp8j32020h2gpe.jpg" alt="image-20210121140534747"></p><p> 名称:zabbix-agent_net_graph<br> 监控项-&gt;添加(zabbix-agent_net_info_in,zabbix-agent_net_info_out) </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvta9nds3j319e0u0jxy.jpg" alt></p><p> =&gt; 添加</p><h3 id="观察图形"><a href="#观察图形" class="headerlink" title="观察图形"></a>观察图形</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvtbxlazkj31j70u0qcg.jpg" alt="image-20210122010715146"></p><h1 id="Zabbix的动作和报警"><a href="#Zabbix的动作和报警" class="headerlink" title="Zabbix的动作和报警"></a>Zabbix的动作和报警</h1><blockquote><p>  建立顺序:</p><p>  报警媒介 =&gt; 报警对象 =&gt; 条件(触发器) =&gt; 报警</p></blockquote><h2 id="本地报警"><a href="#本地报警" class="headerlink" title="本地报警"></a>本地报警</h2><h3 id="创建报警媒介类型"><a href="#创建报警媒介类型" class="headerlink" title="创建报警媒介类型"></a>创建报警媒介类型</h3><p>管理 =&gt; 报警媒介类型 =&gt; 创建媒介类型</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvejozuttj31j10u010k.jpg" alt="image-20210121163521764"></p><p> =&gt; 名称:测试媒介,SMTP服务器:localhost,SMTP HELO:localhost,SMTP电邮:<a href="mailto:zabbix@localhost.com" target="_blank" rel="noopener">zabbix@localhost.com</a></p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvrzjhk2wj30xu0u0n22.jpg" alt="image-20210122002041580" style="zoom:50%;"><p>=&gt; 添加</p><h3 id="添加用户群组"><a href="#添加用户群组" class="headerlink" title="添加用户群组"></a>添加用户群组</h3><p>管理 =&gt; 用户群组 =&gt; 创建用户群组 =&gt; 组名:shang</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvetbwjxsj31ty0u0tf1.jpg" alt="image-20210121164500093"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvevsa8bkj32020oedjd.jpg" alt="image-20210121164721210"></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>管理 =&gt; 用户 =&gt; 创建用户 =&gt; 别名,群组,密码 =&gt; 报警媒介 =&gt; 添加 =&gt;<br> 类型:测试媒介<br> 收件人:<a href="mailto:syz@localhost.localdomain" target="_blank" rel="noopener">syz@localhost.localdomain</a><br> =&gt; 权限 =&gt; 用户类型 =&gt; 超级管理员 =&gt; 添加</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvf9nf4osj32020psafm.jpg" alt="image-20210121170041801"></p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvfnva4ezj31020u0tdf.jpg" alt="image-20210121171421512" style="zoom:50%;"><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvt6mszvoj31hb0u0wjz.jpg" alt="image-20210122010210612"></p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvfsuj3gcj31300lc0ve.jpg" alt="image-20210121171859436" style="zoom:50%;"><h3 id="创建动作"><a href="#创建动作" class="headerlink" title="创建动作"></a>创建动作</h3><p>配置 =&gt; 动作 =&gt; 创建动作 </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvfxund5oj32020o40x4.jpg" alt="image-20210121172354616"></p><p>=&gt; 动作 =&gt; 名称,新的触发条件:触发器-&gt;选择-&gt;添加 </p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvgb08hfzj319c0u0796.jpg" alt="image-20210121173635506" style="zoom:50%;"><p>=&gt; 操作 =&gt; 新的:选择用户 </p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvg48co4sj314e0u0jxb.jpg" alt="image-20210121173004327" style="zoom:50%;"><p>=&gt; 恢复操作 =&gt;新的</p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvg65lru5j319k0tqtdy.jpg" alt="image-20210121173152447" style="zoom:50%;"> <p>=&gt; 更新操作 =&gt; 新的 =&gt; 添加</p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvg6zbsdrj318e0sqtdx.jpg" alt="image-20210121173243571" style="zoom:50%;"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在server端进行操作</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> useradd syz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载必要的软件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install wget mailx</span></span><br></pre></td></tr></table></figure><p>手动去触发触发器</p><p>例如,使用如下命令升高网络的流量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-2009.iso</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvtdbie59j31mc0u0thc.jpg" alt="image-20210122010836181"></p><p>查看是否给本地用户 syz 发送了邮件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su - syz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mail</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmvte8qzbjj31g60u0tw3.jpg" alt="image-20210122010929339"></p><h2 id="邮件报警"><a href="#邮件报警" class="headerlink" title="邮件报警"></a>邮件报警</h2><h3 id="配置邮件"><a href="#配置邮件" class="headerlink" title="配置邮件"></a>配置邮件</h3><p>在server端进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/mail.rc</span></span><br><span class="line">set from=syz15822409222@126.com smtp=smtp.126.com</span><br><span class="line">set smtp-auth-user=syz15822409222 smtp-auth-password=MYGVECUQOJSXSLTV</span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure><p>测试邮件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mail -s ceshi syz15822409222@126.com</span></span><br><span class="line">hello world</span><br><span class="line">.</span><br><span class="line">EOT</span><br></pre></td></tr></table></figure><h3 id="配置zabbix"><a href="#配置zabbix" class="headerlink" title="配置zabbix"></a>配置zabbix</h3><h4 id="添加报警媒介"><a href="#添加报警媒介" class="headerlink" title="添加报警媒介"></a>添加报警媒介</h4><p>管理 =&gt; 报警媒介类型 =&gt; 创建媒体类型 =&gt;</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmwixz1ix3j32020fcwha.jpg" alt="image-20210122155320981"></p><p>名称:sendmail<br>类型:脚本<br>脚本名称:sendmail.sh<br>脚本参数:<br>{ALERT.SENDTO}<br>{ALERT.SUBJECT}<br>{ALERT.MESSAGE}</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmwizsk94fj31100u0jvn.jpg" alt="image-20210122155508019"></p><p>=&gt; 添加</p><h3 id="添加用户-1"><a href="#添加用户-1" class="headerlink" title="添加用户"></a>添加用户</h3><p>管理 =&gt; 用户 =&gt; 创建用户 =&gt; 别名,群组,密码 =&gt; 报警媒介 =&gt; 点击添加 =&gt;<br>类型:sendmail<br>收件人:<a href="mailto:syz15822409222@126.com" target="_blank" rel="noopener">syz15822409222@126.com</a><br>=&gt; 添加 =&gt; 权限 =&gt; 用户类型:超级管理员</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmwj5y5f8fj32000osdlm.jpg" alt="image-20210122160103131"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmwj824iqaj310a0u0q7q.jpg" alt="image-20210122160302327"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmwj9mupgej31jn0u00xu.jpg" alt="image-20210122160436707"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmwjazujgkj312g0kwmzq.jpg" alt="image-20210122160553703"></p><h3 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h3><h4 id="创建目录与脚本"><a href="#创建目录与脚本" class="headerlink" title="创建目录与脚本"></a>创建目录与脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/share/zabbix/alertscripts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /usr/share/zabbix/alertscripts/sendmail.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo $1 &gt;&gt; /tmp/text.txt</span><br><span class="line">echo $2 &gt;&gt; /tmp/text.txt</span><br><span class="line">echo $3 &gt;&gt; /tmp/text.txt</span><br><span class="line">messages=`echo $3 | tr '\r\n' '\n'`</span><br><span class="line">subject=`echo $2 | tr '\r\n' '\n'`</span><br><span class="line">echo "$&#123;messages&#125;" | mail -s "$&#123;subject&#125;" $1 &gt;&gt;/tmp/mailx.log 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################################################</span></span></span><br></pre></td></tr></table></figure><h4 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chown -R zabbix.zabbix /usr/share/zabbix/alertscripts/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod a+x /usr/share/zabbix/alertscripts/sendmail.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 777 /tmp/text.txt /tmp/mailx.log</span></span><br></pre></td></tr></table></figure><h4 id="修改zabbix脚本路径"><a href="#修改zabbix脚本路径" class="headerlink" title="修改zabbix脚本路径"></a>修改zabbix脚本路径</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">AlertScriptsPath=/usr/share/zabbix/alertscripts</span><br></pre></td></tr></table></figure><h4 id="重启server服务"><a href="#重启server服务" class="headerlink" title="重启server服务"></a>重启server服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-server</span></span><br></pre></td></tr></table></figure><h4 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/share/zabbix/alertscripts/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./sendmail.sh syz15822409222@126.com 1111 2222</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzal6s4raj311a0e8q4l.jpg" alt="image-20210125012103068"></p><h3 id="添加动作"><a href="#添加动作" class="headerlink" title="添加动作"></a>添加动作</h3><p>配置 =&gt; 动作 =&gt; 创建动作 </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmz9n3zretj32020q6teu.jpg" alt="image-20210125004813971"></p><p>=&gt; 名称:send to mail,条件:自己选触发器即可 </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmz9p13nn1j31ay0u00xl.jpg" alt="image-20210125005006641"></p><p>=&gt; 操作:消息内容-&gt;<br>告警主机:  {HOST.NAME}<br>告警IP:  {HOST.IP}<br>告警时间:  {EVENT.DATE}-{EVENT.TIME}<br>告警等级:  {TRIGGER.SEVERITY}<br>告警信息:  {TRIGGER.NAME}<br>问题详情:  {ITEM.NAME}:{ITEM.VALUE}<br>事件ID:  {EVENT.ID}</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmz9rc1iqkj30xq0u0n3c.jpg" alt="image-20210125005220428"></p><p>新的:发送到用户<br>仅送到 </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzapcov5ej31100u0wii.jpg" alt="image-20210125012503052"></p><p>点击”添加”</p><p>=&gt; 恢复操作 =&gt; 消息内容-&gt;<br>OK告警主机:  {HOST.NAME}<br>OK告警IP:  {HOST.IP}<br>OK告警时间:  {EVENT.DATE}-{EVENT.TIME}<br>OK告警等级:  {TRIGGER.SEVERITY}<br>OK告警信息:  {TRIGGER.NAME}<br>OK问题详情:  {ITEM.NAME}:{ITEM.VALUE}<br>OK事件ID:  {EVENT.ID}<br>新的:通知所有参与者 </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmz9u9mcjpj316g0u0af2.jpg" alt="image-20210125005509699"></p><p>点击”添加”</p><p>=&gt; 添加</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>目前触发器触发的告警无法恢复,所以修改触发器的范围使报警恢复</p><h4 id="恢复报警"><a href="#恢复报警" class="headerlink" title="恢复报警"></a>恢复报警</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmza102zzzj31jl0u07d3.jpg" alt="image-20210125010138908"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmz9yhhv4ej31l80u0ak5.jpg" alt="image-20210125005911788"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmz9yw66wwj31zu0aun0c.jpg" alt="image-20210125005935834"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmza06rnv6j31440u00ye.jpg" alt="image-20210125010048160"></p><p>点击”更新”</p><h4 id="触发报警"><a href="#触发报警" class="headerlink" title="触发报警"></a>触发报警</h4><p>等待报警消失后,再次修改触发器阈值,主动触发告警,具体步骤不再赘述,详情见上面的”恢复报警”步骤</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmza4bzlftj31jl0u0jwg.jpg" alt></p><p>修改后,等待触发报警,等待邮件的发送</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzbaerbdhj310u0i8wju.jpg" alt="image-20210125014517087"></p><h2 id="本地邮件群发"><a href="#本地邮件群发" class="headerlink" title="本地邮件群发"></a>本地邮件群发</h2><blockquote><p>   注意: 一个 zabbix 用户只能对应一个 linux 用户</p></blockquote><p>zabbix用户1 &lt;=&gt; robin<br>zabbix用户2 &lt;=&gt; zorro<br>zabbix用户3 &lt;=&gt; tom<br>zabbix用户4 &lt;=&gt; jerry</p><p>首先解释一下,在配置”动作”中的操作时,需要理解所填数字的含义:</p><p>操作细节:</p><p> 步骤 [ 1 ]-[ 2 ]….等是什么意思</p><p>​    ①    ②</p><p>① =&gt; 指的是第几步,操作的执行顺序<br>② =&gt; 指的是这个步骤持续到所有步骤的第几步(注意,是所有步骤的第一步开始计算,不是从哪一步开始)</p><p>[注意]: ② &gt;= ①</p><p>举个例子</p><p>第一步: robin 1 - 3      &gt;&gt;&gt; 第一步开始执行,邮件发送至第三步<br>第二步: zorro 2 - 2      &gt;&gt;&gt; 第二步开始执行,邮件发送至第二步(因为是从第二步开始,第二步结束,所以等于只发送一次)<br>第三步: tom  3 - 5      &gt;&gt;&gt; 第三步开始执行,邮件发送至第五步<br>第四步: jerry 4 - 5      &gt;&gt;&gt; 第四步开始执行,邮件发送至第五步</p><p>其余略…</p><h1 id="Zabbix模板"><a href="#Zabbix模板" class="headerlink" title="Zabbix模板"></a>Zabbix模板</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzyjv9ze2j31rp0u0wms.jpg" alt="image-20210125151007556"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzyl9o5ymj31760qiq5u.jpg" alt="image-20210125151126353"></p><p>点击”添加”</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzymh56pfj320205ut9q.jpg" alt="image-20210125151237669"></p><p>点击该模板</p><h2 id="添加应用集"><a href="#添加应用集" class="headerlink" title="添加应用集"></a>添加应用集</h2><p>在该模板中创建新的”应用集”</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzyo4bhnbj32020hitch.jpg" alt="image-20210125151408291"></p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzz5lvmbxj314q0ew76k.jpg" alt="image-20210125153103086" style="zoom:50%;"><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzz65wluoj32000jc78d.jpg" alt="image-20210125153133119"></p><h2 id="添加监控项"><a href="#添加监控项" class="headerlink" title="添加监控项"></a>添加监控项</h2><p>在该模板中创建新的”监控项”</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmzz7qspc9j31sr0u0102.jpg" alt="image-20210125153305845"></p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn0069rbl3j30xv0u00ya.jpg" alt="image-20210125160613246" style="zoom:50%;"><p>店家”添加”</p><h2 id="添加触发器"><a href="#添加触发器" class="headerlink" title="添加触发器"></a>添加触发器</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn009yuiptj313v0u0agb.jpg" alt="image-20210125160948926"></p><h2 id="添加图形"><a href="#添加图形" class="headerlink" title="添加图形"></a>添加图形</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn00cbi3lyj316b0u0dlk.jpg" alt="image-20210125161204873"></p><h2 id="应用模板"><a href="#应用模板" class="headerlink" title="应用模板"></a>应用模板</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn00dgbccqj31l20u0gvr.jpg" alt="image-20210125161310939"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn00elbzs2j31c60maq6u.jpg" alt="image-20210125161416091"></p><h1 id="Zabbix的自定义键值"><a href="#Zabbix的自定义键值" class="headerlink" title="Zabbix的自定义键值"></a>Zabbix的自定义键值</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>在agent端定义key时只需要使用UserParameter参数即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=&lt;key&gt;,&lt;command&gt;;[&lt;command&gt;...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">command</span>只能有一个返回值 并且返回值不能超过512K</span></span><br></pre></td></tr></table></figure><blockquote><p>  <strong>例如</strong>:<br>  UserParameter=mysql.ping.mysqladmin -uroot ping |　grep -c alive<br>  The agent will return ‘1’,if Mysql server is alive, ‘0’ -otherwise<br>  也就是对于zabbix来说,1为正确</p></blockquote><h2 id="无参数键值"><a href="#无参数键值" class="headerlink" title="无参数键值"></a>无参数键值</h2><h3 id="agent端"><a href="#agent端" class="headerlink" title="agent端"></a>agent端</h3><p>配置用户自定义key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-agent ~]# free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:         483612       90584      283488        6244      109540      348788</span><br><span class="line">Swap:       1048572      162408      886164</span><br><span class="line"></span><br><span class="line">[root@zabbix-agent ~]# /usr/bin/free|awk '/^Mem:/&#123;print $4&#125;'</span><br><span class="line">283340</span><br></pre></td></tr></table></figure><p>获取到值后,将该值在/etc/zabbix/zabbix_agentd.conf中进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-agent ~]# vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">UserParameter=memory.free,/usr/bin/free|awk '/^Mem:/&#123;print $4&#125;'</span><br></pre></td></tr></table></figure><p>重启agent服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-agent ~]# systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h3><p>zabbix监控端获取数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server alertscripts]# yum -y install zabbix-get</span><br><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.100.163 -k "memory.free"</span><br><span class="line">280488</span><br></pre></td></tr></table></figure><p>已经可以获取mem数据,添加为模板的Item</p><h2 id="有参数键值"><a href="#有参数键值" class="headerlink" title="有参数键值"></a>有参数键值</h2><h3 id="agent端-1"><a href="#agent端-1" class="headerlink" title="agent端"></a>agent端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-agent ~]# /bin/cat /proc/meminfo</span><br><span class="line">MemTotal:         483612 kB</span><br><span class="line">MemFree:          279756 kB</span><br><span class="line">MemAvailable:     352120 kB</span><br><span class="line">Buffers:               0 kB</span><br><span class="line">Cached:            70908 kB</span><br><span class="line">SwapCached:         3324 kB</span><br><span class="line">Active:            30272 kB</span><br><span class="line">Inactive:          79716 kB</span><br><span class="line">Active(anon):      13608 kB</span><br><span class="line">Inactive(anon):    31684 kB</span><br><span class="line">Active(file):      16664 kB</span><br><span class="line">Inactive(file):    48032 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       1048572 kB</span><br><span class="line">SwapFree:         886280 kB</span><br><span class="line">Dirty:                 4 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:         36316 kB</span><br><span class="line">Mapped:            12644 kB</span><br><span class="line">Shmem:              6212 kB</span><br><span class="line">Slab:              45560 kB</span><br><span class="line">SReclaimable:      20564 kB</span><br><span class="line">SUnreclaim:        24996 kB</span><br><span class="line">KernelStack:        4256 kB</span><br><span class="line">PageTables:         5084 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:     1290376 kB</span><br><span class="line">Committed_AS:     785128 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:      176280 kB</span><br><span class="line">VmallocChunk:   34359310332 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:         0 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:       53120 kB</span><br><span class="line">DirectMap2M:      471040 kB</span><br><span class="line">DirectMap1G:           0 kB</span><br><span class="line">[root@zabbix-agent ~]# /bin/cat /proc/meminfo | awk '/^SwapTotal/&#123;print $2&#125;'</span><br><span class="line">1048572</span><br></pre></td></tr></table></figure><p>在/etc/zabbix/zabbix_agentd.conf中进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-agent ~]# vim /etc/zabbix/zabbix_agentd.conf </span><br><span class="line">UserParameter=memory.usage[*],/bin/cat /proc/meminfo|awk '/^$1/&#123;print $$2&#125;'</span><br><span class="line">[root@zabbix-agent ~]# systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="server端-1"><a href="#server端-1" class="headerlink" title="server端"></a>server端</h3><p>监控端获取根据传递的参数获取数据(同一个key可以监控多个指标)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.100.163 -k memory.usage[MemFree]</span><br><span class="line">279940</span><br></pre></td></tr></table></figure><h2 id="监控CPU的负载"><a href="#监控CPU的负载" class="headerlink" title="监控CPU的负载"></a>监控CPU的负载</h2><h3 id="agent端-2"><a href="#agent端-2" class="headerlink" title="agent端"></a>agent端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-agent ~]# vim /etc/zabbix/zabbix_agentd.conf </span><br><span class="line">UserParameter=load.avg1,/usr/bin/uptime | awk -F ':' '&#123;print $5&#125;' | awk -F ',' '&#123;print $1&#125;'</span><br><span class="line">UserParameter=load.avg5,/usr/bin/uptime | awk -F ':' '&#123;print $5&#125;' | awk -F ',' '&#123;print $2&#125;'</span><br><span class="line">UserParameter=load.avg15,/usr/bin/uptime | awk -F ':' '&#123;print $5&#125;' | awk -F ',' '&#123;print $3&#125;'</span><br><span class="line">[root@zabbix-agent ~]# systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="server端-2"><a href="#server端-2" class="headerlink" title="server端"></a>server端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.100.163 -k load.avg1</span><br><span class="line"> 0.05</span><br><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.100.163 -k load.avg5</span><br><span class="line"> 0.03</span><br><span class="line">[root@zabbix-server ~]# zabbix_get -s 192.168.100.163 -k load.avg15</span><br><span class="line"> 0.05</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2jj3tztjj31lh0u0qd3.jpg" alt="image-20210127204707710"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2jjr27m8j31zy0nmn2g.jpg" alt="image-20210127204744784"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2k87de8kj30zd0u0grq.jpg" alt="image-20210127211112691"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2k984qkbj30wt0u0grm.jpg" alt="image-20210127211205118"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2ka0ts6qj30xr0u0n38.jpg" alt="image-20210127211257729"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2jnr0w7gj32000jaafv.jpg" alt="image-20210127205132419"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2jofvbmij31l30u0won.jpg" alt="image-20210127205208978"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2jow4dcfj32020gk78d.jpg" alt="image-20210127205241726"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2jpzx8fvj31im0u0jyb.jpg" alt="image-20210127205340391"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2kawzuw1j32020ngafn.jpg" alt="image-20210127211341385"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn2kbamtmnj31ys0maq8c.jpg" alt="image-20210127211410757"></p><h1 id="自动发现"><a href="#自动发现" class="headerlink" title="自动发现"></a>自动发现</h1><p>server主动发现agent服务器的过程</p><h2 id="添加自动发现规则"><a href="#添加自动发现规则" class="headerlink" title="添加自动发现规则"></a>添加自动发现规则</h2><p>配置 =&gt; 自动发现 =&gt; 创建发现规则 =&gt; </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn3v2z4w1xj32020osgqi.jpg" alt="image-20210129001217933"></p><p>名称:AutoDiscoveryHost<br>IP 范围:192.168.122.101-105</p><p>检查:新的-&gt;</p><p>HTTP</p><p>Zabbix 客户端-&gt;端口范围:10050,键值:system</p><p>abbix 客户端-&gt;端口范围:10050,键值:uname</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn4dwkf97jj313j0u0n1o.jpg" alt="image-20210129110334616"></p><h2 id="添加自动发现的动作"><a href="#添加自动发现的动作" class="headerlink" title="添加自动发现的动作"></a>添加自动发现的动作</h2><p>配置 =&gt; 动作 =&gt; 事件源:自动发现(右上角) =&gt; 创建动作 =&gt; </p><p><img src="/Users/mac/blog/source/_posts/zabbix%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.assets/image-20210129001840328.png" alt="image-20210129001840328"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn3vd01yqej317y0sywig.jpg" alt="image-20210129002158791"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn3vfeznl2j316i0rk79c.jpg" alt="image-20210129002415761"></p><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>重新打开一台 192.168.100.0/24 网段的虚拟机</p><p>安装zabbix-agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/yum.repos.d/zabbix.repo&lt;&lt;EOF</span></span><br><span class="line">[zabbix]</span><br><span class="line">name=Zabbix</span><br><span class="line">baseurl=https://mirrors.huaweicloud.com/zabbix/zabbix/4.4/rhel/7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=192.168.100.161# server端</span><br><span class="line">ServerActive=192.168.100.161# server端</span><br><span class="line">Hostname=192.168.100.164# agent端</span><br><span class="line">UnsafeUserParameters=1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start zabbix-agent</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn4dy0wx8uj31j10u013y.jpg" alt="image-20210129110457489"></p><h1 id="自动注册"><a href="#自动注册" class="headerlink" title="自动注册"></a>自动注册</h1><blockquote><p>   自动发现功能主要是用与服务器端自动发现客户端,并且将其设置模板 群组并且监控,实际上服务端在主动扫描需要监控的server<br>  而自动注册时客户端动作,客户端直接联系服务端,请求注册并且监控,实际上服务端在被动接受请求<br>  对于部署多台服务器阶段,自动注册可能是更好的选择,而自动发现则用户后期维护比较合适</p></blockquote><h2 id="新建虚拟机-1"><a href="#新建虚拟机-1" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>192.168.100.165</p><p>安装zabbix-agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/zabbix.repo&lt;&lt;EOF</span><br><span class="line">[zabbix]</span><br><span class="line">name=Zabbix</span><br><span class="line">baseurl=https://mirrors.huaweicloud.com/zabbix/zabbix/4.4/rhel/7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ yum -y install zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">$ vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">Server=192.168.100.161<span class="comment"># server端</span></span><br><span class="line">ServerActive=192.168.100.161<span class="comment"># server端</span></span><br><span class="line">Hostname=192.168.100.165<span class="comment"># agent端</span></span><br><span class="line">UnsafeUserParameters=1</span><br><span class="line"></span><br><span class="line">$ systemctl start zabbix-agent</span><br></pre></td></tr></table></figure><p>只需创建动作即可,[注意]:事件源选择-&gt;自动注册<br>创建的内容与自动发现一样,只不过不需要填入任何条件,在[操作]中填写细节即可</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5s1fgbn8j32020myq6o.jpg" alt="image-20210130155809495"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5sqm29yvj31540ow776.jpg" alt="image-20210130160946182"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5sgi16zfj317c0u0gq0.jpg" alt="image-20210130161226323"></p><p>点击”添加”</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5smo35k8j31j70u0n8t.jpg" alt="image-20210130161835119"></p><h1 id="配置Zabbix-实现proxy代理功能"><a href="#配置Zabbix-实现proxy代理功能" class="headerlink" title="配置Zabbix - 实现proxy代理功能"></a>配置Zabbix - 实现proxy代理功能</h1><p><strong>服务器规划:</strong></p><table><thead><tr><th align="center">IP</th><th align="center">主机名</th></tr></thead><tbody><tr><td align="center">192.168.100.161</td><td align="center">zabbix-server</td></tr><tr><td align="center">192.168.100.162</td><td align="center">zabbix-proxy</td></tr><tr><td align="center">192.168.100.163</td><td align="center">zabbix-agent</td></tr></tbody></table><h2 id="基础配置-1"><a href="#基础配置-1" class="headerlink" title="基础配置"></a>基础配置</h2><p><code>在server/proxy/agent三台服务器上进行配置</code></p><h3 id="配置域名解析-1"><a href="#配置域名解析-1" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "192.168.100.161" zabbix-server &gt;&gt; /etc/hosts</span><br><span class="line">echo "192.168.100.162" zabbix-proxy &gt;&gt; /etc/hosts</span><br><span class="line">echo "192.168.100.166" zabbix-agent &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="配置repo源-1"><a href="#配置repo源-1" class="headerlink" title="配置repo源"></a>配置repo源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/yum.repos.d/zabbix.repo&lt;&lt;EOF</span></span><br><span class="line">[zabbix]</span><br><span class="line">name=Zabbix</span><br><span class="line">baseurl=https://mirrors.huaweicloud.com/zabbix/zabbix/4.4/rhel/7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql用于server与proxy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/yum.repos.d/mysql57.repo &lt;&lt;EOF</span></span><br><span class="line">[mysql-5.7-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="清理repo源环境并重新建立-1"><a href="#清理repo源环境并重新建立-1" class="headerlink" title="清理repo源环境并重新建立"></a>清理repo源环境并重新建立</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum repolist</span></span><br></pre></td></tr></table></figure><h3 id="安装必要软件-1"><a href="#安装必要软件-1" class="headerlink" title="安装必要软件"></a>安装必要软件</h3><p><code>在server/proxy/agent上进行配置</code></p><h4 id="安装fping-1"><a href="#安装fping-1" class="headerlink" title="安装fping"></a>安装fping</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install epel-release</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install fping</span></span><br></pre></td></tr></table></figure><p><code>mysql在server与proxy上进行安装</code></p><h4 id="安装mysql-1"><a href="#安装mysql-1" class="headerlink" title="安装mysql"></a>安装mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install mysql-server </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start mysqld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看root账户的默认密码 =&gt; wIu8_wS_nXpf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /var/<span class="built_in">log</span>/mysqld.log | grep password</span></span><br><span class="line">2021-01-18T12:36:00.240888Z 1 [Note] A temporary password is generated for root@localhost: wIu8_wS_nXpf</span><br><span class="line">2021-01-18T12:36:20.507908Z 2 [Note] Access denied for user 'root'@'localhost' (using password: NO)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql并修改默认root账户的密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -pwIu8_wS_nXpf</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified by <span class="string">'Syz123!@#'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="server端配置-1"><a href="#server端配置-1" class="headerlink" title="server端配置"></a>server端配置</h2><p>上面已有,不再赘述</p><h2 id="proxy端配置"><a href="#proxy端配置" class="headerlink" title="proxy端配置"></a>proxy端配置</h2><h3 id="创建数据库并授权"><a href="#创建数据库并授权" class="headerlink" title="创建数据库并授权"></a>创建数据库并授权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p<span class="string">'Syz123!@#'</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database zabbix_proxy character <span class="built_in">set</span> <span class="string">'utf8'</span>;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all on zabbix_proxy.* to zbxproxy@localhost identified by <span class="string">'Syz123!@#'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">exit</span></span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h3 id="安装zabbix-proxy"><a href="#安装zabbix-proxy" class="headerlink" title="安装zabbix-proxy"></a>安装zabbix-proxy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y zabbix-proxy zabbix-proxy-mysql zabbix-agent</span></span><br></pre></td></tr></table></figure><p>导入表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /usr/share/doc/zabbix-proxy-mysql-4.4.10/schema.sql.gz | mysql -u zbxproxy -p'Syz123!@#' zabbix_proxy</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/zabbix/zabbix_proxy.conf</span></span><br><span class="line">Server=192.168.100.161</span><br><span class="line">Hostname=zabbix-proxy</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix_proxy</span><br><span class="line">DBUser=zbxproxy</span><br><span class="line">DBPassword=Syz123!@#</span><br><span class="line">DBSocket=/var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><blockquote><p>  <strong>注意:</strong> 上面的 Hostname 名称要记住,一会儿在 zabbix 界面中创建代理时,需要与其保持一致,最好所有名字都取为 zabbix-proxy</p></blockquote><h3 id="启动proxy服务"><a href="#启动proxy服务" class="headerlink" title="启动proxy服务"></a>启动proxy服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-proxy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -anplt|grep zabbix_proxy</span></span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      2619/zabbix_proxy   </span><br><span class="line">tcp6       0      0 :::10051                :::*                    LISTEN      2619/zabbix_proxy</span><br></pre></td></tr></table></figure><h2 id="agent端配置-1"><a href="#agent端配置-1" class="headerlink" title="agent端配置"></a>agent端配置</h2><p>安装zabbix-agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zabbix-agent</span></span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=192.168.100.162</span><br><span class="line">ServerActive=192.168.100.162</span><br><span class="line">Hostname=zabbix-agent</span><br><span class="line">UnsafeUserParameters=1# 是否限制用户自定义keys使用特殊字符</span><br></pre></td></tr></table></figure><p>启动zabbix-agent服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart zabbix-agent</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -antp | grep zabbix</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      11809/zabbix_agentd </span><br><span class="line">tcp6       0      0 :::10050                :::*                    LISTEN      11809/zabbix_agentd</span><br></pre></td></tr></table></figure><h2 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h2><p>管理 =&gt; agent 代理程序 =&gt; 创建代理 =&gt; </p><p>agent 代理程序名称:zabbix-proxy</p><p>系统代理程序模式:主动式(由proxy端主动将数据发送给server端)</p><p>=&gt; 添加</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmtgqvze1jj31jd0u041t.jpg" alt="add_zabbix_proxy"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmtgy5xxz6j313o0pmgp0.jpg" alt="image-20210120002739986"></p><h2 id="添加自动发现"><a href="#添加自动发现" class="headerlink" title="添加自动发现"></a>添加自动发现</h2><p>配置 =&gt; 自动发现 =&gt; 创建发现规则 =&gt; </p><p>名称:AutoDiscoveryProxyHost<br>由agent代理程序自动发现:zabbix-proxy<br>IP范围:192.168.100.162<br>更新间隔:10<br>检查:ICMP ping</p><p>=&gt; 添加</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmth33k4kzj32000p442t.jpg" alt="image-20210120003226480"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5uj739tjj30wy0u0gq5.jpg" alt="image-20210130172426634"></p><h2 id="添加动作-1"><a href="#添加动作-1" class="headerlink" title="添加动作"></a>添加动作</h2><p>配置 =&gt; 动作 =&gt;  创建动作 =&gt; </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5u797autj32020suq9q.jpg" alt="image-20210130171259725"></p><p>[动作]<br>名称:AutoDiscoveryProxyHostAction<br>A    自动发现规则 等于 AutoDiscoveryProxyHost    移除<br>B    自动发现状态 等于 上    移除</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5u9gxhczj317g0r477y.jpg" alt="image-20210130171457728"></p><p>[操作]<br>添加主机          编辑 移除<br>添加到主机群组: webservers    编辑 移除<br>链接到模板: Template web server  编辑 移除</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5ubo0vkoj31440rm43i.jpg" alt="image-20210130171713262"></p><p>=&gt; 添加</p><h2 id="新建虚拟机进行测试"><a href="#新建虚拟机进行测试" class="headerlink" title="新建虚拟机进行测试"></a>新建虚拟机进行测试</h2><p>新添加一台ip为192.168.100.166的虚拟机</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5vb2mrhlj31vm0u0qh6.jpg" alt="image-20210130175114536"></p><blockquote><p>  也许你会奇怪怎么多出来这么多的新主机,其实正常,这是因为zabbix-proxy代理通过自动发现再次把之前的机器添加了进来,造成了重复</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell的使用方法</title>
      <link href="/2020/09/16/shell%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2020/09/16/shell%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="shell使用方法"><a href="#shell使用方法" class="headerlink" title="shell使用方法"></a>shell使用方法</h1><h2 id="学习技巧"><a href="#学习技巧" class="headerlink" title="学习技巧"></a>学习技巧</h2><ul><li>认真听课</li><li>给所有脚本添加上注释</li><li>用写好的脚本进行修改，达到修改后仍可正常执行的效果</li><li>根据自己的需求整理思路并创造完整的脚本</li></ul><h2 id="什么是-shell"><a href="#什么是-shell" class="headerlink" title="什么是 shell"></a>什么是 shell</h2><p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。<br>Linux 的 Shell 种类众多，常见的有：</p><ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）<br>  ……</li></ul><p>shell 在 linux 中称为 linux壳,在壳中间是 linux 的系统内核</p><p>简单的来说,shell 是帮助用户与系统内核之间进行沟通的<code>桥梁</code></p><p><strong>举个例子:</strong></p><p><em>我们现在在一个互联网公司中,现在老板让我们和一个国外的客户商谈一个项目,然而呢,我们英语不好,可以说是菜的一批…<br>这个时候我们就需要花重金聘请一位<code>翻译</code>来为我们进行信息的传达,而这个翻译的身份,就相当于我们现在所说的 <code>shell</code>,懂了吧?</em></p><p>ok</p><blockquote><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。<br>Shell 既是一种命令语言，又是一种程序设计语言。<br>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问 操作系统内核 的服务。</p></blockquote><p><strong>shell分两大类：</strong></p><pre><code>1. 图形界面shell（Graphical User Interface shell 即 GUI shell）</code></pre><p>  应用最为广泛的 Windows Explorer （微软的windows系列操作系统）</p><pre><code>1. 命令行式shell（Command Line Interface shell ，即CLI shell）</code></pre><p>  bash / sh / ksh / csh / zsh（Unix/linux 系统）<br>  MS-DOS系统<br>  cmd.exe/ 命令提示字符（Windows NT 系统）</p><p>传统意义上的shell指的是命令行式的shell，以后如果不特别注明，shell是指命令行式的shell。</p><p>Shell基本上是一个命令解释器，类似于DOS下的command。它接收用户命令（如ls等），然后调用相应的应用程序。较为通用的shell有标准的Bourne shell和 C shell</p><p><strong>交互式 shell 与 非交互式 shell</strong></p><pre><code>1. 交互式模式就是shell等待你的输入，并且执行你提交的命令。这种模式被称作交互式是因为shell与用户进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、签退。当你签退后，shell也终止了。2. shell也可以运行在另外一种模式：非交互式模式。在这种模式下，shell不与你进行交互，而是读取存放在文件中的命令，并且执行它们。当它读到文件的结尾，shell也就终止了</code></pre><p>Shell 程序本身的功能是很弱的，比如文件操作、输入输出、进程管理等都得依赖内核。我们运行一个命令，大部分情况下 Shell 都会去调用内核暴露出来的接口，这就是在使用内核，只是这个过程被 Shell 隐藏了起来，它自己在背后默默进行，我们看不到而已。</p><p>接口其实就是一个一个的函数，使用内核就是调用这些函数。</p><p>如下图,是我从网上摘下来的图片</p><p><img src="http://c.biancheng.net/uploads/allimg/190417/1-1Z41G31T3628.gif" alt="shell_introduction"></p><h2 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h2><p>Shell Script,顾名思义,名为 shell 脚本</p><p>查了查网络上的资料<br>找到了鸟哥🐦对于 shell 脚本的定义</p><blockquote><p>鸟哥的专业解释：<br>shell脚本是利用shell的功能所写的一个「程序」。这个程序是使用纯文本文件，将一些shell的语法与命令（包括外部命令）写在里面，搭配正则表达式、管道命令与数据流重定向等功能，以达到我们所想要的处理目的</p></blockquote><p>嗯 , 差不多就是这个意思</p><p>那么为什么会产生 shell 脚本呢?</p><p>这样,我举个例子吧</p><p>假设我现在是一名小公司的运维人员,项目经理下达一项命令,每周日的凌晨 3 点备份公司的某某数据库的数据,并且将备份的数据库的日志文件拷贝一份给老板,于是乎,我们按部就班的每周日都要去一个一个去输入相应的命令<br>这样效率非常低…<br>一者,时间上来讲,我们总不能一直那么大晚上的去工作<br>二者,每周都是相同的命令,做起来非常浪费时间,没有意义<br>那么,有人就想,能不能把命令都集中到一起写入到文件中,使用时直接执行那个文件不就好了吗?<br>于是,shell 脚本经过漫长的演变,成为了现在的模样.</p><h2 id="第一个脚本：Hello-World"><a href="#第一个脚本：Hello-World" class="headerlink" title="第一个脚本：Hello World"></a>第一个脚本：Hello World</h2><blockquote><p>vim test.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><blockquote><p>bash test.sh</p></blockquote><h2 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h2><ul><li>./    (需要使用 chmod +x hello.sh 给文件执行权限)</li><li>bash</li></ul><h2 id="命令：echo"><a href="#命令：echo" class="headerlink" title="命令：echo"></a>命令：echo</h2><ul><li>-e : 输出特殊字符的输出 </li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"\\"</span></span><br></pre></td></tr></table></figure><ul><li>-n : 输出指定内容后不换行</li><li>\a : 输出警告声音</li><li>\n : 换行 </li><li>\t : 插入tab</li><li>\ : 插入 \ 符号</li><li>\e[nm <strong>*\e[om : 用来指定 *</strong> 输出时的颜色格式</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[31mhello world\e[0m"</span></span><br></pre></td></tr></table></figure><h2 id="wxr权限的功能"><a href="#wxr权限的功能" class="headerlink" title="wxr权限的功能"></a>wxr权限的功能</h2><p>文件下：</p><ul><li>W：文件可写</li><li>X：文件可执行</li><li>R：文件可读</li></ul><p>目录下：    </p><ul><li><p>W: 可以建立新目录/删除已存在目录/修改已存在的目录</p></li><li><p>X: 具有执行的权限，简单地说，就是可以将该目录转换成家目录的能力，比如cd 命令。注意，x权限对于目录是极其重要的，如果没有该目录，表示你不能切换到该目录，更不能对其子目录或者文件进行操作，即使你有“r/w”权限。</p></li><li><p>R: 可查询此目录下文件名数据，比如ls命令</p></li></ul><hr><p><strong>小贴士:</strong></p><p>shell: 帮助用户和内核之间进行沟通的桥梁（接口：API）</p><p>RedHad/CentOS/Ubuntu使用的都是Linux内核</p><p>所有开头带<code>点</code>的文件都是隐藏文件</p><hr><h2 id="命令history"><a href="#命令history" class="headerlink" title="命令history"></a>命令history</h2><p><strong>历史命令配置文件只会保存本次登陆之前的历史命令</strong></p><p>选项：</p><ul><li>-w: 把缓存中的历史命令同步到 .bash_history 中 </li><li>-c: 仅清空缓存中的历史命令（不清空配置文件 .bash_history 的内容）</li></ul><p>history历史命令的快速调用:</p><ul><li>上下光标</li><li>!n，重复执行历史命令中的第n个命令</li><li>!!，执行上一个命令</li><li>! + 字符，执行最近一次以该字符开头的历史命令</li></ul><h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><p>配置文件：<br>.bashrc(单用户生效)<br>/etc/bashrc(所有用户生效)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/bashrc//让配置文件中的配置立即生效</span><br></pre></td></tr></table></figure><p>格式：<code>alias 别名 = &#39;命令[选项]&#39;</code>（不能使用已经存在的命令作为别名）    </p><p><code>\</code> 称为转义符：将该符号后的字符不产生其特殊作用<br>示例：\rm aaa</p><h2 id="ctrl"><a href="#ctrl" class="headerlink" title="ctrl"></a>ctrl</h2><ul><li>ctrl + l，快速清屏</li><li>ctrl + c，停止运行</li><li>ctrl + d，（关闭/退出）登录/窗口</li></ul><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>wc: wordcount</p><blockquote><p><code>输入</code>重定向：&lt;（覆盖式写入）,此重定向有一定的风险</p></blockquote><p>命令：wc &lt; filename</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc -l &lt; /etc/passwd(统计系统有多少个用户)</span><br></pre></td></tr></table></figure><blockquote><p><code>输出</code>重定向：&gt;</p></blockquote><p>命令： echo “***” &gt; filename</p><blockquote><p>输出重定向：&gt;&gt;（追加式写入）</p></blockquote><h3 id="文本合并"><a href="#文本合并" class="headerlink" title="文本合并"></a>文本合并</h3><p>方式一：cat a.txt b.txt &gt; new.txt<br>方式二：使用vim打开a.txt，:r 路径/b.txt</p><h3 id="输出重定向特殊使用方法"><a href="#输出重定向特殊使用方法" class="headerlink" title="输出重定向特殊使用方法"></a>输出重定向特殊使用方法</h3><p>&amp;&gt;：忽略命令执行结果的错对，将输出写入到指定文件或设备</p><p>echo $?(查看上一条命令是否正确，正确输出0，错误输出非0)</p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>; ：分隔命令(无逻辑关系，命令全部执行)<br>&amp;&amp;：同时成立才执行(前面执行成功后则后面开始执行)<br>||：其中一个成立即可执行（如果某一个命令执行成功了，后面的命令便不再执行）</p><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符 |"></a>管道符 |</h2><p>ls -l /etc/ | more(翻页显示，空格翻页)</p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><ul><li>$：用于调用指定的变量的值，如 echo “$abc”</li><li>\：转义符</li><li>‘’：引号内的所有符号失去特殊含义</li><li>“”：类似于单引号，除了”$”,”`”,”&quot;三个符号外都没有特殊含义，常用于将某命令</li><li>``：反引号,优先执行反引号中的内容</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`//取出date命令的执行结果传给<span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>知识：</p><ul><li>date：系统时间</li><li>clock：时钟时间</li></ul><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usernum=`wc -l &lt; /etc/passwd`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$usernum</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usernuum=$(wc -l &lt; /etc/passwd)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$usernum</span></span><br></pre></td></tr></table></figure><h2 id="UID范围"><a href="#UID范围" class="headerlink" title="UID范围"></a>UID范围</h2><p>超级管理员：0<br>系统用户：1-999<br>普通用户：1000-65535</p><p>/sbin/nologin:禁止本地、远程登录<br>/bin/bash:可登录</p><h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><ul><li>自定义(普通)变量</li><li>环境变量</li><li>位置参数变量</li><li>预定义变量</li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><strong>作用</strong>：用来显示终端有哪些变量（显示所有变量）<br>选项：</p><ul><li>-u</li></ul><p>使用 <code>set -u</code> 命令之后，如果变量不存在，会报错，不会输出空值，避免了一些风险</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -u</span><br><span class="line">rm -rf <span class="variable">$a</span>/*</span><br></pre></td></tr></table></figure><h3 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h3><p>删除变量</p><p><strong><em>注：特殊符号也可以顺序排列(转换为ASCII码)</em></strong></p><h3 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h3><p>name= zhangsan ❌<br>name=zhang san ❌<br>name=zhangsan ✅<br>name=”zhang san” ✅</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>尽量使用大写字母</p><p><strong>声明规范</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NAME=zhangsan</span><br></pre></td></tr></table></figure><p><strong>如何区分普通变量与环境变量：</strong><br>env：只显示环境变量</p><p><strong>普通变量如何变成环境变量：</strong><br>直接（重新）声明即可</p><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env | grep <span class="string">'PATH'</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>这个环境变量很重要<br>我们执行的命令，都是通过这个变量作为引导来查询到相应的命令位置的<br>比如：</p><blockquote><p>[root@localhost ~]# which ls<br>alias ls=’ls –color=auto’<br>/usr/bin/ls</p></blockquote><p>which会查询到ls命令的所在位置，而 <code>/usr/bin</code> 就是环境变量<code>PATH</code>中的一个成员<br>如果<code>PATH</code>环境变量删除了，那么我们的所有命令将不可再使用<br>假设test是一个可执行程序</p><p>PATH=”$PATH:/tmp/test”<br>这条语句的意思就是添加一个新的命令，名为<code>test</code></p><h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><p>使用例子来说明</p><blockquote><p>vim test.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$3</span></span><br></pre></td></tr></table></figure><blockquote><p>bash test.sh<br>bash test.sh 11 22 33</p></blockquote><p>测试1：</p><blockquote><p>bash test.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.sh</span><br></pre></td></tr></table></figure><p><strong><em>系统会默认把脚本的名称作为$0</em></strong></p><p>测试2:</p><blockquote><p>bash test.sh 11 22 33</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.sh</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">33</span><br></pre></td></tr></table></figure><ul><li>$* : 一次性输出所有变量</li><li>$@ : 依次输出变量</li><li>$# : 统计变量个数</li></ul><p>测试3:</p><blockquote><p>vi test.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $*</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$@</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span></span><br></pre></td></tr></table></figure><blockquote><p>bash test.sh 11 22 33 44</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11 22 33 44</span><br><span class="line">11 22 33 44  </span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="命令read"><a href="#命令read" class="headerlink" title="命令read"></a>命令read</h2><p>-p : 编写提示信息</p><p>例子：</p><blockquote><p>vi test1.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input your userid: "</span> id </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input your password: "</span> password</span><br></pre></td></tr></table></figure><blockquote><p>chmod +x test1.sh<br>./test1.sh</p></blockquote><p>进一步修改：</p><blockquote><p>vi test1.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input your userid: "</span> id </span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input your password: "</span> password</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input your want to (+,-,*,/): "</span> fix</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $((<span class="variable">$id</span><span class="variable">$fix</span><span class="variable">$password</span>))</span><br></pre></td></tr></table></figure><blockquote><p>chmod +x test1.sh<br>./test1.sh</p></blockquote><p>其实这只是一个骨架，可以想一下如果输入了字母，会出现什么情况？<br>所有还要进一步对输入进行判断,以后待我牛X了再进行补充.</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>在shell中只支持<code>整数型</code>运算</p><p>如果想要使用<code>浮点数</code>，解决办法：</p><p>命令：bc(一般和管道符配合使用)<br>格式：echo $(echo “1.23*3.45”|bc)</p><h3 id="特殊运算符"><a href="#特殊运算符" class="headerlink" title="特殊运算符"></a>特殊运算符</h3><ul><li>++ : 一般用 let n++,意思是n的值每次自增1</li><li>+= : 一般用 let n+=N,意思是n的值每次自增N</li><li>– : 一般用 let n–</li><li>-+ : 一般用 let n-=N</li></ul><h2 id="变量相关配置文件"><a href="#变量相关配置文件" class="headerlink" title="变量相关配置文件"></a>变量相关配置文件</h2><p>加载顺序：<code>/etc/profile</code> —&gt; <code>~/.bash_profile</code> —&gt; <code>~/.bashrc</code> —&gt; <code>/etc/bashrc</code> </p><blockquote><p>cat /etc/profile</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -gt 199 ] &amp;&amp; [ <span class="string">"`/usr/bin/id -gn`"</span> = <span class="string">"`/usr/bin/id -un`"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">umask</span> 002</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">umask</span> 022</span><br></pre></td></tr></table></figure><p>文件的最大权限：666</p><p>umask：002<br>666-002=664</p><p>umask：022<br>666-022=644</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><p>单分支格式(注意空格)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 判断条件 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>多分支格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 判断条件1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句1</span><br><span class="line"><span class="keyword">elif</span> [ 判断条件2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">语句2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">语句3</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>具体：<br>[-选项 “变量”],然后借助 <code>$?</code> 在验证判断结果</p><p>-e：判断文件是否存在<br>-s：判断文件是否存在，并判断是否为非空<br>-f：判断文件是否存在，并判断是否是普通文件<br>-d：判断文件是否存在，并判断是否是目录文件<br>-b：判断文件是否存在，并判断是否是块设备文件<br>-L：判断文件是否存在，并判断是否是软链接文件</p><p>-eq：判断是否相等<br>-ne：判断是否不等<br>-gt：判断是否大于<br>-lt：判断是否小于<br>-ge：判断是否大于等于<br>-le：判断是否小于等于</p><p>-z：判断字符串是否为空<br>-n：判断字符串是否为非空<br>==：判断两个字符串是否相同<br>!=：判断两个字符串是否不同</p><p>-a：逻辑与，多个判断使用-a连接起来，所有条件成立则为真<br>-o：逻辑或，多个判断使用-o连接起来，任意条件成立则为真</p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>语法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> v1 v2 v3...</span><br></pre></td></tr></table></figure><p>语法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((初始值;循环控制条件;变量变化))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>例子：</p><blockquote><p>vim test2.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">for</span>((i=1;i&lt;=100;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sum=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure><blockquote><p>chmod +x test2.sh<br>./test2.sh</p></blockquote><h3 id="案例-常用小工具-："><a href="#案例-常用小工具-：" class="headerlink" title="案例(常用小工具)："></a>案例(常用小工具)：</h3><p>利用脚本解压压缩包</p><p>压缩包的类型：</p><ul><li>.zip</li><li>.tar</li><li>.tar.gz/.tar.bz2/.tar.xz/.tgz(解压命令：tar -xf filename)</li><li>.gz</li><li>.bz2</li></ul><p>假设都是同一种类型</p><p>vim yasuo.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"scripts file path"</span> path</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$path</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">tar -xf <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>不是同一种类型</p><blockquote><p>vim yasuo1.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"scripts file path"</span> path</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$path</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$i</span>"</span> =~ <span class="string">".zip"</span> ]];<span class="keyword">then</span></span><br><span class="line">unzip <span class="variable">$i</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$i</span>"</span> =~ <span class="string">".tar"</span> ]];<span class="keyword">then</span></span><br><span class="line">tar -xf <span class="variable">$i</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"this type is unknow"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>格式一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>格式二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h3><ul><li>exit：退出脚本</li><li>exit<code>[值]</code>：退出时如果定义好了返回值，那么我们可以通过 $? 来查看</li><li>break：退出循环</li><li>continue：直接开始下一次的循环</li></ul><p>示例：</p><p>for i in 1 2 3 4 5 6 7 8 9<br>do<br>    if [ “$i” -eq “4” ]<br>    then<br>        break<br>    else<br>        echo “$i”<br>    fi<br>done </p><h3 id="随机数："><a href="#随机数：" class="headerlink" title="随机数："></a>随机数：</h3><blockquote><p>echo $RANDOM<br>echo $(($RANDOM%100)) </p></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">num1=`<span class="built_in">echo</span> $((<span class="variable">$RANDOM</span>%100))`</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input a number[1-100]: "</span> num2</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$num2</span>"</span> -gt <span class="string">"<span class="variable">$num1</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"you win"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$num2</span>"</span> -lt <span class="string">"<span class="variable">$num1</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"you false"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"you guess"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/09/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/09/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img4.mukewang.com/5b38507d0001942e06800385.jpg" alt="正则表达式"></p><a id="more"></a><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><strong>目标</strong>：<code>查找</code>/<code>取出</code>/<code>匹配</code> 符合<code>条件</code>的某个字符或字符串</p><p><strong>正则表达式学习方法</strong>：单个字符表示&gt;&gt;&gt;字符串表示&gt;&gt;&gt;表达式</p><h2 id="正则单字符的表示方法"><a href="#正则单字符的表示方法" class="headerlink" title="正则单字符的表示方法"></a>正则单字符的表示方法</h2><p>首先，把<code>/etc/passwd</code>复制到家目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/passwd ~/.</span><br></pre></td></tr></table></figure><h3 id="特定字符"><a href="#特定字符" class="headerlink" title="特定字符"></a>特定字符</h3><p>某个具体的字符，如：’1’,’a’</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'1'</span> passwd</span><br></pre></td></tr></table></figure><h3 id="范围内字符"><a href="#范围内字符" class="headerlink" title="范围内字符"></a>范围内字符</h3><ul><li>数字字符</li><li>小写字符</li><li>大写字符</li><li>大小写字符</li><li>符号</li><li>反向字符</li></ul><p>单个字符 []</p><h4 id="数字字符"><a href="#数字字符" class="headerlink" title="数字字符"></a>数字字符</h4><p>[0-9],[123] (注意：只是范围内的一个字符)</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[0-9]'</span> passwd</span><br></pre></td></tr></table></figure><h4 id="小写字符"><a href="#小写字符" class="headerlink" title="小写字符"></a>小写字符</h4><p>[a-z]</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[a-z]'</span> passwd</span><br></pre></td></tr></table></figure><h4 id="大写字符"><a href="#大写字符" class="headerlink" title="大写字符"></a>大写字符</h4><p>[A-Z]</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[A-Z]'</span> passwd</span><br></pre></td></tr></table></figure><h4 id="大小写字符"><a href="#大小写字符" class="headerlink" title="大小写字符"></a>大小写字符</h4><p>[a-zA-Z]</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[a-zA-Z]'</span> passwd</span><br></pre></td></tr></table></figure><h4 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h4><p>[,:_]</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[,:_]'</span> passwd</span><br></pre></td></tr></table></figure><h4 id="反向字符"><a href="#反向字符" class="headerlink" title="反向字符"></a>反向字符</h4><p>[^0-9]</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[^0-5]'</span> passwd</span><br></pre></td></tr></table></figure><h3 id="任意字符"><a href="#任意字符" class="headerlink" title="任意字符"></a>任意字符</h3><ul><li>一个点：’.’ (代表任何一个字符)</li><li><em>注意*</em>：’[.]’ 与 ‘.‘ 的效果是一样的</li></ul><h3 id="边界字符"><a href="#边界字符" class="headerlink" title="边界字符"></a>边界字符</h3><ul><li>头字符</li><li>尾字符</li></ul><h4 id="头尾字符"><a href="#头尾字符" class="headerlink" title="头尾字符"></a>头尾字符</h4><p>^:^root     (注意与[^]的区别)<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'^root'</span> passwd</span><br></pre></td></tr></table></figure><p>$:false$<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'false$'</span> passwd</span><br></pre></td></tr></table></figure><p>空行的表示：^$</p><p>首先在家目录下创建一个a.txt文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch a.txt</span><br></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line"></span><br><span class="line">my name is 寿司卷code</span><br><span class="line"></span><br><span class="line">I am very happy to meet you</span><br><span class="line"></span><br><span class="line">How are you?</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'^$'</span> a.txt</span><br></pre></td></tr></table></figure><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>\w:匹配任何字类字符，包括下划线（[A-Za-z0-9_]）<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'\w'</span> a.txt</span><br></pre></td></tr></table></figure><p>\W:匹配任何非字类字符（[^A-Za-z0-9_]）<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'\W'</span> a.txt</span><br></pre></td></tr></table></figure><p>\b:代表单词的分隔<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'\bx\b'</span> passwd</span><br></pre></td></tr></table></figure><h2 id="字符表达式的字符组合"><a href="#字符表达式的字符组合" class="headerlink" title="字符表达式的字符组合"></a>字符表达式的字符组合</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>‘root’ ‘1000’ ‘a..c’<br>‘[A-Z][a-z]’：大写字母与小写字母的组合<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[A-Z][a-z]'</span> passwd</span><br></pre></td></tr></table></figure><p>‘[0-9][0-9]’：数字与数字的组合<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[0-9][0-9]'</span> passwd</span><br></pre></td></tr></table></figure><p><strong>这里会有一个问题</strong>：会匹配到<code>两位以及两位数以上</code>的数据行</p><p>解决办法：</p><blockquote><p>grep ‘\b[0-9][0-9]\b’ passwd</p></blockquote><p>其实用久了我们会发现，上面的这种组合方式非常的繁琐、不方便<br>有没有更好的办法呢？<br>当然有！</p><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><ul><li>*:<code>零次或多次</code>匹配前面的字符或表达式</li><li>+:<code>一次或多次匹</code>配前面的字符或表达式</li><li>?:<code>零次或一次</code>匹配前面的字符或表达式</li></ul><p>首先创建一个测试文件<code>test.txt</code></p><blockquote><p>touch test.txt</p></blockquote><p>填入以下内容</p><blockquote><p>ab</p><p>ababab</p><p>abbbbbbbbbb</p><p>bbbbbbbbbbb</p><p>acccccccc</p><p>+ab+ab+</p></blockquote><h4 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h4><p>示例：</p><blockquote><p>grep ‘ab*’ test.txt<br>grep ‘ab+’ test.txt<br>grep ‘ab?’ test.txt</p></blockquote><p>自己可以尝试一下这三个有什么不同之处<br>下面是我做的测试，高亮的地方就是匹配到的字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'ab*'</span> test.txt</span><br></pre></td></tr></table></figure><blockquote><p><code>ab</code><br><code>ababab</code><br><code>abbbbbbbbbb</code><br><code>acccccccc</code><br>+<code>ab</code>+<code>ab</code>+</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'ab+'</span> test.txt</span><br></pre></td></tr></table></figure><blockquote><p>+<code>ab+ab+</code>                     </p></blockquote><p>嘿，是不是发现<code>grep &#39;ab+&#39; test.txt</code>有问题啊<br>是的，这个<code>+</code>号需要转义一下,<code>?</code>也是同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'ab\+'</span> test.txt</span><br></pre></td></tr></table></figure><blockquote><p><code>ab</code><br><code>ababab</code><br><code>abbbbbbbbbb</code><br>+<code>ab</code>+<code>ab</code>+</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'ab\?'</span> test.txt</span><br></pre></td></tr></table></figure><blockquote><p><code>ab</code><br><code>ababab</code><br><code>ab</code>bbbbbbbbb<br><code>a</code>cccccccc<br>+<code>ab</code>+<code>ab</code>+   </p></blockquote><h4 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h4><p>如果想要匹配一整个字符呢？<br>可以用<code>()</code>括起来<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'\(ab\)*'</span> test.txt</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p><code>ab</code></p><p><code>ababab</code></p><p><code>ab</code>bbbbbbbbb</p><p>bbbbbbbbbbb</p><p>acccccccc</p><p>+<code>ab</code>+<code>ab</code>+</p></blockquote><p>是不是发现其中有空行的存在？<br>这是因为<code>*</code>包括<code>匹配零次</code>的结果<br>语句应该这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'\(ab\)\+'</span> test.txt</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p><code>ab</code><br><code>ababab</code><br><code>ab</code>bbbbbbbbb<br>+<code>ab</code>+<code>ab</code>+   </p></blockquote><h4 id="重复特定次数"><a href="#重复特定次数" class="headerlink" title="重复特定次数"></a>重复特定次数</h4><p>{n,m}:重复n到m次<br>比如{2,3}，在grep中使用就是说匹配重复2次到3次的数据行<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'[0-9]\&#123;2,3\&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>测试之后会发现确实是匹配到了2次到3次的数据行了，但是其中也包括了三次以上的数据行<br>这该如何解决呢？<br>没错，就是你想的那样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'\b[0-9]\&#123;2,3\&#125;\b'</span> passwd</span><br></pre></td></tr></table></figure><h4 id="匹配任意字符串"><a href="#匹配任意字符串" class="headerlink" title="匹配任意字符串"></a>匹配任意字符串</h4><p><code>.</code>表示任何一个字符<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'^a.*'</span> passwd</span><br></pre></td></tr></table></figure><p>这里请注意<code>&#39;^a.*b&#39;</code>与<code>&#39;^a..b&#39;</code>的区别</p><p>这个应该都明白吧？</p><p>哎，还是写出来吧…</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'^a.*b'</span> test.txt</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p><code>ab</code><br><code>ababab</code><br><code>abbbbbbbbbb</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'^a..b'</span> test.txt</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p><code>abab</code>ab<br><code>abbb</code>bbbbbbb</p></blockquote><p>这次明白了吧…😓</p><h4 id="逻辑表示"><a href="#逻辑表示" class="headerlink" title="逻辑表示"></a>逻辑表示</h4><p>| : ‘bin/(bash|nologin)‘<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'bin/\(bash\|nologin\)'</span> passwd</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>root:x:0:0:root:/root:/<code>bin/bash</code><br>bin:x:1:1:bin:/bin:/s<code>bin/nologin</code><br>daemon:x:2:2:daemon:/sbin:/s<code>bin/nologin</code><br>adm:x:3:4:adm:/var/adm:/s<code>bin/nologin</code><br>lp:x:4:7:lp:/var/spool/lpd:/s<code>bin/nologin</code><br>mail:x:8:12:mail:/var/spool/mail:/s<code>bin/nologin</code><br>operator:x:11:0:operator:/root:/s<code>bin/nologin</code><br>games:x:12:100:games:/usr/games:/s<code>bin/nologin</code><br>ftp:x:14:50:FTP User:/var/ftp:/s<code>bin/nologin</code><br>nobody:x:99:99:Nobody:/:/s<code>bin/nologin</code><br>systemd-network:x:192:192:systemd Network Management:/:/s<code>bin/nologin</code><br>dbus:x:81:81:System message bus:/:/s<code>bin/nologin</code><br>polkitd:x:999:997:User for polkitd:/:/s<code>bin/nologin</code><br>abrt:x:173:173::/etc/abrt:/s<code>bin/nologin</code><br>tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/s<code>bin/nologin</code><br>postfix:x:89:89::/var/spool/postfix:/s<code>bin/nologin</code><br>chrony:x:998:996::/var/lib/chrony:/s<code>bin/nologin</code><br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/s<code>bin/nologin</code><br>mysql:x:27:27:MySQL Server:/var/lib/mysql:/<code>bin/bash</code> </p></blockquote><h1 id="案例测试"><a href="#案例测试" class="headerlink" title="案例测试"></a>案例测试</h1><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><p>匹配4-10位QQ号</p><p>首先创建一个qq.txt文件</p><p>可以填入随意的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">123</span><br><span class="line">1231212414</span><br><span class="line">1414</span><br><span class="line">325313531515</span><br><span class="line">235235235dsdf2</span><br><span class="line">23325325fsffew</span><br><span class="line">24234</span><br><span class="line">234234</span><br><span class="line">23423</span><br><span class="line">12345678900987654x</span><br><span class="line">123321456765456789</span><br><span class="line">123545654567867</span><br><span class="line">2434234234</span><br><span class="line">322332545454</span><br><span class="line">223325545</span><br><span class="line">123dfsw245_heeet</span><br><span class="line">2525</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'^[0-9]\&#123;4,10\&#125;'</span> qq.txt</span><br></pre></td></tr></table></figure><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p>匹配15位或18位的身份证号（支持带X）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'^[0-9]\([0-9]\&#123;13\&#125;\|[0-9]\&#123;16\&#125;\)[0-9xX]$'</span> qq.txt</span><br></pre></td></tr></table></figure><h2 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h2><p>匹配密码（由数字，26个字母和下划线组成）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep '^\w\+$' qq.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux笔记扩展</title>
      <link href="/2019/10/08/Linux%E7%AC%94%E8%AE%B0%E6%89%A9%E5%B1%95/"/>
      <url>/2019/10/08/Linux%E7%AC%94%E8%AE%B0%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gixjr757h0j30sg0lc0tx.jpg" alt="linux_tubiao" style="zoom:67%;"><a id="more"></a><h1 id="ln-链接"><a href="#ln-链接" class="headerlink" title="ln 链接"></a>ln 链接</h1><p>ln : link</p><p>为什么要用到软链接?</p><p>其实类似于windows中,桌面上的快捷方式一样</p><p>为了方便,我们平时在windows上,把所有常用的软件的快捷方式放在桌面上</p><p>Linux中也一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">ln [选项] 源文件 目标文件</span><br><span class="line"><span class="comment"># 选项:</span></span><br><span class="line">    -s : 创建软连接(基本上这一个参数就够了)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 1. 软链接</span></span><br><span class="line"><span class="comment"># 创建文件 /etc/issue 的软链接 /tmp/issue.soft</span></span><br><span class="line">ln -s /etc/issue /tmp/issue.soft</span><br><span class="line">ll /tmp</span><br><span class="line">    <span class="comment"># 特点:</span></span><br><span class="line">    <span class="comment"># 1. 软链接生成的文件是 "满权限" 的,这样是很危险的?</span></span><br><span class="line">    <span class="comment"># 2. 不不不,其实真正的权限还是由原文件来决定</span></span><br><span class="line">    <span class="comment"># 3. 只有软链接的开头才会是 "l" </span></span><br><span class="line">    <span class="comment"># 4. 有指向源文件的箭头</span></span><br><span class="line">    lrwxrwxrwx. 1 root root  10 10月  8 17:12 issue.soft -&gt; /etc/issue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 硬链接 </span></span><br><span class="line"><span class="comment"># 创建文件 /etc/issue 的硬链接 /tmp/issue.hard</span></span><br><span class="line">ln /etc/issue /tmp/issue.hard</span><br><span class="line">ll /tmp</span><br><span class="line">    <span class="comment"># 特点:</span></span><br><span class="line">    <span class="comment"># 1. 硬链接生成的文件 "不是满权限" 的</span></span><br><span class="line">    <span class="comment"># 2. 硬链接文件与源文件同步更新</span></span><br><span class="line">    <span class="comment"># 3. 相当于cp(拷贝),即使源文件删除了,硬链接的文件依然存在(实时的备份)</span></span><br><span class="line">    <span class="comment"># 4. 通过 i 节点识别: 命令 "ls -i /etc/issue /tmp/issue.hard" 查看文件索引号(inode),会发现源文件与硬链接文件的索引号相同,这也是为什么两个文件会实时同步的原因</span></span><br><span class="line">    <span class="comment"># 5. 硬链接无法跨分区</span></span><br><span class="line">    <span class="comment"># 6. 无法针对目录</span></span><br><span class="line">    -rw-r--r--. 2 root root  23 8月  30 2017 issue.hard</span><br></pre></td></tr></table></figure><h1 id="文件搜索命令-locate"><a href="#文件搜索命令-locate" class="headerlink" title="文件搜索命令 locate"></a>文件搜索命令 locate</h1><p>locate <code>秒级搜索</code></p><p>但是有一个问题,对于刚刚新建的文件或目录,实时的查找出来,需要更新一下数据库</p><p>相对于<code>find</code>来说,find查找虽然没有那么快,但它是实时搜索的,没有更新的这一个步骤</p><p>在centos7中,locate好像没有了,需要下载一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">yum -y install mlocate</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">mkdir /syz</span><br><span class="line"><span class="comment"># 更新数据库,不然无法找到刚刚新建的目录</span></span><br><span class="line"><span class="comment"># 注意: 临时资料库中的文件是查找不到的,如/tmp</span></span><br><span class="line">updatedb</span><br><span class="line"><span class="comment"># 查找</span></span><br><span class="line">locate /syz</span><br><span class="line"><span class="comment"># 如果出现一些文件无法找到的情况,那是因为收到了限制</span></span><br><span class="line"><span class="comment"># 修改配置文件,解除限制</span></span><br><span class="line">vim /etc/updatedb.conf  <span class="comment">#把yes改为no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找不区分大小写</span></span><br><span class="line">touch /SyZ.txt </span><br><span class="line">updatedb</span><br><span class="line">locate -i syz</span><br></pre></td></tr></table></figure><h1 id="which"><a href="#which" class="headerlink" title="which"></a>which</h1><p>快速查找命令的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> ls</span><br><span class="line">    <span class="built_in">alias</span> ls=<span class="string">'ls --color=auto'</span></span><br><span class="line">/usr/bin/ls</span><br><span class="line"><span class="built_in">which</span> rm</span><br><span class="line">    <span class="built_in">alias</span> rm=<span class="string">'rm -i'</span></span><br><span class="line">/usr/bin/rm</span><br><span class="line"><span class="comment"># 其实在Linux系统中,我们执行rm命令时,之所以会再次提醒确认删除</span></span><br><span class="line"><span class="comment"># 不是rm这个命令特有的,而是 rm 通过 alias 映射成了 rm -i</span></span><br></pre></td></tr></table></figure><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>是不是感觉学过了?</p><p>扩展嘛,再来深入一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不区分大小写的查找</span></span><br><span class="line">touch /syz.txt</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"Syz\nsyz\nSyz\nasdasfsSyz\nafaaaesyz\n12412421\nwrfwafsa"</span> &gt;&gt; /syz.txt</span><br><span class="line">grep -i <span class="string">"syz"</span> /syz.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查找</span></span><br><span class="line">touch /test.txt</span><br><span class="line">vim /test.txt</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填入以下内容</span></span><br><span class="line">    --------------------------</span><br><span class="line">    <span class="comment"># this is a test</span></span><br><span class="line">    hello world</span><br><span class="line">    <span class="comment"># hello world</span></span><br><span class="line">    hi!</span><br><span class="line">    --------------------------</span><br><span class="line">grep -v <span class="string">"^#"</span> /test.txt  <span class="comment"># 只输出不带有 # 的行</span></span><br></pre></td></tr></table></figure><h1 id="who"><a href="#who" class="headerlink" title="who"></a>who</h1><p>查看当前所有用户的登录情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">who</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以什么用户身份登录的  登录方式    登录的时间  (登录机器的IP段)</span></span><br><span class="line">root     tty1         2019-10-08 16:20</span><br><span class="line">root     pts/0        2019-10-08 16:20 (10.211.55.2)</span><br><span class="line">root     pts/1        2019-10-08 21:46 (10.211.55.2)</span><br><span class="line"><span class="comment"># 解析:</span></span><br><span class="line"><span class="comment"># tty 表示为本地终端登录的</span></span><br><span class="line"><span class="comment"># pts 表示为远程登录的</span></span><br></pre></td></tr></table></figure><h1 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h1><p>查看服务器已经运行的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uptime</span><br><span class="line">    <span class="comment"># 初始时间 状态 已经运行的时间  当前总共几个用户登录 负载均衡</span></span><br><span class="line">    20:50:09 up  4:30,  2 users,  load average: 0.00, 0.01, 0.05</span><br></pre></td></tr></table></figure><h1 id="w"><a href="#w" class="headerlink" title="w"></a>w</h1><p>查看 uptime who 的综合信息(比这两者还要多一点东西)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">w</span><br><span class="line"></span><br><span class="line">21:48:25 up  5:28,  3 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     tty1                      16:20    7:29   0.02s  0.02s -bash</span><br><span class="line">root     pts/0    10.211.55.2      16:20   57:05   0.24s  0.24s -bash</span><br><span class="line">root     pts/1    10.211.55.2      21:46    1.00s  0.04s  0.03s w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析:</span></span><br><span class="line"><span class="comment"># 第一行: 机器开机时间  状态    已经运行的时间  已经登陆了几个用户  负载均衡</span></span><br><span class="line"><span class="comment"># 第三行: 用户身份  登录方式    来自哪个网段    何时登录的  累计空闲时间    累计占用CPU资源的时间    占用CPU资源的时间  当前执行的命令</span></span><br></pre></td></tr></table></figure><h1 id="write"><a href="#write" class="headerlink" title="write"></a>write</h1><p>给某个在线用户发送信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useradd syz</span><br><span class="line">passwd syz</span><br><span class="line"><span class="comment"># 重新打开一个终端,以syz用户登录</span></span><br><span class="line"><span class="comment"># 回到root用户下的终端中,给syz用户发送信息</span></span><br><span class="line">write syz</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后最好回车一下,然后ctrl + d 结束,发送</span></span><br><span class="line"><span class="comment"># 然后就会在syz用户的终端下收到消息</span></span><br></pre></td></tr></table></figure><h1 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h1><p>给所有的在线用户发送消息(包括自己)</p><p>这里不再演示</p><h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p>/bin/ping<br>测试网络的连通性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -c : 指定发送的次数</span></span><br><span class="line">ping -c 3 baidu.com</span><br><span class="line"><span class="comment"># 结尾的时间越短,证明网络连通性越好</span></span><br></pre></td></tr></table></figure><h1 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h1><p>功能:查看和设置网卡信息<br>英文全称:interface configure<br>路径:/sbin/ifconfig<br>使用权限:root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本机IP地址</span></span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置临时IP地址</span></span><br><span class="line"><span class="comment"># 语法: ifconfig 网卡名称 IP地址</span></span><br><span class="line">ifconfig eth0 10.0.0.10</span><br></pre></td></tr></table></figure><h1 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h1><p>功能:查看邮件或给用户发送邮件<br>路径:/bin/mail<br>执行权限:所有用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给 syz 用户发送邮件</span></span><br><span class="line">mail syz</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl + d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看邮件</span></span><br><span class="line">mail</span><br><span class="line"><span class="comment"># h : 列出所有邮件</span></span><br><span class="line"><span class="comment"># 数字 : 输入列出的邮件的索引号即可查看对应的邮件内容</span></span><br><span class="line"><span class="comment"># d 数字 : 删除相应的邮件</span></span><br></pre></td></tr></table></figure><h1 id="last-和-lastlog"><a href="#last-和-lastlog" class="headerlink" title="last 和 lastlog"></a>last 和 lastlog</h1><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>功能:列出现在和过去所有用户的<code>登陆信息</code>,包括系统什么时候<code>重启</code>过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">last</span><br><span class="line"></span><br><span class="line">    root     pts/3        10.211.55.2      Tue Oct  8 22:55 - 22:55  (00:00)    </span><br><span class="line">    root     pts/1        10.211.55.2      Tue Oct  8 22:55   still logged <span class="keyword">in</span>   </span><br><span class="line">    syz      pts/2        10.211.55.2      Tue Oct  8 22:54   still logged <span class="keyword">in</span>   </span><br><span class="line">    root     pts/1        10.211.55.2      Tue Oct  8 22:22 - 22:55  (00:32)    </span><br><span class="line">    root     pts/1        10.211.55.2      Tue Oct  8 21:46 - 22:22  (00:36)    </span><br><span class="line">    root     pts/0        10.211.55.2      Tue Oct  8 16:20   still logged <span class="keyword">in</span>   </span><br><span class="line">    root     tty1                          Tue Oct  8 16:20   still logged <span class="keyword">in</span>   </span><br><span class="line">    reboot   system boot  3.10.0-693.el7.x Tue Oct  8 16:19 - 23:38  (07:18)    </span><br><span class="line">    root     pts/0        10.211.55.2      Mon Oct  7 19:26 - down   (02:01)    </span><br><span class="line">    root     tty1                          Mon Oct  7 19:24 - 21:27  (02:03)    </span><br><span class="line">    reboot   system boot  3.10.0-693.el7.x Mon Oct  7 19:23 - 21:27  (02:04)    </span><br><span class="line">    root     pts/0        10.211.55.2      Sun Oct  6 11:39 - crash (1+07:44)   </span><br><span class="line">    root     tty1                          Sun Oct  6 11:18 - 13:14  (01:56)    </span><br><span class="line">    reboot   system boot  3.10.0-693.el7.x Sun Oct  6 11:17 - 21:27 (1+10:10)   </span><br><span class="line"></span><br><span class="line">    wtmp begins Sun Oct  6 11:17:26 2019</span><br></pre></td></tr></table></figure><h2 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h2><p>功能:只查看所有用户(包括不可登录的用户)的<code>最后一次</code>的登录信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有用户(包括不可登录的用户)的最后一次的登录信息</span></span><br><span class="line">lastlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过用户的uid查看对应用户的最后一次登录信息</span></span><br><span class="line"><span class="comment"># 查看root用户的最后一次登录信息</span></span><br><span class="line">lastlog -u 0</span><br><span class="line">    用户名           端口     来自             最后登陆时间</span><br><span class="line">    root             pts/3    10.211.55.2      二 10月  8 22:55:46 +0800 2019</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看syz用户的最后一次登录信息</span></span><br><span class="line"><span class="comment"># 首先查看用户syz的uid</span></span><br><span class="line">cat /etc/passwd | grep syz</span><br><span class="line">    syz:x:1002:1002::/home/syz:/bin/bash</span><br><span class="line">lastlog -u 1002</span><br><span class="line">    用户名           端口     来自             最后登陆时间</span><br><span class="line">    syz              pts/2    10.211.55.2      二 10月  8 22:54:35 +0800 2019</span><br></pre></td></tr></table></figure><h1 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h1><p>功能:显示数据包到主机间的路径,可以用来排除网络在哪里出现了问题<br>执行权限:所有用户<br>语法:traceroute 网址(或域名)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">traceroute www.imau.edu.cn</span><br><span class="line">    <span class="comment"># 可能是因为网络的问题,到后面太慢,所以只粘贴了一点</span></span><br><span class="line">    traceroute to www.imau.edu.cn (222.74.205.105), 64 hops max, 52 byte packets</span><br><span class="line">    1  bogon (192.168.43.249)  3.731 ms  2.668 ms  3.235 ms</span><br><span class="line">    2  * * *</span><br><span class="line">    3  bogon (172.20.1.89)  96.085 ms  25.947 ms  24.937 ms</span><br><span class="line">    4  * * *</span><br><span class="line">    5  111.56.28.17 (111.56.28.17)  39.030 ms  53.792 ms  20.011 ms</span><br><span class="line">    6  221.183.13.109 (221.183.13.109)  17.659 ms  33.792 ms  24.449 ms</span><br><span class="line">    7  * * *</span><br><span class="line">    8  * * *</span><br><span class="line">    9  221.183.66.2 (221.183.66.2)  106.024 ms</span><br><span class="line">        221.183.30.58 (221.183.30.58)  39.249 ms *</span><br><span class="line">    10  202.97.57.197 (202.97.57.197)  185.827 ms</span><br><span class="line">        202.97.88.233 (202.97.88.233)  52.745 ms  58.777 ms</span><br><span class="line">    11  202.97.28.190 (202.97.28.190)  92.896 ms</span><br><span class="line">        202.97.28.194 (202.97.28.194)  117.207 ms  114.305 ms</span><br><span class="line">    12  219.148.161.234 (219.148.161.234)  69.864 ms</span><br><span class="line">        219.148.167.170 (219.148.167.170)  76.444 ms</span><br><span class="line">        219.148.167.150 (219.148.167.150)  63.254 ms</span><br><span class="line">    13  * * *</span><br><span class="line">    14  123.178.212.154 (123.178.212.154)  136.865 ms</span><br><span class="line">        123.178.212.150 (123.178.212.150)  68.919 ms  69.143 ms</span><br><span class="line">    15  * * *</span><br><span class="line">    16  * * *</span><br><span class="line">    17  * * *</span><br><span class="line">    18  * * *</span><br><span class="line">    19  * * *</span><br></pre></td></tr></table></figure><h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><p>功能:显示网络相关信息<br>执行权限:所有用户<br>语法:netstat [选项]</p><p>选项:</p><ul><li>-t : TCP协议</li><li>-u : UDP协议</li><li>-l : 监听</li><li>-r : 路由</li><li>-n : 显示IP地址和端口号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 1. 查看本机监听的端口</span></span><br><span class="line">netstat -tlun</span><br><span class="line"><span class="comment"># 2. 查看本机所有的网络连接</span></span><br><span class="line"><span class="comment"># -a : 表示 all</span></span><br><span class="line">netstat -an</span><br><span class="line"><span class="comment"># 3. 查看本机路由表</span></span><br><span class="line">netstat -rn</span><br></pre></td></tr></table></figure><h1 id="nmtui"><a href="#nmtui" class="headerlink" title="nmtui"></a>nmtui</h1><p>功能:配置网络</p><p>配置完记得要执行 <code>systemctl restart network</code> 才能生效</p><h1 id="mount-挂载"><a href="#mount-挂载" class="headerlink" title="mount 挂载"></a>mount 挂载</h1><p>这是对<code>Linux笔记</code>中的 mount 的扩展</p><p>最初,CentOS没有了图形界面,我不知道如何才能把镜像光驱挂载到本地磁盘</p><p>现在知道了</p><p>👨‍💻‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先让虚拟机连接上 镜像文件</span></span><br><span class="line">mkdir /mnt/centos</span><br><span class="line">mount -t iso9660 /dev/sr0 /mnt/centos</span><br><span class="line"><span class="comment"># 其实可以简写</span></span><br><span class="line">mount /dev/sr0 /mnt/centos</span><br></pre></td></tr></table></figure><h1 id="chage-查看密码信息"><a href="#chage-查看密码信息" class="headerlink" title="chage 查看密码信息"></a>chage 查看密码信息</h1><p>功能:查看用户密码相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:chage [选项] 用户名</span></span><br><span class="line"><span class="comment"># 选项:</span></span><br><span class="line">    -l : 列出用户的详细密码信息</span><br><span class="line">    -d : 修改密码最后一次更改日期</span><br><span class="line">    -m : 两次密码修改间隔</span><br><span class="line">    -M : 密码有效期</span><br><span class="line">    -W : 密码过期前警告天数</span><br><span class="line">    -I : 密码过期后宽限天数</span><br><span class="line">    -E : 密码失效时间</span><br><span class="line"></span><br><span class="line">chage -l syz</span><br><span class="line"></span><br><span class="line">    最近一次密码修改时间：10月 08, 2019</span><br><span class="line">    密码过期时间：从不</span><br><span class="line">    密码失效时间：从不</span><br><span class="line">    帐户过期时间：从不</span><br><span class="line">    两次改变密码之间相距的最小天数：0</span><br><span class="line">    两次改变密码之间相距的最大天数：99999</span><br><span class="line">    在密码过期之前警告的天数：7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的内容弄了解即可,不是太重要,因为这样还不如直接进入shadow文件内修改来的直观</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重要的一条命令:</span></span><br><span class="line">chage -d 0 syz  <span class="comment">#该用户下次登录时,必须先修改密码</span></span><br><span class="line"><span class="comment"># 不要使用root用户直接su进入该用户,应该新开一个终端登录该用户</span></span><br></pre></td></tr></table></figure><h1 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h1><p>英文意思是 change attribute</p><p>注意:root 超级管理员也不可以跨越<code>chattr</code>设定的规则!!!</p><p>暗叫一声:666…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: chattr &#123;+ - =&#125; [选项] 文件或目录名</span></span><br><span class="line"><span class="comment"># 选项:</span></span><br><span class="line">    -i : 如果对文件设置了 i 属性,那么不允许对文件进行删除和改名,也不能添加和修改数据</span><br><span class="line">         如果对目录设置了 i 属性,那么只能修改目录下文件的数据,但不允许新建和删除文件</span><br><span class="line">    -a : 如果对文件设置了 a 属性,那么只能在文件中增加数据,不能删除和修改数据</span><br><span class="line">         如果对目录设置了 a 属性,那么只允许在目录中新建和修改文件,但是不允许删除</span><br><span class="line"></span><br><span class="line">********************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. i 的测试</span></span><br><span class="line"><span class="comment"># 1.1 i 之文件下的测试</span></span><br><span class="line"><span class="comment"># 新建一个名为111.txt的文件</span></span><br><span class="line">touch 111.txt</span><br><span class="line"><span class="comment"># 给111.txt设置chattr</span></span><br><span class="line">chattr +i 111.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前目录下是否设置了chattr</span></span><br><span class="line"><span class="comment"># 语法: lsattr [选项]</span></span><br><span class="line"><span class="comment"># 选项:</span></span><br><span class="line">    -a : 查看所有</span><br><span class="line">    -d : 查看当前目录本身,不查看子目录</span><br><span class="line">lsattr -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试在111.txt中添加数据</span></span><br><span class="line"><span class="built_in">echo</span> hello &gt;&gt; 111.txt</span><br><span class="line">    -bash: 111.txt: 权限不够</span><br><span class="line"><span class="comment"># 尝试删除111.txt</span></span><br><span class="line">rm -rf 111.txt</span><br><span class="line">    rm: 无法删除<span class="string">"111.txt"</span>: 不允许的操作</span><br><span class="line"></span><br><span class="line">*********************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2 i 之目录下的测试</span></span><br><span class="line">mkdir /<span class="built_in">test</span></span><br><span class="line">touch /<span class="built_in">test</span>/aaa.txt</span><br><span class="line">chattr +i /<span class="built_in">test</span></span><br><span class="line">lsattr -a /<span class="built_in">test</span></span><br><span class="line"><span class="built_in">echo</span> hello &gt;&gt; /<span class="built_in">test</span>/aaa.txt     <span class="comment">#可以对该目录下的文件写入数据</span></span><br><span class="line">touch /<span class="built_in">test</span>/bbb.txt     <span class="comment">#但是不能创建文件</span></span><br><span class="line">    touch: 无法创建<span class="string">"/test/bbb.txt"</span>: 权限不够</span><br><span class="line">rm -rf /<span class="built_in">test</span>/aaa.txt</span><br><span class="line">    rm: 无法删除<span class="string">"/test/aaa.txt"</span>: 权限不够</span><br><span class="line"></span><br><span class="line">*********************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. a 的测试</span></span><br><span class="line"><span class="comment"># 2.1 a 之文件下的测试</span></span><br><span class="line">touch aaa</span><br><span class="line"><span class="built_in">echo</span> hello &gt;&gt; aaa</span><br><span class="line">cat aaa</span><br><span class="line">chattr +a aaa</span><br><span class="line">lsattr -a</span><br><span class="line"><span class="built_in">echo</span> 111 &gt;&gt; aaa     <span class="comment">#向aaa文件内追加新数据,不修改原来的数据</span></span><br><span class="line"><span class="built_in">echo</span> 222 &gt; aaa      <span class="comment">#向aaa文件内覆盖写入数据,尝试修改原来的数据,发现没有权限</span></span><br><span class="line">    -bash: aaa: 不允许的操作</span><br><span class="line"></span><br><span class="line">*********************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 a 之目录下的测试</span></span><br><span class="line">mkdir /test2</span><br><span class="line">chattr +a /test2</span><br><span class="line">lsattr -a /test2</span><br><span class="line">touch /test2/aaa</span><br><span class="line">touch /test2/bbb</span><br><span class="line"><span class="built_in">echo</span> aaa &gt;&gt; /test2/aaa</span><br><span class="line">rm -rf /test2/aaa</span><br><span class="line">    rm: 无法删除<span class="string">"/test2/aaa"</span>: 不允许的操作</span><br><span class="line"></span><br><span class="line">*********************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结一下</span></span><br><span class="line"></span><br><span class="line">    i 选项相对于 a 选项来说要严格一些</span><br><span class="line"></span><br><span class="line">    i 总的来说就是: 不可以增加 不可以删除</span><br><span class="line">    a 总的来说就是: 可以增加,不可以删除</span><br><span class="line"></span><br><span class="line">    两者对于目录的chattr设置,目录下的文件都可以进行修改</span><br></pre></td></tr></table></figure><h1 id="sudo-权限"><a href="#sudo-权限" class="headerlink" title="sudo 权限"></a>sudo 权限</h1><p>root 用户将只能<code>超级用户</code>执行的命令赋予<code>普通用户</code>执行</p><p>注意: <code>sudo</code>的操作对象是系统命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">visudo  <span class="comment">#实际上打开的是 /etc/sudoers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#用户   被管理主机的地址=(可以使用的身份)   授权命令(需要使用绝对路径)</span></span><br><span class="line">    rootALL=(ALL) ALL</span><br><span class="line">    <span class="comment">#组名   ...</span></span><br><span class="line">    %wheelALL=(ALL)ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 打开 visudo</span></span><br><span class="line"><span class="comment"># 在 rootALL=(ALL) ALL 下面加入一行</span></span><br><span class="line">syz 10.211.55.5 /sbin/useradd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至该用户</span></span><br><span class="line">su - syz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看该用户在 sudo 中可以执行的命令</span></span><br><span class="line">sudo -l</span><br><span class="line">    [sudo] syz 的密码：</span><br><span class="line">    匹配 %2<span class="variable">$s</span> 上 %1<span class="variable">$s</span> 的默认条目：</span><br><span class="line">        !visiblepw, always_set_home, match_group_by_gid, env_reset, env_keep=<span class="string">"COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR</span></span><br><span class="line"><span class="string">        LS_COLORS"</span>, env_keep+=<span class="string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE"</span>, env_keep+=<span class="string">"LC_COLLATE</span></span><br><span class="line"><span class="string">        LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES"</span>, env_keep+=<span class="string">"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER</span></span><br><span class="line"><span class="string">        LC_TELEPHONE"</span>, env_keep+=<span class="string">"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY"</span>,</span><br><span class="line">        secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin</span><br><span class="line"></span><br><span class="line">    用户 syz 可以在 centos-server 上运行以下命令：</span><br><span class="line">        (root) /sbin/useradd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试该命令</span></span><br><span class="line">sudo useradd syz1  <span class="comment">#不报错,即运行成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">*********************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用其他用户测试</span></span><br><span class="line">su - zhangsan</span><br><span class="line">sudo useradd zhangsan1</span><br><span class="line">    [sudo] zhangsan 的密码：</span><br><span class="line">    zhangsan 不在 sudoers 文件中。此事将被报告。</span><br><span class="line"></span><br><span class="line">*********************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个例子只是做示范,警告同学们不要这么操作</span></span><br><span class="line"></span><br><span class="line">visudo</span><br><span class="line"></span><br><span class="line">    syz     ALL=/usr/bin/vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 这是很危险的</span></span><br><span class="line"><span class="comment"># 因为这样的话,执行sudo命令后代表syz用户拥有了和root一样的vim编辑权限</span></span><br><span class="line"><span class="comment"># 甚至可以编辑/etc/passwd</span></span><br><span class="line">su - syz</span><br><span class="line">sudo /usr/bin/vim /etc/passwd   <span class="comment">#可以不写绝对路径,直接写 vim</span></span><br><span class="line"><span class="comment"># 可以修改并保存,很危险</span></span><br></pre></td></tr></table></figure><h1 id="文件系统常用命令"><a href="#文件系统常用命令" class="headerlink" title="文件系统常用命令"></a>文件系统常用命令</h1><p>df du fsck dumpe2fs</p><h2 id="df-文件系统查看命令"><a href="#df-文件系统查看命令" class="headerlink" title="df-文件系统查看命令"></a>df-文件系统查看命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:df [选项] 挂载点</span></span><br><span class="line"><span class="comment"># 选项:</span></span><br><span class="line">    -a : 显示所有文件系统信息,包括特殊文件系统(如/proc,/sysfs)</span><br><span class="line">    -h : 使用习惯单位显示容量</span><br><span class="line">    -T : 显示文件系统类型(KB,MB,GB)</span><br><span class="line">    -m : 以 MB 为单位显示容量</span><br><span class="line">    -k : 以 KB 为单位显示容量</span><br><span class="line"><span class="comment"># 常用</span></span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h2 id="du-统计目录或文件大小"><a href="#du-统计目录或文件大小" class="headerlink" title="du-统计目录或文件大小"></a>du-统计目录或文件大小</h2><p>一般用来统计目录的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: du [选项] [目录或文件名]</span></span><br><span class="line"><span class="comment"># 选项:</span></span><br><span class="line">    -a : 显示每个子文件的磁盘占用量</span><br><span class="line">    -h : 使用习惯单位显示磁盘占用量</span><br><span class="line">    -s : 统计总占用量而不列出目录和文件的占用量</span><br><span class="line"><span class="comment"># 常用</span></span><br><span class="line">du -sh /</span><br></pre></td></tr></table></figure><h2 id="df-与-du-的区别"><a href="#df-与-du-的区别" class="headerlink" title="df 与 du 的区别"></a>df 与 du 的区别</h2><p><code>df</code> 命令是从文件系统考虑的,不光要考虑文件占用的空间,还要统计被命令或程序占用的空间(最常见的就是文件已经被删除,但是程序并没有释放空间)</p><p><code>du</code> 命令是面向文件的,只会计算目录或文件的占用的空间</p><h2 id="fsck-文件系统修复命令"><a href="#fsck-文件系统修复命令" class="headerlink" title="fsck-文件系统修复命令"></a>fsck-文件系统修复命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: fsck [选项] 分区设备文件名</span></span><br><span class="line"><span class="comment"># 选项:</span></span><br><span class="line">    -a : 不用显示用户提醒,自动修复文件系统</span><br><span class="line">    -y : 自动修复,和 -a 选项作用一致,不过有些文件系统只支持 -y</span><br></pre></td></tr></table></figure><h2 id="dumpe2fs-显示磁盘状态"><a href="#dumpe2fs-显示磁盘状态" class="headerlink" title="dumpe2fs-显示磁盘状态"></a>dumpe2fs-显示磁盘状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: dumpe2fs 分区设备文件名</span></span><br><span class="line"></span><br><span class="line">dumpe2fs /dev/sdb1</span><br><span class="line"></span><br><span class="line">    dumpe2fs 1.42.9 (28-Dec-2013)   </span><br><span class="line">    Filesystem volume name:   &lt;none&gt;    <span class="comment">#卷标</span></span><br><span class="line">    Last mounted on:          &lt;not available&gt;   <span class="comment">#挂载点</span></span><br><span class="line">    Filesystem UUID:          49900854-b38a-4f2d-80bb-825863b86684  <span class="comment">#分区UUID</span></span><br><span class="line">    Filesystem magic number:  0xEF53</span><br><span class="line">    Filesystem revision <span class="comment">#:    1 (dynamic)</span></span><br><span class="line">    Filesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize</span><br><span class="line">    Filesystem flags:         signed_directory_hash </span><br><span class="line">    Default mount options:    user_xattr acl</span><br><span class="line">    Filesystem state:         clean</span><br><span class="line">    Errors behavior:          Continue</span><br><span class="line">    Filesystem OS <span class="built_in">type</span>:       Linux</span><br><span class="line">    Inode count:              131072    <span class="comment">#i节点数</span></span><br><span class="line">    Block count:              524288    <span class="comment">#块数量</span></span><br><span class="line">    Reserved block count:     26214</span><br><span class="line">    Free blocks:              498132</span><br><span class="line">    Free inodes:              131061</span><br><span class="line">    First block:              0</span><br><span class="line">    Block size:               4096  <span class="comment">#块大小</span></span><br><span class="line">    Fragment size:            4096</span><br><span class="line">    Group descriptor size:    64</span><br><span class="line">    Reserved GDT blocks:      255</span><br><span class="line">    Blocks per group:         32768</span><br><span class="line">    Fragments per group:      32768</span><br><span class="line">    Inodes per group:         8192</span><br><span class="line">    Inode blocks per group:   512</span><br><span class="line">    Flex block group size:    16</span><br><span class="line">    Filesystem created:       Sun Oct  6 11:52:35 2019</span><br><span class="line">    Last mount time:          Sun Oct  6 12:00:17 2019</span><br><span class="line">    Last write time:          Sun Oct  6 13:14:11 2019</span><br><span class="line">    Mount count:              1</span><br><span class="line">    Maximum mount count:      -1</span><br><span class="line">    Last checked:             Sun Oct  6 11:52:35 2019</span><br><span class="line">    Check interval:           0 (&lt;none&gt;)</span><br><span class="line">    Lifetime writes:          97 MB</span><br><span class="line">    Reserved blocks uid:      0 (user root)</span><br><span class="line">    Reserved blocks gid:      0 (group root)</span><br><span class="line">    First inode:              11</span><br><span class="line">    Inode size:          256</span><br><span class="line">    Required extra isize:     28</span><br><span class="line">    Desired extra isize:      28</span><br><span class="line">    Journal inode:            8</span><br><span class="line">    Default directory <span class="built_in">hash</span>:   half_md4</span><br><span class="line">    Directory Hash Seed:      214be6cc-19b8-4bff-92ed-13a372f7b4b1</span><br><span class="line">    Journal backup:           inode blocks</span><br><span class="line">    Journal features:         journal_64bit</span><br><span class="line">    日志大小:             64M</span><br><span class="line">    Journal length:           16384</span><br><span class="line">    Journal sequence:         0x00000004</span><br><span class="line">    Journal start:            0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux笔记</title>
      <link href="/2019/09/29/Linux%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/09/29/Linux%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gixjr757h0j30sg0lc0tx.jpg" alt="linux_tubiao" style="zoom:67%;"><a id="more"></a><h1 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>摘自于<a href="https://baike.baidu.com/item/linux/27050" target="_blank" rel="noopener">百度百科</a></p><ol><li><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。伴随着互联网的发展，Linux得到了来自全世界软件爱好者、组织、公司的支持。它除了在服务器操作系统方面保持着强劲的发展势头以外，在个人电脑、嵌入式系统上都有着长足的进步。使用者不仅可以直观地获取该操作系统的实现机制，而且可以根据自身的需要来修改完善这个操作系统，使其最大化地适应用户的需要.</p></li><li><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux操作系统不仅仅是被网络运维人员当作服务器使用，Linux既可以当作服务器，又可以当作网络防火墙是Linux的 一大亮点。</p></li><li><p>Linux与其他操作系统相比 ，具有开放源码、没有版权、技术社区用户多等特点 ，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈 ，经过适当的配置就可实现路由器的功能。这些特点使得Linux成为开发路由交换设备的理想开发平台。</p></li></ol><h2 id="提示符"><a href="#提示符" class="headerlink" title="提示符"></a>提示符</h2><p><code>[root@localhost ~]#</code></p><p><code>#</code> 表示当前权限为超级管理员root(最高的管理级别,说白了就是我想干啥就干啥)<br><code>$</code> 表示普通用户的权限<br><code>root</code> 表示当前用户为root<br><code>@</code> 表示在本地<br><code>localhost</code> 表示主机的名称<br><code>~</code> 表示当前的路径(注意:<code>~</code>是用户家目录的简写,root的家目录为<code>/root</code>,普通用户的家目录为<code>/home/用户名</code>)</p><h2 id="查询-帮助命令"><a href="#查询-帮助命令" class="headerlink" title="查询/帮助命令"></a>查询/帮助命令</h2><h3 id="查看系统内核版本"><a href="#查看系统内核版本" class="headerlink" title="查看系统内核版本"></a>查看系统内核版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h3 id="ls命令-查看指定-当前路径中有哪些文件或目录"><a href="#ls命令-查看指定-当前路径中有哪些文件或目录" class="headerlink" title="ls命令:查看指定/当前路径中有哪些文件或目录"></a><code>ls</code>命令:查看指定/当前路径中有哪些文件或目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用 ls, 表示显示当前路径下的内容,其余ls的复杂命令同理</span></span><br><span class="line">ls</span><br><span class="line">ll</span><br><span class="line">ll -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示指定目录下内容的名称</span></span><br><span class="line">ls /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定目录下内容的详细信息,简写为 ll</span></span><br><span class="line">ls -l</span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接查看当前目录的信息</span></span><br><span class="line">ll -d</span><br></pre></td></tr></table></figure><h3 id="ll-ls-l-每个字段的含义"><a href="#ll-ls-l-每个字段的含义" class="headerlink" title="ll(ls -l):每个字段的含义"></a>ll(ls -l):每个字段的含义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看根目录下的所有文件/目录的详细内容</span></span><br><span class="line">ll /</span><br><span class="line"></span><br><span class="line">total 68</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Aug  8  2018 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Sep 17 11:01 boot</span><br><span class="line">drwxr-xr-x   2 root root  4096 Jan 21  2019 data</span><br><span class="line">drwxr-xr-x  19 root root  2980 Sep 17 12:38 dev</span><br><span class="line">drwxr-xr-x. 87 root root  4096 Sep 29 17:39 etc</span><br><span class="line">drwxr-xr-x.  8 root root  4096 Sep 29 17:09 home</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Aug  8  2018 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.  1 root root     9 Aug  8  2018 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.  2 root root 16384 Aug  8  2018 lost+found</span><br><span class="line">drwxr-xr-x.  2 root root  4096 Apr 11  2018 media</span><br><span class="line">drwxr-xr-x.  2 root root  4096 Apr 11  2018 mnt</span><br><span class="line">drwxr-xr-x.  4 root root  4096 Sep 17 11:04 opt</span><br><span class="line">dr-xr-xr-x  91 root root     0 Sep 17 12:38 proc</span><br><span class="line">dr-xr-x---. 13 root root  4096 Sep 29 17:28 root</span><br><span class="line">drwxr-xr-x  26 root root   940 Sep 20 16:11 run</span><br><span class="line">lrwxrwxrwx.  1 root root     8 Aug  8  2018 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.  2 root root  4096 Apr 11  2018 srv</span><br><span class="line">dr-xr-xr-x  13 root root     0 Sep 17 16:44 sys</span><br><span class="line">drwxrwxrwt.  8 root root  4096 Sep 29 17:41 tmp</span><br><span class="line">drwxr-xr-x. 13 root root  4096 Aug  8  2018 usr</span><br><span class="line">drwxr-xr-x. 19 root root  4096 Jan 21  2019 var</span><br></pre></td></tr></table></figure><p>我们会发现每个文件或目录都具有相同的格式<br>解析:</p><p>以根目录下的etc为例说明<br>drwxr-xr-x. 87 root root  4096 Sep 29 17:39 etc</p><ol><li>开头第一个字母:</li></ol><ul><li><code>-</code> : 表示文件</li><li><code>d</code> : 表示目录</li><li><code>f</code> : 表示块设备文件</li><li><code>c</code> : 表示字符设备文件</li><li><code>l</code> : 表示链接文件</li><li><code>p</code> : 管道文件</li><li><code>s</code> : 套接字文件</li></ul><ol start="2"><li>rwxr-xr-x</li></ol><p>分为三个用户类型<br>前三个字母属于文件所有者的权限(u)<br>中间三个字母属于组内用户的权限(g)<br>最后三个字母属于组外用户的权限(o)</p><p>文件下:</p><ul><li><code>-</code> : 没有对应的权限</li><li><code>r</code> : 可读</li><li><code>w</code> : 可写</li><li><code>x</code> : 可执行</li></ul><p>目录下:</p><ul><li><code>-</code> : 没有对应的权限</li><li><code>r</code> : 可查询此目录下文件名数据，比如ls命令</li><li><code>w</code> : 可以建立新目录/删除已存在目录/修改已存在的目录</li><li><code>x</code> : 具有执行的权限，简单地说，就是可以将该目录转换成家目录的能力，比如cd 命令。注意，x权限对于目录是极其重要的，如果没有该目录，表示你不能切换到该目录，更不能对其子目录或者文件进行操作，即使你有“r/w”权限。</li></ul><ol start="3"><li><p>87<br> 表示硬链接个数</p></li><li><p>root root<br> 第一个root表示文件所有者<br> 第二个root表示组名</p></li><li><p>4096<br> 表示文件的大小,单位为字节</p></li><li><p>Sep 29 17:39<br> 表示文件最后修改日期</p></li><li><p>etc<br> 表示文件名</p></li></ol><h2 id="新建文件-目录"><a href="#新建文件-目录" class="headerlink" title="新建文件/目录"></a>新建文件/目录</h2><ul><li>mkdir : 新建目录</li><li>touch : 新建文件</li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录下新建一个名为aaa的目录</span></span><br><span class="line">mkdir /aaa</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">ll /</span><br></pre></td></tr></table></figure><p>进阶:</p><p>不加参数选项的mkdir只能建一层目录<br>如果想要建立多层目录的话?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录下新建目录 /bbb1/bbb2/bbb3</span></span><br><span class="line">mkdir /bbb1/bbb2/bbb3 <span class="comment"># 发现行不通</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上 -p 选项</span></span><br><span class="line">mkdir -p /bbb1/bbb2/bbb3 <span class="comment"># 成功</span></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">ll /bbb1/bbb2</span><br></pre></td></tr></table></figure><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录下新建一个名为qqq.txt的文件</span></span><br><span class="line">touch /qqq.txt</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">ll /</span><br></pre></td></tr></table></figure><p>进阶:</p><p>如果想要同时创建多个文件的话?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录下同时创建名为q.txt w.txt e.txt 的三个文件</span></span><br><span class="line">touch /&#123;q,w,e&#125;.txt</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">ll /</span><br></pre></td></tr></table></figure><h2 id="删除文件-目录"><a href="#删除文件-目录" class="headerlink" title="删除文件/目录"></a>删除文件/目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除根目录下的 q.txt</span></span><br><span class="line">rm /q.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴力删除(不会出现操作提醒,直接删除)</span></span><br><span class="line">rm -rf /w.txt</span><br></pre></td></tr></table></figure><h2 id="chmod-更改文件-目录权限"><a href="#chmod-更改文件-目录权限" class="headerlink" title="chmod 更改文件/目录权限"></a>chmod 更改文件/目录权限</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先在/opt/下创建一个111.txt文件</span></span><br><span class="line">touch /opt/111.txt</span><br><span class="line"><span class="comment"># 改为满权限</span></span><br><span class="line">chmod 777 /opt/111.txt</span><br><span class="line"><span class="comment"># 递归赋予权限(使"此时"该目录下所有的文件或目录的权限都变为777)</span></span><br><span class="line">mkdir /syz</span><br><span class="line">chmod -R 777 /syz</span><br><span class="line">ll /</span><br><span class="line"><span class="comment"># 在该目录下新建一个syz.txt文件</span></span><br><span class="line">touch /syz/syz.txt</span><br><span class="line">ll</span><br><span class="line">    -rw-r--r--. 1 root root 0 10月  8 18:54 syz.txt</span><br><span class="line"><span class="comment"># 那么现在有一个问题:</span></span><br><span class="line"><span class="comment"># 现在这个syz.txt,普通用户可以删除吗?</span></span><br><span class="line"><span class="comment"># 你可能会说不可以,因为这个文件的普通用户权限为只读,没有可写可执行权限</span></span><br><span class="line"><span class="comment"># 但是,其实是可以的</span></span><br><span class="line"><span class="comment"># 因为,这个文件是在 777 权限的目录下</span></span><br><span class="line"><span class="comment"># 所以,不懂得童鞋,去百度一下,目录的rwx 与 文件的rwx有什么不同</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 算了,说一下吧</span></span><br><span class="line"><span class="comment"># 文件下:</span></span><br><span class="line">    r: 可读(cat)     </span><br><span class="line">    w: 可修改(vim)       </span><br><span class="line">    x: 可以运行</span><br><span class="line"><span class="comment"># 目录下:   </span></span><br><span class="line">    r: 可查看目录内容(ls)   </span><br><span class="line">    w: 可以增加/删除/修改目录里的内容(mkdir/rmdir/rm)   </span><br><span class="line">    x: 可以切换进该目录中(<span class="built_in">cd</span>)</span><br></pre></td></tr></table></figure><p>解析:<br>777指的是按照rwxrwxrwx的(二进制)顺序排列的权限</p><p>r表示4<br>w表示2<br>x表示1</p><p><strong>注</strong>:不清楚<code>二进制</code>的同学去百度或者问问其他的人</p><p>比如 rwxr-xr-x 在chmod中可以表示为755</p><p>明白了吧?<br>很简单的<br>ok</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch /opt/222.txt</span><br><span class="line">chmod u-x,g+w /opt/222.txt</span><br><span class="line">chmod o=r-x /opt/222.txt</span><br></pre></td></tr></table></figure><p>或许有的同学不知道这个<code>u</code>是什么意思,其实细心的同学会发现,其实我在上面已经指出了它的含义了</p><p>来看:</p><p>rwxrwxrwx</p><p>分为三组,这个都知道吧?</p><p>前面三个字符属于u(所有者)<br>中间三个字符属于g(组内)<br>后面三个字符属于o(组外)</p><p>如果还是不明白什么意思,不要着急,后面会具体的讲这些问题.</p><p><code>u-x</code>的意思就是,<code>所有者</code>的权限中去掉<code>x</code>权限<br><code>g+x</code>的意思就是,<code>组内</code>的权限中加上<code>w</code>权限</p><p>其余的以此类推,这里不做演示了</p><h2 id="四个帮助命令"><a href="#四个帮助命令" class="headerlink" title="四个帮助命令"></a>四个帮助命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此处以ls查看命令为例</span></span><br><span class="line"></span><br><span class="line">whatis ls</span><br><span class="line"></span><br><span class="line">ls --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">man ls</span><br><span class="line"></span><br><span class="line">info ls</span><br></pre></td></tr></table></figure><h2 id="终端使用技巧"><a href="#终端使用技巧" class="headerlink" title="终端使用技巧"></a>终端使用技巧</h2><ol><li>查询历史命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># history -c : 清空当前历史命令</span></span><br><span class="line"><span class="comment"># history -w : 将历史命令保存到历史命令文件 /root/.bash_histroy 中</span></span><br><span class="line"><span class="built_in">history</span></span><br></pre></td></tr></table></figure><ol start="2"><li>清空终端屏幕</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快捷键 ctrl + l</span></span><br><span class="line">clear</span><br></pre></td></tr></table></figure><p>安利一波😝:</p><p>上下键调用历史命令<br>Tab建自动补齐 –&gt; 补齐:命令/文件名/目录名<br>!$ –&gt; 调用上一条命令中的最后一个参数<br>!keyword –&gt; 调用历史命令中含有当前关键字的,距离当前时间最近的那一条命令<br>date –&gt; 显示系统时间<br>pwd –&gt; 打印当前目录</p><h2 id="了解路径"><a href="#了解路径" class="headerlink" title="了解路径"></a>了解路径</h2><p>在Linux中,路径分为<code>相对路径</code>和<code>绝对路径</code></p><p><code>/</code> : 表示根目录<br><code>..</code> : 上一级目录</p><p><code>cd</code>命令为切换路径</p><p>我们先来看一下根目录下有哪些目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls为查看当前或者指定路径下有哪些文件/目录</span></span><br><span class="line">ls /</span><br><span class="line"></span><br><span class="line">bin   data  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  dev   home  lib64  media       opt  root  sbin  sys  usr  website</span><br></pre></td></tr></table></figure><p>由上面我们可以看到,根目录<code>/</code>下还有好多的子目录<br>接下来我们使用<code>cd</code>命令来切换到根目录中的其中一个目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /lib</span><br></pre></td></tr></table></figure><p>切换目录之后,我们会发现提示符中的路径也发生了变化(由<code>~</code>变为了<code>lib</code>)</p><p>这种切换方式为<code>绝对路径</code>,因为是从<code>/</code>目录下开始的</p><p>我们当前路径在根目录<code>/lib</code>下</p><p>我们使用<code>ls</code>命令来查看<code>lib</code>目录下又有哪些子目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line"></span><br><span class="line">binfmt.d  dracut     gcc    kernel      modules-load.d  python3.6         sse2        tuned</span><br><span class="line">cpp       firewalld  grub   locale      NetworkManager  rpm               sysctl.d    udev</span><br><span class="line">crda      firmware   kbd    modprobe.d  polkit-1        sendmail          systemd     yum-plugins</span><br><span class="line">debug     games      kdump  modules     python2.7       sendmail.postfix  tmpfiles.d</span><br></pre></td></tr></table></figure><p>🐦🐦🐦🐦…<br>我举个例子来说明一下绝对路径吧</p><p>假设我们的当前用户是root,家目录在<code>/root</code>,我们需要查看根目录下的很多目录</p><p>如果按照上面的办法,先使用<code>cd</code>命令切换目录,然后再用<code>ls</code>查看的话太过于麻烦,怎么办呢?</p><p>这时候绝对路径就派上用场了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录 /root 下查看 /lib/python3.6 目录中的内容</span></span><br><span class="line">ls /lib/python3.6</span><br></pre></td></tr></table></figure><p>也就是说,<code>绝对路径</code>是以根目录为起点的一个<code>树状</code>完整目录</p><p>🐓🐓🐓🐓…<br>那什么是相对路径呢</p><p>假设我们现在已经使用<code>cd</code>命令切换到了根目录<code>/</code>下,我们想要查看根目录下<code>lib</code>目录下的<code>python3.6</code>,怎么办?<br>难道还是用<code>ls  /lib/python3.6</code>吗?</p><p>可以是可以,但是显然再使用<code>绝对路径</code>就有点<strong>繁琐</strong>了</p><p>我们可以使用<code>相对路径</code><br>因为我们当前已经在根目录下了,所以不必再加上<code>/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls lib/python3.6</span><br></pre></td></tr></table></figure><p>也就是说,<code>相对路径是以当前路径为基准进行命令操作</code></p><p>也许你可能会说,不就是差了一个<code>/</code>号吗?<br>我这里只是举了一个例子来<code>演示</code>,实际情况下,能用相对路径就用相对路径,其余就使用绝对路径</p><p>举个例子吧</p><p>比如我们现在所在的路径是<code>/lib/python3.6</code>,我们想要查看<code>/etc/rpm/</code>目录下的内容,这时候使用相对路径就有点不切实际了,应该使用绝对路径来查看</p><p>懂了吧?</p><p>ok👌</p><h2 id="Linux下的常见目录含义"><a href="#Linux下的常见目录含义" class="headerlink" title="Linux下的常见目录含义"></a>Linux下的常见目录含义</h2><ul><li>boot : 相关的启动文件(引导程序,kernel等)</li><li>etc : 配置文件</li><li>tmp : 进程产生的临时文件存放位置</li><li>var : 存放经常变化的数据(数据库,日志,邮件,定时)</li><li>media : 设备挂载目录 </li><li>mnt : 进程挂载</li><li>bin : 普通用户使用的命令 –&gt; /usr/bin</li><li>sbin : 管理员使用的命令 –&gt; /ust/sbin</li><li>dev : 设备文件</li><li>proc : 虚拟的文件系统/进程实时状态信息</li><li>usr : 系统文件</li></ul><h1 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h1><h2 id="vim编辑器的用法"><a href="#vim编辑器的用法" class="headerlink" title="vim编辑器的用法"></a>vim编辑器的用法</h2><p>具体用法见我的这篇博客<a href="https://shang-code.cn/2019/08/24/vim的使用方法-相关配置/" target="_blank" rel="noopener">vim的使用方法</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前目录下如果文件存在,会直接进入该文件中</span></span><br><span class="line">vim test.txt</span><br><span class="line"><span class="comment"># 当前目录下不存在,会在当前目录下新建一个名为test.txt的文件</span></span><br></pre></td></tr></table></figure><p>进入后想要退出的话:<br>:wq –&gt; 保存并且退出<br>:!q –&gt; 不保存强制退出</p><h2 id="用户的家目录与虚拟控制台"><a href="#用户的家目录与虚拟控制台" class="headerlink" title="用户的家目录与虚拟控制台"></a>用户的家目录与虚拟控制台</h2><h3 id="用户的家目录问题"><a href="#用户的家目录问题" class="headerlink" title="用户的家目录问题"></a>用户的家目录问题</h3><p>超级用户root的家目录 : /root<br>普通用户的家目录 : /home/zhangsan001</p><p>如何新建普通用户:</p><p>useradd zhangsan001<br>passwd zhangsan001</p><p>su - zhangsan001(切换身份的同时也切换家目录)<br>su zhangsan001(只切换身份)</p><h3 id="虚拟控制台的使用技巧"><a href="#虚拟控制台的使用技巧" class="headerlink" title="虚拟控制台的使用技巧"></a>虚拟控制台的使用技巧</h3><p>切换方式:ctrl+alt+F2-F6<br>返回方式:alt+F1<br>测试方式:who和who am i</p><h2 id="重定向技术"><a href="#重定向技术" class="headerlink" title="重定向技术"></a>重定向技术</h2><h3 id="查看文件内容的命令"><a href="#查看文件内容的命令" class="headerlink" title="查看文件内容的命令"></a>查看文件内容的命令</h3><p>more: 不一次性的输出所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用more命令查看passwd</span></span><br><span class="line"><span class="comment"># 按下空格不断进行输出</span></span><br><span class="line">more /etc/passwd</span><br></pre></td></tr></table></figure><p>cat: 一次性输出所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用cat命令查看passwd</span></span><br><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>符号: <code>&gt;</code><br>形式: 覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls &gt; abc.txt</span><br><span class="line">cat abc.txt <span class="comment">#查看</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">pwd</span> &gt; abc.txt <span class="comment">#覆盖abc.txt之前的文本内容</span></span><br><span class="line">cat abc.txt <span class="comment">#查看</span></span><br></pre></td></tr></table></figure><h3 id="追加重定向"><a href="#追加重定向" class="headerlink" title="追加重定向"></a>追加重定向</h3><p>符号: <code>&gt;&gt;</code><br>形式: 追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ll &gt;&gt; abc.txt</span><br><span class="line"><span class="built_in">pwd</span> &gt;&gt; abc.txt</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">cat abc.txt</span><br></pre></td></tr></table></figure><h3 id="错误重定向"><a href="#错误重定向" class="headerlink" title="错误重定向"></a>错误重定向</h3><p>符号: <code>2&gt;</code><br>形式: 覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">geafasdsa 2&gt; abc.txt</span><br><span class="line">cat abc.txt</span><br><span class="line"></span><br><span class="line">etgasr 2&gt; abc.txt</span><br><span class="line">cat abc.txt</span><br></pre></td></tr></table></figure><h3 id="全部重定向"><a href="#全部重定向" class="headerlink" title="全部重定向"></a>全部重定向</h3><p>符号: <code>&amp;&gt;</code><br>形式: 覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确命令</span></span><br><span class="line"><span class="built_in">pwd</span> &amp;&gt; aaa.txt</span><br><span class="line">cat aaa.txt</span><br><span class="line"><span class="comment"># 错误命令</span></span><br><span class="line">afssafa &amp;&gt; aaa.txt</span><br><span class="line">cat aaa.txt</span><br></pre></td></tr></table></figure><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>顾名思义,find是查找的意思</p><p>参数:</p><ul><li>-type : 查找类型(f为文件类型,d为目录类型)</li><li>-user : 查找内容的所有者</li><li>-name : 查找内容的名称</li><li>-iname : 查找内容不区分大小写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 试着把find与重定向组合使用</span></span><br><span class="line"><span class="comment"># 查找根目录下,类型为文件,文件所有者为zhangsan001的文件,重定向到abc2.txt中</span></span><br><span class="line">find /  -<span class="built_in">type</span> f -user zhangsan001 &gt; abc2.txt</span><br><span class="line"></span><br><span class="line">find /  -<span class="built_in">type</span> f -user zhangsan001 2&gt; abc3.txt</span><br><span class="line"></span><br><span class="line">find /  -<span class="built_in">type</span> f -user zhangsan001 &amp;&gt; abc4.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#按文件名查找名字中含有abc的文件或目录</span></span><br><span class="line">find / -name <span class="string">"*abc*"</span></span><br><span class="line"><span class="comment">#按类型查找名字中含有abc的目录</span></span><br><span class="line">find / -name <span class="string">"*abc*"</span> -<span class="built_in">type</span> d</span><br><span class="line"></span><br><span class="line"><span class="comment">#按用户查找</span></span><br><span class="line">find / -name <span class="string">"*abc*"</span> -<span class="built_in">type</span> f -user zhangsan001</span><br></pre></td></tr></table></figure><p><strong>高级技巧:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以张三身份建立三个文件abc1.txt,abc2.txt,abc3.txt</span></span><br><span class="line"><span class="comment"># 测试查找这三个文件</span></span><br><span class="line">find / -name <span class="string">"*abc*"</span> -<span class="built_in">type</span> f -user zhangsan001</span><br><span class="line"><span class="comment"># 高级技巧:查找并删除</span></span><br><span class="line">find / -name <span class="string">"*abc*"</span> -<span class="built_in">type</span> f -user zhangsan001 -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="mv移动命令的四种用法"><a href="#mv移动命令的四种用法" class="headerlink" title="mv移动命令的四种用法"></a>mv移动命令的四种用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个111.txt</span></span><br><span class="line">touch 111.txt</span><br><span class="line"><span class="comment"># 把111.txt移动到/home/zhangsan001/目录下,并重命名为222.txt</span></span><br><span class="line">mv 111.txt /home/zhangsan001/222.txt</span><br><span class="line"><span class="comment"># 新建一个222.txt文件,把222.txt移动到/root/目录下</span></span><br><span class="line">mv 222.txt /root/</span><br><span class="line"><span class="comment"># /home/zhangsan001/目录下已经存在222.txt,尝试强力覆盖</span></span><br><span class="line">mv -f /root/222.txt /home/zhangsan001/</span><br><span class="line"><span class="comment"># 移动目录</span></span><br><span class="line">mv  /root/qqq /home/zhangsan001/</span><br></pre></td></tr></table></figure><h2 id="cp复制命令的四种用法"><a href="#cp复制命令的四种用法" class="headerlink" title="cp复制命令的四种用法"></a>cp复制命令的四种用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制当前目录下的 222.txt 文件到根目录下,并重命名为 333.txt</span></span><br><span class="line">cp 222.txt /333.txt</span><br><span class="line"><span class="comment"># 复制当前目录下的 333.txt 到 /home/zhangsan001/ 目录下</span></span><br><span class="line">cp 333.txt /home/zhangsan001/</span><br><span class="line"><span class="comment"># 如果目标位置出现同名文件，则不覆盖；如果想覆盖，可以使用 \cp  333.txt /</span></span><br><span class="line">cp -n 333.txt /</span><br><span class="line"><span class="comment"># 复制目录,需要加上 -r 参数</span></span><br><span class="line">cp -r qqq /</span><br><span class="line"><span class="comment"># 繁琐目录下的文件备份方法</span></span><br><span class="line">cp /etc/sysconfig/network-scripts/&#123;ifcfg-enp2s0,ifcfg-enp2s0.bak&#125;</span><br></pre></td></tr></table></figure><h2 id="grep在文件内容中查找"><a href="#grep在文件内容中查找" class="headerlink" title="grep在文件内容中查找"></a>grep在文件内容中查找</h2><p>格式：grep key filename</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个qqq.txt并写入内容</span></span><br><span class="line">touch qqq.txt</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"hello\nworld\nsafasfss\nasfsadasd\nword\nasfasfswordasfasf\nsafsafadfa\nfsaferfasasfword\n32114asfasr\n12434word"</span> &gt; qqq.txt</span><br><span class="line"><span class="comment"># 使用grep进行行的筛选</span></span><br><span class="line">grep word qqq.txt</span><br><span class="line"><span class="comment"># 把上面命令的结果重定向到qqq1.txt中</span></span><br><span class="line">grep word qqq.txt &gt; qqq1.txt</span><br><span class="line">cat qqq1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个aaa.txt,并写入内容</span></span><br><span class="line">touch aaa.txt</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"asafasd\nnetworkgefsafas\nafasfasfsarsfanetwork\aadfff\n12413315535networkasfarfwas\nasfasfasfnetwork"</span></span><br><span class="line"><span class="comment"># 筛选以network开头的行</span></span><br><span class="line">grep <span class="string">"^network"</span> aaa.txt</span><br><span class="line"><span class="comment"># 筛选以network结尾的行</span></span><br><span class="line">grep <span class="string">"network$"</span> aaa.txt</span><br></pre></td></tr></table></figure><h1 id="用户与组管理"><a href="#用户与组管理" class="headerlink" title="用户与组管理"></a>用户与组管理</h1><h2 id="用户管理之useradd命令"><a href="#用户管理之useradd命令" class="headerlink" title="用户管理之useradd命令"></a>用户管理之useradd命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个名为a001的新用户</span></span><br><span class="line">useradd a001</span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">passwd a001</span><br></pre></td></tr></table></figure><h2 id="Linux系统底层的四个连锁反映"><a href="#Linux系统底层的四个连锁反映" class="headerlink" title="Linux系统底层的四个连锁反映"></a>Linux系统底层的四个连锁反映</h2><p>当添加好新用户时<br>系统<code>自动创建</code>该用户的家目录/home/a001<br>vim /etc/passwd（多了一行该用户的记录）<br>vim /etc/shadow（影子文件中多一行密码记录）<br>vim /etc/group（组信息文件中多一行记录，即自动创建同名组）</p><h3 id="etc-passwd-七个字段的含义"><a href="#etc-passwd-七个字段的含义" class="headerlink" title="/etc/passwd 七个字段的含义"></a>/etc/passwd 七个字段的含义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a001:x:504:505::/home/a001:/bin/bash</span><br><span class="line"><span class="comment"># 用户名:密码:用户ID:组ID:用户描述:家目录:shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何把普通用户改为超级管理员 -&gt; 把该用户的用户ID改为0</span></span><br></pre></td></tr></table></figure><h3 id="etc-group-四个字段的含义"><a href="#etc-group-四个字段的含义" class="headerlink" title="/etc/group 四个字段的含义"></a>/etc/group 四个字段的含义</h3><p>a001:x:505:<br>test:x:502:harry,sam<br>组名:组密码:组ID:该组中包含的其他用户名</p><h3 id="etc-shadow-九个字段的含义"><a href="#etc-shadow-九个字段的含义" class="headerlink" title="/etc/shadow 九个字段的含义"></a>/etc/shadow 九个字段的含义</h3><p>权限 000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a001:<span class="variable">$6</span><span class="variable">$9</span>./UcZIY<span class="variable">$GWuGRx6h7O4MEd3GHMyUylHCZRVkbwPoqg</span>.98A/ogjXoNlylqzhjncXjO..vK7OTLaNLPKL8a8NII0C1i4ZIK0:16000:0:99999:7:::</span><br><span class="line"><span class="comment"># 用户名:加密后的密码:密码最后一次修改日期:两次密码的修改时间间隔:密码有效期:密码到期的警告时间:密码过期后的宽限天数:账号失效时间:保留字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析:</span></span><br><span class="line"><span class="comment"># 1. 用户名</span></span><br><span class="line"><span class="comment"># 2. 加密后的密码 -&gt; 密码只是单独的 *或!! ,说明没有密码,无法登陆,也就是禁用了该用户</span></span><br><span class="line"><span class="comment"># 3. 密码最后一次修改日期 -&gt; 以1970年1月1日作为标准时间,每过一天时间戳 +1</span></span><br><span class="line"><span class="comment"># 4. 两次密码的修改时间间隔 -&gt; 和第三个字段相比,比如这里设置为10,那么这十天之内不可以该用户不可以修改密码</span></span><br><span class="line"><span class="comment"># 5. 密码有效期 -&gt; 可以自行修改,一般是99999,意思是99999天内有效,不用管,除非你能活这么长时间</span></span><br><span class="line"><span class="comment"># 6. 密码到期的警告时间 -&gt; 比如这里为7,在密码有效期还剩7天时,会自动警告</span></span><br><span class="line"><span class="comment"># 7. 密码过期后的宽限天数 -&gt; 密码有效期内没有修改密码,可以再宽限你几天,具体几天看数值(可自定义),0 代表密码过期后立即失效, 1 代表密码永远不会失效</span></span><br><span class="line"><span class="comment"># 8. 账号失效时间 -&gt; 需要用时间戳表示,就算密码有效期还没有到,只要我们设置了比有效期还要短的天数,那么密码也会立即失效</span></span><br><span class="line"><span class="comment"># 9. 保留字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳换算成年月日的方法</span></span><br><span class="line">date -d <span class="string">"1970-01-01 19999 days"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 年月日换算成时间戳的方法</span></span><br><span class="line"><span class="comment"># 注意 +%s 要连在一起写</span></span><br><span class="line"><span class="built_in">echo</span> $(($(date --date=<span class="string">"2019-10-10"</span> +%s)/86400+1))</span><br></pre></td></tr></table></figure><h3 id="用户的邮箱"><a href="#用户的邮箱" class="headerlink" title="用户的邮箱"></a>用户的邮箱</h3><p>路径:/var/spool/mail/用户名/</p><p>在添加新用户时自动创建</p><h3 id="用户模板目录"><a href="#用户模板目录" class="headerlink" title="用户模板目录"></a>用户模板目录</h3><p>路径:/etc/skel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们新建用户后,在其家目录中其实会有一些隐藏文件</span></span><br><span class="line"><span class="built_in">cd</span> /home/syz</span><br><span class="line">ll -a</span><br><span class="line">    总用量 16</span><br><span class="line">    drwx------. 3 syz  syz   99 10月  9 02:14 .</span><br><span class="line">    drwxr-xr-x. 7 root root  70 10月  9 01:58 ..</span><br><span class="line">    -rw-------. 1 syz  syz   69 10月  9 02:14 .bash_history</span><br><span class="line">    -rw-r--r--. 1 syz  syz   18 8月   3 2017 .bash_logout</span><br><span class="line">    -rw-r--r--. 1 syz  syz  193 8月   3 2017 .bash_profile</span><br><span class="line">    -rw-r--r--. 1 syz  syz  231 8月   3 2017 .bashrc</span><br><span class="line">    drwxr-xr-x. 4 syz  syz   39 10月  6 11:12 .mozilla</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实,这些隐藏文件都是从 /etc/skel文件下拷贝过来的</span></span><br><span class="line">ll -a /etc/skel</span><br><span class="line">ll -a /etc/skel</span><br><span class="line">    总用量 24</span><br><span class="line">    drwxr-xr-x.  3 root root   78 10月  6 11:13 .</span><br><span class="line">    drwxr-xr-x. 90 root root 8192 10月 10 18:32 ..</span><br><span class="line">    -rw-r--r--.  1 root root   18 8月   3 2017 .bash_logout</span><br><span class="line">    -rw-r--r--.  1 root root  193 8月   3 2017 .bash_profile</span><br><span class="line">    -rw-r--r--.  1 root root  231 8月   3 2017 .bashrc</span><br><span class="line">    drwxr-xr-x.  4 root root   39 10月  6 11:12 .mozilla</span><br></pre></td></tr></table></figure><h2 id="相关测试"><a href="#相关测试" class="headerlink" title="相关测试:"></a>相关测试:</h2><h3 id="shell测试"><a href="#shell测试" class="headerlink" title="shell测试"></a>shell测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建用户a002,并设置不能本地登录</span></span><br><span class="line"><span class="comment"># 参数 -s 表示设置shell</span></span><br><span class="line">useradd -s /sbin/nologin a002 </span><br><span class="line">passwd a002</span><br></pre></td></tr></table></figure><p>如何开启登录权限:直接修改<code>/etc/passwd</code>中的shell字段为/bin/login</p><p>注意：/sbin/nologin这种shell的典型应用场合是给<code>FTP客户端</code>用户来设置的。</p><h3 id="其他参数测试"><a href="#其他参数测试" class="headerlink" title="其他参数测试"></a>其他参数测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -c : 用户描述</span></span><br><span class="line"><span class="comment"># -d : 指定新账户的家目录</span></span><br><span class="line"><span class="comment"># -m : 创建用户的家目录</span></span><br><span class="line"><span class="comment"># -u : 指定用户的id</span></span><br><span class="line"><span class="comment"># -d -m 通常组合使用</span></span><br><span class="line"><span class="comment"># -g : 指定为第一所属组(第一所属组只能有一个)</span></span><br><span class="line"><span class="comment"># -G : 指定为其他附属组</span></span><br><span class="line">useradd -c <span class="string">"ordinary user"</span> -m -d /var/a003 -u 333 a003</span><br><span class="line">passwd a003</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">tail -1 /etc/passwd</span><br><span class="line"><span class="comment"># a003:x:333:507:ordinary user:/var/a003:/bin/bash</span></span><br></pre></td></tr></table></figure><h2 id="用户管理之userdel命令"><a href="#用户管理之userdel命令" class="headerlink" title="用户管理之userdel命令"></a>用户管理之userdel命令</h2><h3 id="不彻底的删除方法"><a href="#不彻底的删除方法" class="headerlink" title="不彻底的删除方法"></a>不彻底的删除方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userdel a001</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">tail -3 /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="彻底的删除方法"><a href="#彻底的删除方法" class="headerlink" title="彻底的删除方法"></a>彻底的删除方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时删除对应的四个连锁反映</span></span><br><span class="line">userdel -rf a003</span><br></pre></td></tr></table></figure><h2 id="用户管理之usermod命令"><a href="#用户管理之usermod命令" class="headerlink" title="用户管理之usermod命令"></a>用户管理之usermod命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改a002用户的id</span></span><br><span class="line">usermod -u 600 a002</span><br><span class="line"><span class="comment"># 设置用户a002为不可本地登录</span></span><br><span class="line">usermod -s /sbin/nologin a002</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">tail -3 /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="组管理之groupadd命令"><a href="#组管理之groupadd命令" class="headerlink" title="组管理之groupadd命令"></a>组管理之groupadd命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个名为g001的组</span></span><br><span class="line">groupadd g001</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">tail -3 /etc/group</span><br></pre></td></tr></table></figure><h2 id="组管理之groupdel命令"><a href="#组管理之groupdel命令" class="headerlink" title="组管理之groupdel命令"></a>组管理之groupdel命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除组g001</span></span><br><span class="line">groupdel g001</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">tail -3 /etc/group</span><br><span class="line"><span class="comment"># 不能删除用户的第一所属组</span></span><br><span class="line">groupdel a002  // cannot remove the primary group of user <span class="string">'a002'</span></span><br></pre></td></tr></table></figure><h2 id="gpasswd-usermod-组和用户的关系"><a href="#gpasswd-usermod-组和用户的关系" class="headerlink" title="(gpasswd,usermod)组和用户的关系"></a>(gpasswd,usermod)组和用户的关系</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 知识点1️⃣:gpasswd</span></span><br><span class="line"><span class="comment"># 格式: gpasswd [选项] 用户名 组名</span></span><br><span class="line"><span class="comment"># 把用户b001加入到组group1中</span></span><br><span class="line"><span class="comment"># -a : 添加</span></span><br><span class="line"><span class="comment"># -d : 删除</span></span><br><span class="line">gpasswd -a b001 group1</span><br><span class="line"><span class="comment"># 同理</span></span><br><span class="line">gpasswd -a b002 group1</span><br><span class="line">gpasswd -a b003 group1</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">tail -3 /etc/group</span><br><span class="line">    group1:x:604:b001,b002,b003</span><br><span class="line">**********************************</span><br><span class="line"><span class="comment"># 把b003从组group1中移除</span></span><br><span class="line">gpasswd -d b003 group1</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">tail -3 /etc/group</span><br><span class="line">**********************************</span><br><span class="line"><span class="comment"># 查看用户b001加入了哪些组</span></span><br><span class="line">groups b001</span><br><span class="line">    b001 : b001 group1</span><br><span class="line"><span class="comment"># 我们会发现用户加入的新组归属于 其他附属组</span></span><br><span class="line">**********************************</span><br><span class="line"><span class="comment"># 修改第一所属组的测试</span></span><br><span class="line">gpasswd -a a002 group1</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">groups a002</span><br><span class="line">    a002 : a002 group1</span><br><span class="line"><span class="comment"># 把group2作为用户a002的第一所属组</span></span><br><span class="line"><span class="comment"># 知识点2️⃣:usermod</span></span><br><span class="line"><span class="comment"># 格式: usermod [选项] 组名 用户名</span></span><br><span class="line"><span class="comment"># usermod 的选项和useradd比较类似,基本上都是同一个意思</span></span><br><span class="line"><span class="comment"># - g : 第一所属组</span></span><br><span class="line"><span class="comment"># - G : 其他附属组</span></span><br><span class="line"><span class="comment"># - c : 用户描述信息</span></span><br><span class="line"><span class="comment"># - L : 临时锁定用户(锁定会会发现/etc/shadow文件中的一长串密码开头多了一个字符)</span></span><br><span class="line"><span class="comment"># - U : 解锁用户(把/etc/shadow文件中变化的密码复原)</span></span><br><span class="line">usermod -g group2 a002</span><br><span class="line">groups a002</span><br><span class="line">    a002 : group2 group1</span><br><span class="line">********************************** </span><br><span class="line"><span class="comment"># 修改附属组的测试</span></span><br><span class="line">groups b001</span><br><span class="line">    b001 : b001 group1 group2</span><br><span class="line"><span class="comment"># 把组a002作为用户b001的其他附属组</span></span><br><span class="line">usermod -G a002 b001</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">groups b001</span><br><span class="line">    b001 : b001 a002</span><br></pre></td></tr></table></figure><h2 id="chown命令的使用方法"><a href="#chown命令的使用方法" class="headerlink" title="chown命令的使用方法"></a>chown命令的使用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式: chown 文件所有者:所属组名称 文件名称 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把文件qqq1.txt的文件所有者和所属组改为 b001 和 group1 </span></span><br><span class="line">chown b001:group1 qqq1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把文件qqq1.txt的所属组改为root </span></span><br><span class="line">chown :root qqq1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把文件qqq1.txt的文件所有者改为b003</span></span><br><span class="line">chown b003: qqq1.txt(自动以该用户私有组替换)</span><br></pre></td></tr></table></figure><p><strong>注:</strong>一个用户创建的文件,如果想要另一个用户对该文件进行访问/修改/执行,可以把另一个用户加入到这个文件的所属组中,然后使用chmod命令修改该文件的组内权限即可</p><h1 id="runlevel运行级别"><a href="#runlevel运行级别" class="headerlink" title="runlevel运行级别"></a>runlevel运行级别</h1><h2 id="7种运行级别的含义"><a href="#7种运行级别的含义" class="headerlink" title="7种运行级别的含义:"></a>7种运行级别的含义:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/inittab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    0 - halt    <span class="comment">#关机</span></span><br><span class="line">    1 - Single user mode    <span class="comment">#单用户模式</span></span><br><span class="line">    2 - Multiuser, without NFS (The same as 3, <span class="keyword">if</span> you <span class="keyword">do</span> not have networking)   <span class="comment">#多用户模式</span></span><br><span class="line">    3 - Full multiuser mode <span class="comment">#完整多用户模式</span></span><br><span class="line">    4 - unused  <span class="comment">#备用</span></span><br><span class="line">    5 - X11 <span class="comment">#支持图形界面</span></span><br><span class="line">    6 - reboot (Do NOT <span class="built_in">set</span> initdefault to this) <span class="comment">#重启</span></span><br></pre></td></tr></table></figure><h2 id="查看和改变运行级别的方法"><a href="#查看和改变运行级别的方法" class="headerlink" title="查看和改变运行级别的方法"></a>查看和改变运行级别的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行级别</span></span><br><span class="line">runlevel</span><br><span class="line"><span class="comment"># 改变运行级别</span></span><br><span class="line">init n</span><br><span class="line"><span class="comment"># 总结关闭系统的方法</span></span><br><span class="line">init 0</span><br><span class="line">shutdown -h now</span><br><span class="line"><span class="comment"># 总结重启系统的方法</span></span><br><span class="line">reboot</span><br><span class="line">init 6</span><br></pre></td></tr></table></figure><h1 id="破解超级用户root的密码"><a href="#破解超级用户root的密码" class="headerlink" title="破解超级用户root的密码"></a>破解超级用户root的密码</h1><p> Centos 7重置root密码</p><ol><li><p>重启系统，在grub引导菜单，选择第一项，按e编辑启动配置文件 </p></li><li><p>找到 linux16开头的行，在该行最后添加rd.break</p></li><li><p>按crtl+x启动</p></li><li><p>以读写的方式挂载根目录 </p><blockquote><p>mount -o remount,rw /sysroot </p></blockquote></li><li><p>切换根目录</p><blockquote><p>chroot /sysroot     </p></blockquote></li><li><p>使用passwd命令重置密码(注意bug乱码)</p></li><li><p>创建重置SELinux安全上下文的文件 </p><blockquote><p>touch /.autorelabel    </p></blockquote></li><li><p>敲两次exit退出重启即可 </p></li></ol><h1 id="高级权限"><a href="#高级权限" class="headerlink" title="高级权限"></a>高级权限</h1><h2 id="UMASK反掩码"><a href="#UMASK反掩码" class="headerlink" title="UMASK反掩码"></a>UMASK反掩码</h2><p>root用户反掩码: 0022<br>普通用户反掩码: 0002</p><h3 id="如何查看反掩码"><a href="#如何查看反掩码" class="headerlink" title="如何查看反掩码"></a>如何查看反掩码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">umask</span></span><br></pre></td></tr></table></figure><h3 id="UMASK反掩码的作用"><a href="#UMASK反掩码的作用" class="headerlink" title="UMASK反掩码的作用"></a>UMASK反掩码的作用</h3><p>目录的缺省权限值=777-UMASK反掩码<br>文件的缺省权限值=777-UMASK反掩码-111</p><h3 id="如何修改UMASK反掩码"><a href="#如何修改UMASK反掩码" class="headerlink" title="如何修改UMASK反掩码"></a>如何修改UMASK反掩码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改即可</span></span><br><span class="line"><span class="built_in">umask</span> 0011</span><br><span class="line">*************************</span><br><span class="line"><span class="comment"># root用户测试</span></span><br><span class="line"><span class="built_in">umask</span></span><br><span class="line"></span><br><span class="line">mkdir 1111</span><br><span class="line">touch 1111.txt</span><br><span class="line">*************************</span><br><span class="line"><span class="comment"># 普通用户测试</span></span><br><span class="line">useradd lisi</span><br><span class="line">su - lisi</span><br><span class="line"><span class="comment"># 查看普通用户反掩码</span></span><br><span class="line"><span class="built_in">umask</span></span><br><span class="line"><span class="comment"># 修改普通用户反掩码</span></span><br><span class="line"><span class="built_in">umask</span> 0011</span><br><span class="line"></span><br><span class="line">mkdir 1111</span><br><span class="line">touch 1111.txt</span><br></pre></td></tr></table></figure><h2 id="SUID权限弥补"><a href="#SUID权限弥补" class="headerlink" title="SUID权限弥补"></a>SUID权限弥补</h2><p>主要针对<code>文件</code><br>文件所有者执行位变为s或S(之前有x则为s,之前无x则为S,不懂的话没关系,继续往下看)</p><h3 id="usr-bin-passwd"><a href="#usr-bin-passwd" class="headerlink" title="/usr/bin/passwd"></a>/usr/bin/passwd</h3><p>passwd命令执行的脚本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/bin/passwd  <span class="comment">#可以看到文件所有者的执行位为s</span></span><br><span class="line"></span><br><span class="line">-rwsr-xr-x. 1 root root 27832 Jun 10  2014 /usr/bin/passwd</span><br></pre></td></tr></table></figure><h3 id="测试SUID"><a href="#测试SUID" class="headerlink" title="测试SUID"></a>测试SUID</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个普通用户</span></span><br><span class="line">useradd a001</span><br><span class="line">passwd a001</span><br><span class="line"><span class="comment"># 切换至该普通用户</span></span><br><span class="line">su - a001</span><br><span class="line"><span class="comment"># 尝试修改该用户的密码</span></span><br><span class="line"><span class="comment"># 首先输入旧的密码,然后输入两遍新的密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment"># 如果看到最后的提示字样 successfully,那么修改成功</span></span><br><span class="line"></span><br><span class="line">**********************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回root用户,去除passwd文件的SUID高级权限</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">chmod u<span class="_">-s</span> /usr/bin/passwd   <span class="comment">#去掉s后,普通用户便不可以自己修改密码</span></span><br><span class="line">ll /usr/bin/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次切换到普通用户进行测试</span></span><br><span class="line">su - a001</span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># passwd: Authentication token manipulation error</span></span><br><span class="line"><span class="comment"># 如果最后出现 error 的字样,说明该用户自己已经无法修改密码,只能root超级管理员来修改</span></span><br></pre></td></tr></table></figure><h3 id="s与S的区别"><a href="#s与S的区别" class="headerlink" title="s与S的区别"></a>s与S的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在上一步的基础上继续</span></span><br><span class="line">chmod u+s,u-x /usr/bin/passwd</span><br><span class="line">ll /usr/bin/passwd  <span class="comment">#会发现所有者执行位变为了S</span></span><br><span class="line"></span><br><span class="line">chmod u+x /usr/bin/passwd</span><br><span class="line">ll /usr/bin/passwd  <span class="comment">#会发现所有者执行位变为了s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过我的测试,无论是S还是s,都可以普通用户自己修改密码</span></span><br></pre></td></tr></table></figure><h2 id="SGID权限弥补"><a href="#SGID权限弥补" class="headerlink" title="SGID权限弥补"></a>SGID权限弥补</h2><p>主要针对目录</p><p>如果给某个目录加上了SGID高级,那么在这个文件中创建目录或者创建新文件,都将会继承这个目录的组</p><p>下面用例子来演示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新组</span></span><br><span class="line">groupadd qqq</span><br><span class="line"><span class="comment"># 在根目录下创建一个新目录</span></span><br><span class="line">mkdir /111</span><br><span class="line"><span class="comment"># 更改目录111的组</span></span><br><span class="line">chown :qqq /111</span><br><span class="line"><span class="comment"># 查看111目录</span></span><br><span class="line">ll /111</span><br><span class="line"><span class="comment"># 给111目录增加高级权限SGID</span></span><br><span class="line">chmod g+s /111</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">mkdir /111/222</span><br><span class="line">touch /111/222.txt</span><br><span class="line">ll /111/</span><br></pre></td></tr></table></figure><h2 id="STICK粘滞位"><a href="#STICK粘滞位" class="headerlink" title="STICK粘滞位"></a>STICK粘滞位</h2><p>主要针对共享目录</p><p>组外(其他用户)的执行位变为t</p><p>linux中根目录下的tmp目录就是经典的例子</p><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录下创建一个共享目录share</span></span><br><span class="line">mkdir /share</span><br><span class="line"><span class="comment"># 给share目录高级权限STICK</span></span><br><span class="line">chmod o+t,o+w /share</span><br><span class="line"><span class="comment">#创建两个新用户</span></span><br><span class="line">useradd zhangsan</span><br><span class="line">useradd lisi</span><br><span class="line"><span class="comment"># 切换至其中一个用户</span></span><br><span class="line">su - zhangsan</span><br><span class="line"><span class="comment"># 在/share共享目录下新建一个以该用户为名的txt文件</span></span><br><span class="line">touch /share/zhangsan.txt</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 切换至另一个用户</span></span><br><span class="line">su - lisi</span><br><span class="line"><span class="comment"># 查看共享目录下的文件</span></span><br><span class="line">ll /share/</span><br><span class="line"><span class="comment"># 试着删除该文件</span></span><br><span class="line">rm -rf /share/zhangsan.txt</span><br><span class="line"><span class="comment"># 出现如下提示</span></span><br><span class="line">rm: 无法删除<span class="string">"/share/zhangsan.txt"</span>: 不允许的操作</span><br></pre></td></tr></table></figure><h2 id="ACL访问控制列表"><a href="#ACL访问控制列表" class="headerlink" title="ACL访问控制列表"></a>ACL访问控制列表</h2><p>针对目录和文件</p><p>可以对一个文件设置用户的访问权限</p><h3 id="设置文件的ACL信息"><a href="#设置文件的ACL信息" class="headerlink" title="设置文件的ACL信息"></a>设置文件的ACL信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录下新建一个txt文件</span></span><br><span class="line">touch /123.txt</span><br><span class="line"><span class="comment"># 为123.txt设置acl</span></span><br><span class="line">setfacl -m u:zhangsan:rw- /123.txt  <span class="comment">#设置用户zhangsan访问123.txt的权限只有读和写,没有执行权限</span></span><br><span class="line">setfacl -m u:lisi:r-- /123.txt</span><br><span class="line"><span class="comment"># 查看123.txt,会发现后面多了一个加号+</span></span><br><span class="line">ll /</span><br><span class="line"><span class="comment"># 查看acl信息</span></span><br><span class="line">getfacl /123.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">su - zhangsan</span><br><span class="line">vim /123.txt    <span class="comment">#写入内容,保存退出,成功</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">su - lisi</span><br><span class="line">vim /123.txt    <span class="comment">#写入内容,保存退出提示不可写入</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="设置目录的ACL信息"><a href="#设置目录的ACL信息" class="headerlink" title="设置目录的ACL信息"></a>设置目录的ACL信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir /456</span><br><span class="line"><span class="comment"># 参数d表示在/456目录下新建目录或文件会自动继承目录/456的ACL信息</span></span><br><span class="line"><span class="comment"># 但要注意:ACL的真正效果仍然体现在对文件的操作上,对文件修改时才能看出效果</span></span><br><span class="line">setfacl -m d:u:zhangsan:rwx /456</span><br><span class="line"><span class="built_in">cd</span> /456</span><br><span class="line">touch ttt.txt</span><br><span class="line">getfacl ttt.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当复制一个具有ACl属性的文件或目录时,默认情况下,ACL属性值是不会复制过去的</span></span><br><span class="line"><span class="comment"># 只有在 cp 后加上 -p 参数才可以</span></span><br><span class="line">cp -p ttt.txt /tmp/cp_ttt.txt</span><br><span class="line"><span class="comment"># 如果移动一个具有ACL属性的文件或目录时,则会同时把ACL属性移动过去</span></span><br></pre></td></tr></table></figure><h3 id="删除ACL信息"><a href="#删除ACL信息" class="headerlink" title="删除ACL信息"></a>删除ACL信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不彻底的删除方式</span></span><br><span class="line">setfacl -x u:lisi /123.txt  <span class="comment">#虽然去掉了lisi的权限,但是使用ll进行查看, + 号仍然存在</span></span><br><span class="line">getfacl /123.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 彻底的删除一个文件或者目录的所有的ACL信息</span></span><br><span class="line">chacl -B /123.txt</span><br></pre></td></tr></table></figure><h3 id="chmod知识补充"><a href="#chmod知识补充" class="headerlink" title="chmod知识补充"></a>chmod知识补充</h3><p>sst = 421 = 7</p><p>chmod 7777 test.txt     相当于     rwsrwsrwt<br>chmod 6777 test.txt     相当于     rwsrwsrwx<br>chmod 4777 test.txt     相当于     rwsrwxrwx</p><p>以此类推</p><h1 id="RPM软件包及YUM软件仓库的使用"><a href="#RPM软件包及YUM软件仓库的使用" class="headerlink" title="RPM软件包及YUM软件仓库的使用"></a>RPM软件包及YUM软件仓库的使用</h1><h2 id="RPM软件包的使用技巧"><a href="#RPM软件包的使用技巧" class="headerlink" title="RPM软件包的使用技巧"></a>RPM软件包的使用技巧</h2><p>现在基本不用rpm了,但是应该还是要了解一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何查询指定软件包是否安装</span></span><br><span class="line">rpm -q vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何安装指定软件包</span></span><br><span class="line"><span class="comment"># i:立即安装</span></span><br><span class="line"><span class="comment"># v:显示安装进度</span></span><br><span class="line"><span class="comment"># 哈希进度提示</span></span><br><span class="line">rpm -ivh ftp-0.17-51.1.el6.i686.rpm</span><br><span class="line"><span class="comment"># 如何删除指定软件包</span></span><br><span class="line">rpm -e ftp  <span class="comment">#问题：依赖性关系(rpm -e httpd)</span></span><br></pre></td></tr></table></figure><h2 id="镜像文件的回环挂载"><a href="#镜像文件的回环挂载" class="headerlink" title="镜像文件的回环挂载"></a>镜像文件的回环挂载</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>回环设备（ ‘loopback device’）允许用户以一个普通磁盘文件虚拟一个块设备。设想一个磁盘设备，对它的所有读写操作都将被重定向到读写一个名为 disk-image 的普通文件而非操作实际磁盘或分区的轨道和扇区。（当然，disk-image 必须存在于一个实际的磁盘上，而这个磁盘必须比虚拟的磁盘容量更大。）回环设备允许你这样使用一个普通文件。</p><h3 id="回环挂载的用法"><a href="#回环挂载的用法" class="headerlink" title="回环挂载的用法"></a>回环挂载的用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看centos镜像文件的大小</span></span><br><span class="line">du -sh CentOS-7-x86_64-DVD-1511.iso</span><br><span class="line"><span class="comment"># 创建挂载目录</span></span><br><span class="line">mkdir /mnt/iso</span><br><span class="line"><span class="comment"># 回环挂载</span></span><br><span class="line"><span class="comment"># 注意自己镜像的位置和名称,没有镜像需要自己上传或下载到本地</span></span><br><span class="line">mount -o loop /CentOS-7-x86_64-DVD-1511.iso /mnt/iso</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/iso</span><br><span class="line">ll</span><br><span class="line"><span class="comment"># 查看映射情况</span></span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h3 id="卸载目录的方法"><a href="#卸载目录的方法" class="headerlink" title="卸载目录的方法"></a>卸载目录的方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接卸载即可</span></span><br><span class="line">umount /mnt/iso</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/iso</span><br><span class="line">ll</span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h2 id="YUM软件仓库的配置及使用"><a href="#YUM软件仓库的配置及使用" class="headerlink" title="YUM软件仓库的配置及使用"></a>YUM软件仓库的配置及使用</h2><h3 id="修改YUM软件仓库的配置文件"><a href="#修改YUM软件仓库的配置文件" class="headerlink" title="修改YUM软件仓库的配置文件"></a>修改YUM软件仓库的配置文件</h3><p><strong>一定要将目录切换到YUM软件仓库的工作目录/etc/yum.repos.d/下才有效</strong><br><strong>工作目录下的配置文件必须以.repo结尾</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">vim centos7.repo</span><br><span class="line"><span class="comment"># 录入五个参数</span></span><br><span class="line">********************************</span><br><span class="line">[base]                      </span><br><span class="line">name=CentOS7</span><br><span class="line">baseurl=file:///mnt/iso</span><br><span class="line">enabled=1  </span><br><span class="line">gpgcheck=0</span><br><span class="line">********************************</span><br><span class="line"><span class="comment"># ⬆️baseurl要填写绝对路径</span></span><br><span class="line"><span class="comment"># ⬆️enabled 为启用软件仓库</span></span><br><span class="line"><span class="comment"># ⬆️gpgcheck 为不校验软件包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证软件仓库的方法</span></span><br><span class="line">yum clean all</span><br><span class="line">yum list    <span class="comment">#会看到很多个软件包</span></span><br></pre></td></tr></table></figure><h3 id="YUM常见命令使用技巧"><a href="#YUM常见命令使用技巧" class="headerlink" title="YUM常见命令使用技巧"></a>YUM常见命令使用技巧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询指定的软件包</span></span><br><span class="line">yum search vsftpd</span><br><span class="line"><span class="comment"># 查询指定软件的详细信息</span></span><br><span class="line"><span class="comment"># 可以判断该软件包是否安装</span></span><br><span class="line">yum info vsftpd</span><br><span class="line"><span class="comment"># 如何安装指定的软件包</span></span><br><span class="line">yum install vsftpd</span><br><span class="line"><span class="comment"># 如何删除指定的软件包</span></span><br><span class="line">yum erase vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成组删除</span></span><br><span class="line">yum grouplist</span><br><span class="line"><span class="comment"># 如果要显示成功安装信息，则之前系统中应该没有装vsftpd包才可以</span></span><br><span class="line">yum groupinstall <span class="string">'FTP Server'</span></span><br><span class="line">yum groupinstall <span class="string">'PHP 支持'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询可用软件包的版本全称</span></span><br><span class="line">yum whatprovides vim</span><br></pre></td></tr></table></figure><h3 id="通过指定的FTP服务器设置YUM软件仓库源"><a href="#通过指定的FTP服务器设置YUM软件仓库源" class="headerlink" title="通过指定的FTP服务器设置YUM软件仓库源"></a>通过指定的FTP服务器设置YUM软件仓库源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=centos7</span><br><span class="line">baseurl=ftp://10.226.41.226/centos7</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><h3 id="通过真实的CentOS7服务器作为YUM软件仓库源"><a href="#通过真实的CentOS7服务器作为YUM软件仓库源" class="headerlink" title="通过真实的CentOS7服务器作为YUM软件仓库源"></a>通过真实的CentOS7服务器作为YUM软件仓库源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">gzip centos7.repo</span><br><span class="line"><span class="comment"># 释放压缩</span></span><br><span class="line">gunzip CentOS-Base.repo.gz</span><br><span class="line">cat CentOS-Base.repo</span><br><span class="line"><span class="comment"># 注意：一定要保证在连接外网的前提下测试</span></span><br><span class="line">yum clean all</span><br><span class="line"><span class="comment"># yum repolist 会出现 11,971个包</span></span><br><span class="line">yum -y install mariadb-server</span><br></pre></td></tr></table></figure><h3 id="YUM软件仓库源常见错误的解决方法（yum-PID）"><a href="#YUM软件仓库源常见错误的解决方法（yum-PID）" class="headerlink" title="YUM软件仓库源常见错误的解决方法（yum.PID）"></a>YUM软件仓库源常见错误的解决方法（yum.PID）</h3><p>解决方法：按照提示信息将对应文件/run/yum.pid删除即可。</p><h1 id="Crontab定时任务"><a href="#Crontab定时任务" class="headerlink" title="Crontab定时任务"></a>Crontab定时任务</h1><h2 id="用户定时任务的使用技巧"><a href="#用户定时任务的使用技巧" class="headerlink" title="用户定时任务的使用技巧"></a>用户定时任务的使用技巧</h2><h3 id="用户定时任务的格式"><a href="#用户定时任务的格式" class="headerlink" title="用户定时任务的格式"></a>用户定时任务的格式</h3><p>Minute  Hour     Day    Month   DayofWeek   Command<br>分钟     小时      天      月       星期         命令</p><h3 id="设置用户定时任务的步骤："><a href="#设置用户定时任务的步骤：" class="headerlink" title="设置用户定时任务的步骤："></a>设置用户定时任务的步骤：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户身份</span></span><br><span class="line">su - zhangsan</span><br><span class="line"><span class="comment"># 设置定时任务</span></span><br><span class="line">crontab -e  <span class="comment">#编辑该用户定时任务</span></span><br><span class="line">crontab -l  <span class="comment">#查看该用户定时任务</span></span><br><span class="line">crontab -r  <span class="comment">#删除该用户定时任务</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a.zhangsan用户创建定时任务，要求：每天下午5:00关机。</span></span><br><span class="line">su - zhangsan</span><br><span class="line">crontab -e</span><br><span class="line">0 17 * * * shutdown -h now</span><br><span class="line"></span><br><span class="line"><span class="comment"># b.lisi用户创建定时任务，要求：周一至周五朝九晚五每分钟发一条消息(wall 命令进行测试)。</span></span><br><span class="line">su - lisi</span><br><span class="line">crontab -e</span><br><span class="line">* 9-17 * * 1-5 wall <span class="string">"hello,I'am lisi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c.lisi用户创建定时任务，要求：周一至周五朝九晚五每两小时发一条消息。</span></span><br><span class="line">* 9-17/2 * * 1-5 wall <span class="string">"hello,I'am lisi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d.lisi用户创建定时任务，要求：周一至周五朝九晚五每两隔10分钟发一条消息。</span></span><br><span class="line">*/10 9-17 * * 1-5 wall <span class="string">"hello,I'am lisi"</span></span><br></pre></td></tr></table></figure><h3 id="管理员对用户定时任务的管理方法"><a href="#管理员对用户定时任务的管理方法" class="headerlink" title="管理员对用户定时任务的管理方法"></a>管理员对用户定时任务的管理方法</h3><p>方法一：/var/spool/cron 用户定时任务的工作目录(查看;修改;删除),如果用户设置过定时任务,那么在该目录下会有与用户同名的文件</p><p>方法二：crontab -u lisi -l | -e | -r</p><h3 id="用户定时任务的高级管理技巧"><a href="#用户定时任务的高级管理技巧" class="headerlink" title="用户定时任务的高级管理技巧"></a>用户定时任务的高级管理技巧</h3><p>黑名单文件  /etc/cron.deny      //默认存在<br>白名单文件  /etc/cron.allow     //默认不存在,使用时,应删除cron.deny文件,再创建cron.allow文件,只有在cron.allow文件里的用户才可以设置定时任务</p><h2 id="系统定时任务的使用技巧"><a href="#系统定时任务的使用技巧" class="headerlink" title="系统定时任务的使用技巧"></a>系统定时任务的使用技巧</h2><h3 id="系统定时任务的工作目录"><a href="#系统定时任务的工作目录" class="headerlink" title="系统定时任务的工作目录"></a>系统定时任务的工作目录</h3><p>/etc/cron.daily/   日志回滚文件,该目录下的脚本文件每天会自动运行一次(触发时间:4:22)</p><p>/etc/cron.hourly/  该目录下的脚本文件每小时（第一分钟）会自动运行一次</p><p>/etc/cron.weekly   该目录下的脚本文件每星期（周日的4:22）会自动运行一次</p><p>/etc/cron.monthly/ 该目录下的脚本文件每个月（1号的4:22）会自动运行一次</p><h3 id="anacron系统"><a href="#anacron系统" class="headerlink" title="anacron系统"></a>anacron系统</h3><p>原理：系统定时任务的触发时间由于某种原因(例如停电)而错过了，anacron系统会保证<br>系统定时任务工作目录下的脚本会弥补运行的一种机制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/anacrontab</span><br><span class="line"></span><br><span class="line"><span class="comment">#period in days   delay in minutes   job-identifier   command</span></span><br><span class="line">1       5       cron.daily              nice run-parts /etc/cron.daily</span><br><span class="line">7       25      cron.weekly             nice run-parts /etc/cron.weekly</span><br><span class="line">@monthly 45     cron.monthly            nice run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure><h1 id="FS-Management-文件系统管理"><a href="#FS-Management-文件系统管理" class="headerlink" title="FS Management(文件系统管理)"></a>FS Management(文件系统管理)</h1><h2 id="Linux下的磁盘分区及其表示方法"><a href="#Linux下的磁盘分区及其表示方法" class="headerlink" title="Linux下的磁盘分区及其表示方法"></a>Linux下的磁盘分区及其表示方法</h2><h3 id="磁盘的表示方法"><a href="#磁盘的表示方法" class="headerlink" title="磁盘的表示方法"></a>磁盘的表示方法</h3><p>/dev/sda—第一块磁盘(针对SCSI或串口磁盘)<br>/dev/sdb—第二块磁盘<br>/dev/sdc—第三块磁盘</p><p>/dev/hda,/dev/hdb,/dev/hdc,….(传统的IDE磁盘)<br>/dev/vda,/dev/vdb,/dev/vdc(虚拟磁盘)</p><h3 id="分区的表示方法"><a href="#分区的表示方法" class="headerlink" title="分区的表示方法"></a>分区的表示方法</h3><p>/dev/sda1—第一块磁盘的第一个分区<br>/dev/sda2—第一块磁盘的第二个分区<br>/dev/sdb1—第二块磁盘的第一个分区<br>/dev/hda1—第一块磁盘的第一个分区(传统的IDE磁盘)<br>/dev/vdc5<br>/dev/vdb3</p><h3 id="主分区-扩展分区和逻辑分区"><a href="#主分区-扩展分区和逻辑分区" class="headerlink" title="主分区,扩展分区和逻辑分区"></a>主分区,扩展分区和逻辑分区</h3><p>一块400G的硬盘<br>C—100G—/dev/sda1(主)<br>D—50G—/dev/sda2(主)<br>E—50G—/dev/sda3(主)<br>/dev/sda4(扩展分区)<br>    F—50G—/dev/sda5<br>    G—50G—/dev/sda6<br>    H—50G—/dev/sda7<br>    I—50G—/dev/sda8</p><p><strong>结论：</strong></p><ul><li>主分区的个数至多4个；</li><li>扩展分区是一个容器，其中可以包含多个逻辑分区；</li><li>扩展分区的大小=各个逻辑分区大小之和+未划分的扩展分区大小；</li><li>真正能使用的数据分区只能是主分区或者逻辑分区；</li><li>磁盘的剩余空间 = 扩展分区 - 各逻辑分区之和；</li></ul><h2 id="为虚拟机添加一块磁盘"><a href="#为虚拟机添加一块磁盘" class="headerlink" title="为虚拟机添加一块磁盘"></a>为虚拟机添加一块磁盘</h2><p>双击虚拟机 -&gt; show  virtual machine details(灯泡的图案) -&gt; virtIO Disk 1 -&gt; 下方add hardword -&gt; bus type(scsi) -&gt; finish</p><h2 id="fdisk命令的使用技巧"><a href="#fdisk命令的使用技巧" class="headerlink" title="fdisk命令的使用技巧"></a>fdisk命令的使用技巧</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否添加成功</span></span><br><span class="line">df -Th</span><br><span class="line"><span class="comment"># 为磁盘创建分区</span></span><br><span class="line">fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是选项,n是添加分区,t是改变分区类型</span></span><br><span class="line">m   <span class="built_in">print</span> this menu</span><br><span class="line">p   <span class="built_in">print</span> the partition table</span><br><span class="line">d   delete a partition(删除分区时，必须从后往前一个一个删除)</span><br><span class="line">n   add a new partition(创建分区时，必须从前往后一个一个创建)</span><br><span class="line">t   change a partitions system id</span><br><span class="line">l   list known partition types</span><br><span class="line">    <span class="comment"># 常用分区类型</span></span><br><span class="line">    5  Extended</span><br><span class="line">    7  HPFS/NTFS</span><br><span class="line">    b  W95 FAT32</span><br><span class="line">    82  Linux swap</span><br><span class="line">    83  Linux –---------xfs, ext4, ext3,ext2</span><br><span class="line">    8e  Linux LVM</span><br><span class="line"></span><br><span class="line">w   write table to disk and <span class="built_in">exit</span></span><br><span class="line">q   quit without saving changes</span><br><span class="line"></span><br><span class="line">The device presents a logical sector size that is smaller than</span><br><span class="line">the physical sector size. Aligning to a physical sector (or optimal</span><br><span class="line">I/O) size boundary is recommended, or performance may be impacted.</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line">********************************************************************</span><br><span class="line">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">演示⬇️</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1️⃣第一步:添加分区,有些地方默认回车就可以,到 LAST 扇区 那里,需要填好分区的大小</span></span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (2 primary, 0 extended, 2 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">分区号 (3,4，默认 3)：</span><br><span class="line">起始 扇区 (21979136-67108863，默认为 21979136)：</span><br><span class="line">将使用默认值 21979136</span><br><span class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (21979136-67108863，默认为 67108863)：+5G</span><br><span class="line">分区 3 已设置为 Linux 类型，大小设为 5 GiB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2️⃣第二步:p命令查看是否添加成功</span></span><br><span class="line">命令(输入 m 获取帮助)：p</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：34.4 GB, 34359738368 字节，67108864 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x6bfb58cf</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048    20973567    10485760   83  Linux</span><br><span class="line">/dev/sdb2        20973568    21979135      502784   82  Linux swap / Solaris</span><br><span class="line">/dev/sdb3        21979136    32464895     5242880   83  Linux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3️⃣第三步:改变分区的类型</span></span><br><span class="line">命令(输入 m 获取帮助)：t</span><br><span class="line">分区号 (1-3，默认 3)：3</span><br><span class="line">Hex 代码(输入 L 列出所有代码)：82</span><br><span class="line">已将分区“Linux”的类型更改为“Linux swap / Solaris”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4️⃣第四步:再次查看是否改变成功</span></span><br><span class="line">命令(输入 m 获取帮助)：p</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：34.4 GB, 34359738368 字节，67108864 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 4096 字节</span><br><span class="line">I/O 大小(最小/最佳)：4096 字节 / 4096 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x6bfb58cf</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048    20973567    10485760   83  Linux</span><br><span class="line">/dev/sdb2        20973568    21979135      502784   82  Linux swap / Solaris</span><br><span class="line">/dev/sdb3        21979136    32464895     5242880   82  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5️⃣第五步:保存退出</span></span><br><span class="line">命令(输入 m 获取帮助)：w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">正在同步磁盘。</span><br></pre></td></tr></table></figure><h2 id="更新磁盘分区表的方法"><a href="#更新磁盘分区表的方法" class="headerlink" title="更新磁盘分区表的方法"></a>更新磁盘分区表的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不重启,立即生效</span></span><br><span class="line">partprobe</span><br><span class="line"><span class="comment"># 重启后生效</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 检查分区是否格式化成功</span></span><br><span class="line">cat /proc/partitions</span><br></pre></td></tr></table></figure><h2 id="格式化磁盘分区的方法"><a href="#格式化磁盘分区的方法" class="headerlink" title="格式化磁盘分区的方法"></a>格式化磁盘分区的方法</h2><p>常用格式:ext2,ext3,ext4,xfs,swap,vfat</p><p>(1)mkfs.xfs /dev/sdb1<br>(2)mkfs.ext4 /dev/sdb2<br>(3)mkfs.ext3 /dev/sdb5<br>(4)mkfs.vfat /dev/sdb3  (注意:在使用fdisk创建/dev/sdb3时,要将其类型修改为FAT32格式)<br>(5)mkswap /dev/sdb6 (注意:在使用fdisk创建/dev/sdb6时,要将其类型修改为SWAP格式)</p><p><strong>注意：</strong>在格式化vfat的时候，会提示-bash: mkfs.vfat: command not found</p><p><strong>解决：</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查询</span></span><br><span class="line">yum provides mkfs.vfat <span class="comment">#或者 yum whatprovides mkfs.vfat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 复制查询出的包名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装</span></span><br><span class="line">yum -y install dosfstools.x86_64</span><br></pre></td></tr></table></figure><h2 id="使用分区存放数据"><a href="#使用分区存放数据" class="headerlink" title="使用分区存放数据"></a>使用分区存放数据</h2><h3 id="方法一-手动挂载"><a href="#方法一-手动挂载" class="headerlink" title="方法一:手动挂载"></a>方法一:手动挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个挂载目录</span></span><br><span class="line">mkdir /mmm1</span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount /dev/sdb2 /mmm1</span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">df -Th(要知道各个字段信息的含义)</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="built_in">cd</span> /mmm1</span><br><span class="line">touch 111.txt</span><br><span class="line">mkdir 111</span><br><span class="line"><span class="comment"># 卸载目录</span></span><br><span class="line">umount /mmm1</span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h3 id="方法二-自动挂载"><a href="#方法二-自动挂载" class="headerlink" title="方法二:自动挂载"></a>方法二:自动挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment"># 文件前三个字段的含义</span></span><br><span class="line"><span class="comment"># 设备文件名/dev/sda1   挂载目标目录/   设备文件名对应的分区的类型ext4</span></span><br><span class="line">/dev/sdb2               /mmm1                   ext4    defaults        0 0</span><br><span class="line"><span class="comment"># 查看挂载情况</span></span><br><span class="line">df -Th  <span class="comment">#发现没有挂载上</span></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 再次查看,挂载成功</span></span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h3 id="方法三-UUID挂载"><a href="#方法三-UUID挂载" class="headerlink" title="方法三:UUID挂载"></a>方法三:UUID挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">blkid   <span class="comment">#显示已格式化的分区的UUID信息</span></span><br><span class="line"><span class="comment"># 注意：各物理设备的 UUID 号是系统定义好的，唯一的，用户无法修改。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：通过mount命令实现手动挂载</span></span><br><span class="line">mount UUID=<span class="string">"0ef71ac1-ac8a-4be9-821e-d98bc21e23f7"</span> /sdb1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二:通过/etc/fstab文件实现开机自动挂载</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line">    UUID=<span class="string">"0ef71ac1-ac8a-4be9-821e-d98bc21e23f7"</span> /sdb1  ext4  defaults  0 0</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><h1 id="swap交换分区的管理"><a href="#swap交换分区的管理" class="headerlink" title="swap交换分区的管理"></a>swap交换分区的管理</h1><h2 id="物理分区实现swap分区大小的变化"><a href="#物理分区实现swap分区大小的变化" class="headerlink" title="物理分区实现swap分区大小的变化"></a>物理分区实现swap分区大小的变化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看内存的详细信息，其中包括交换分区的大小</span></span><br><span class="line">free     </span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        1877420      157032     1530176        9108      190212     1568576</span><br><span class="line">Swap:       2097148           0     2097148</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看swap分区的信息 </span></span><br><span class="line">cat /proc/swaps  </span><br><span class="line"><span class="comment"># 或(两者效果相同)</span></span><br><span class="line">swapon -s</span><br><span class="line"></span><br><span class="line">文件名类型大小已用权限</span><br><span class="line">/dev/dm-1        partition2097148   0  -2</span><br></pre></td></tr></table></figure><h2 id="计算swap的差值"><a href="#计算swap的差值" class="headerlink" title="计算swap的差值"></a>计算swap的差值</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要求将swap分区调整到2600000K</span></span><br><span class="line"><span class="comment"># 已有swap分区大小为 2097148k</span></span><br><span class="line"><span class="comment"># 使用 expr 命令来计算剩余所需大小</span></span><br><span class="line">expr 2600000 - 2097148</span><br><span class="line">502852  <span class="comment">#需要创建一个502852k大小的swap分区</span></span><br></pre></td></tr></table></figure><h2 id="创建一个大小为502852大小的物理分区并将该分区类型修改为swap"><a href="#创建一个大小为502852大小的物理分区并将该分区类型修改为swap" class="headerlink" title="创建一个大小为502852大小的物理分区并将该分区类型修改为swap"></a>创建一个大小为502852大小的物理分区并将该分区类型修改为swap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分区并修改类型(不会的同学翻阅上一节笔记,不要懒惰哦😊)</span></span><br><span class="line">fdisk /dev/sdb  <span class="comment"># swap的代号为 82</span></span><br><span class="line"><span class="comment"># 格式化/dev/sda1 的磁盘</span></span><br><span class="line">mkswap /dev/sdb2</span><br><span class="line"><span class="comment"># 修改/etc/fstab文件实现开机自动挂载</span></span><br><span class="line"><span class="comment"># 永久生效!!!</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line">/dev/sdb2    swap  swap    defaults     0 0</span><br><span class="line"><span class="comment"># 注意：修改完开机自动挂载文件/etc/fstab后，使用mount -a 命令对SWAP分区无效</span></span><br><span class="line"><span class="comment"># 必须重启!!!!!!!!!!!!!!!!</span></span><br><span class="line">swapon -s   <span class="comment"># 发现没有sdb2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动挂载,激活交换分区</span></span><br><span class="line">swapon /dev/sda1</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">swapon -s</span><br><span class="line">free</span><br><span class="line"><span class="comment"># 手动卸载</span></span><br><span class="line">swapoff /dev/sda1</span><br><span class="line">swapon -s</span><br></pre></td></tr></table></figure><h1 id="LVM逻辑卷管理"><a href="#LVM逻辑卷管理" class="headerlink" title="LVM逻辑卷管理"></a>LVM逻辑卷管理</h1><h2 id="物理分区和物理卷"><a href="#物理分区和物理卷" class="headerlink" title="物理分区和物理卷"></a>物理分区和物理卷</h2><p>逻辑过程:</p><p>物理分区 -&gt; 物理卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分区</span></span><br><span class="line">fdisk /dev/sdb</span><br><span class="line"><span class="comment"># 创建物理卷</span></span><br><span class="line">pvcreate /dev/sdb5</span><br><span class="line"><span class="comment"># 删除物理卷</span></span><br><span class="line"><span class="comment"># 如果该物理卷已经加入到了 卷组 中,并且该 卷组 已经创建了 逻辑卷</span></span><br><span class="line"><span class="comment"># 那么应该首先释放该 物理卷 中的 PE 块, pvmove /dev/sdb5</span></span><br><span class="line"><span class="comment"># 然后把该物理卷从 卷组 中移除, vgreduce vg9 /dev/sdb5</span></span><br><span class="line"><span class="comment"># 然后就可以删除 物理卷 了</span></span><br><span class="line">pvremove /dev/sdb5</span><br><span class="line"><span class="comment"># 查看物理卷</span></span><br><span class="line">pvdisplay</span><br></pre></td></tr></table></figure><h2 id="卷组"><a href="#卷组" class="headerlink" title="卷组"></a>卷组</h2><p>关系: 物理卷 + 物理卷 + … = 卷组<br>卷组可以包含多个物理卷并且卷组的大小可以动态的调整</p><p>如何创建卷组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式: vgcreate 卷组名 物理卷1 物理卷2 ...</span></span><br><span class="line">vgcreate vg9 /dev/sdb1 /dev/sdb2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除卷组</span></span><br><span class="line">vgremove vg9</span><br><span class="line"><span class="comment"># 移除卷组中的物理卷</span></span><br><span class="line">vgreduce vg9 /dev/sdb5</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看卷组vg9的基本信息</span></span><br><span class="line">vgdisplay -v vg9 </span><br><span class="line"><span class="comment"># 查看卷组vg9的使用情况</span></span><br><span class="line">vgdisplay -s</span><br></pre></td></tr></table></figure><p><code>PE</code>(物理块):它是卷组创建时要指定的基本逻辑单位，4M(默认),8M,12M…(4的整数倍即可)</p><h2 id="逻辑卷"><a href="#逻辑卷" class="headerlink" title="逻辑卷"></a>逻辑卷</h2><p>从<code>卷组</code>中划拨出<code>逻辑卷</code><br><code>逻辑卷</code>的大小也可以动态的调整<br>约束条件：以PE的<code>整数倍</code>进行增加或减小</p><p>小提示💡:逻辑卷所占用的PE，可以跨越不同的物理卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建逻辑卷</span></span><br><span class="line"><span class="comment"># 格式: lvcreate -n 逻辑卷名称 -L 逻辑卷大小(加不加单位都可以) 卷组名</span></span><br><span class="line">lvcreate -n lv0 -L 80 vg9  <span class="comment">#创建了一个逻辑卷名称叫lv0,大小80M，位于卷组vg9中</span></span><br><span class="line"><span class="comment"># 逻辑卷格式化</span></span><br><span class="line">mkfs.ext4 /dev/vg9/lv0 </span><br><span class="line"><span class="comment"># 删除逻辑卷</span></span><br><span class="line">lvremove /dev/vg9/lv0</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">lvdisplay</span><br></pre></td></tr></table></figure><h2 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h2><p>动态的调整卷组的大小<br>动态的调整逻辑卷的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">创建三个物理分区，并将它们指定成三个大小都为100M的物理卷</span><br><span class="line">再建立一个卷组vg9,当中要包含两个物理卷</span><br><span class="line">在卷组vg9中创建两个逻辑卷lv0,lv1，大小分别是100M和40M,要求分别用xfs和ext4格式化，并自动挂载到目录/lvm0和/lvm1上</span><br><span class="line">要求动态增加lv0是20M，减小lv1的大小12M</span><br><span class="line">从卷组vg9中添加、删除物理卷进行测试</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步:创建三个大小为100M的物理分区/dev/sdb5,/dev/sdb6./dev/sdb7,类型都改为 8e</span></span><br><span class="line">fdisk /dev/sdb</span><br><span class="line">partprobe   <span class="comment">#刷新</span></span><br><span class="line">fdisk -l    <span class="comment">#查看</span></span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步:将物理分区/dev/sdb5建立成物理卷/dev/sdb5</span></span><br><span class="line">pvcreate /dev/sdb5</span><br><span class="line">pvcreate /dev/sdb6</span><br><span class="line">pvcreate /dev/sdb7</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">pvdisplay</span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步:把其中两个物理卷加入到新建的卷组vg9中</span></span><br><span class="line"><span class="comment"># 创建卷组vg9,包含物理卷/dev/sdb5和/dev/sdb6,默认PE大小4M</span></span><br><span class="line">vgcreate vg9 /dev/sdb5 /dev/sdb6</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">vgdisplay -v</span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步:创建逻辑卷</span></span><br><span class="line"><span class="comment"># 新建名为lv0,大小为100M的逻辑卷 </span></span><br><span class="line">lvcreate -n lv0 -L 100 vg9 </span><br><span class="line"><span class="comment"># 新建名为lv1,大小为40M的逻辑卷 </span></span><br><span class="line"><span class="comment"># -l : PE的个数,如果不做修改的话,PE默认大小为4M</span></span><br><span class="line"><span class="comment"># -L : 直接设置逻辑卷的大小</span></span><br><span class="line">lvcreate -n lv1 -l 10 vg9</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">lvdisplay</span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步:对逻辑卷进行格式化</span></span><br><span class="line">mkfs.xfs /dev/vg9/lv0</span><br><span class="line">mkfs. ext4 /dev/vg9/lv1</span><br><span class="line"><span class="comment"># 查看UUID</span></span><br><span class="line">blkid</span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第六步:创建目标目录/lvm0和/lvm1</span></span><br><span class="line">mkdir /lv0</span><br><span class="line">mkdir /lv1</span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第七步:挂载</span></span><br><span class="line"><span class="comment"># 方式一:手动挂载</span></span><br><span class="line">mount /dev/vg9/lv0 /lv0</span><br><span class="line"><span class="comment"># 方式二:开机自动挂载</span></span><br><span class="line"><span class="comment"># 不要用UUID挂载,有问题</span></span><br><span class="line">vim /etc/fstab  </span><br><span class="line">/dev/vg9/lv0            /lv0                   xfs    defaults        0 0</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">df -Th</span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第八步:增加文件系统的大小</span></span><br><span class="line"><span class="comment"># 增加文件系统大小 不必卸载 文件目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 增加逻辑卷容量</span></span><br><span class="line">lvresize -L +20M /dev/vg9/lv0   <span class="comment">#增加逻辑卷lv0大小20M</span></span><br><span class="line"><span class="comment"># 注意：此时仅仅增加的是 逻辑卷lv0 的大小；</span></span><br><span class="line">lvdisplay</span><br><span class="line"><span class="comment"># 逻辑卷 lv0 对应的 文件系统的大小 并未增加</span></span><br><span class="line"><span class="comment"># 测试方法：mount 命令将其挂载到目标目录上，用df -Th看其对应的文件系统大小仍然为100M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确解法:</span></span><br><span class="line"><span class="comment"># 增加文件系统大小,目录一定要处于挂载上的状态,不然无法更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 更新</span></span><br><span class="line">xfs_growfs /dev/vg9/lv0     <span class="comment">#更新逻辑卷lv0所对应的 xfs 文件系统的大小</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">resize2fs /dev/vg9/lv0      <span class="comment">#更新逻辑卷lv0所对应的 ext4, 3 文件系统的大小</span></span><br><span class="line"><span class="comment"># 再次用df -Th看文件系统大小也为120M了</span></span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第九步:减小文件系统的大小</span></span><br><span class="line"><span class="comment"># 1. 跟增加不同的是,ext4减小需要卸载目录,不先卸载文件目录的话会报错</span></span><br><span class="line">umount /lv1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 更新</span></span><br><span class="line">resize2fs /dev/vg9/lv1 28M  <span class="comment">#更新逻辑卷lv1所对应的ext2,3,4文件系统减小至28M</span></span><br><span class="line"><span class="comment"># 运行上边的命令会提示先运行 e2fsck -f /dev/vg9/lv1 ，要求先检查文件系统，运行该条命令就没有问题了。</span></span><br><span class="line"><span class="comment"># 3. 将逻辑卷lv1的大小减小至28M</span></span><br><span class="line">lvresize -L -12M /dev/vg9/lv1 </span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">df -Th</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第十步:向卷组vg9中添加新的物理卷</span></span><br><span class="line">vgextend vg9 /dev/sdb7</span><br><span class="line">vgdisplay -v</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第十一步:从卷组vg9中删除物理卷</span></span><br><span class="line"><span class="comment">#释放与物理卷/dev/sdb5包含的PE</span></span><br><span class="line">pvmove /dev/sdb5  </span><br><span class="line"><span class="comment">#从卷组vg9中删除物理卷/dev/sdb5</span></span><br><span class="line">vgreduce vg9 /dev/sdb5  </span><br><span class="line"><span class="comment">#查看卷组vg9的基本信息</span></span><br><span class="line">vgdisplay -v vg9 </span><br><span class="line"><span class="comment"># 查看卷组vg9的使用情况</span></span><br><span class="line">vgdisplay -s </span><br><span class="line"><span class="comment"># 注意：逻辑卷/dev/vg9/lv0所占用的PE可以跨越不同的物理分区</span></span><br></pre></td></tr></table></figure><h2 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h2><p>创建逻辑卷database,属于卷组datastore<br>逻辑卷的大小为10个扩展物理单元(PE)<br>PE的大小为16M<br>使用xfs文件系统格式化该逻辑卷,并自动挂载到/mnt/database上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步:创建三个物理分区，大小都为160M，类型为8e</span></span><br><span class="line">fdisk /dev/sdb</span><br><span class="line">   8       24     171089 sdb8</span><br><span class="line">   8       25     171089 sdb9</span><br><span class="line">   8       26     171089 sdb10</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步:创建物理卷</span></span><br><span class="line">pvcreate /dev/sdb8</span><br><span class="line">pvcreate /dev/sdb9</span><br><span class="line">pvcreate /dev/sdb10</span><br><span class="line">pvdisplay</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步:创建卷组datastore,PE为16M,包含/dev/sdb8,/dev/sdb9</span></span><br><span class="line"><span class="comment"># -s : 设置PE的大小</span></span><br><span class="line">vgcreate -s 16M datastore /dev/sdb8 /dev/sdb9</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">vgdisplay -v datastore</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步:创建逻辑卷database,大小为10个PE,即160M，并用xfs格式化。</span></span><br><span class="line">lvcreate -l 10 -n database datastore</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">lvdisplay</span><br><span class="line"><span class="comment"># 格式化为xfs格式</span></span><br><span class="line">mkfs.xfs /dev/datastore/database</span><br><span class="line"><span class="comment"># 查看UUID</span></span><br><span class="line">blkid</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步:创建目标目录/mnt/database</span></span><br><span class="line">mkdir /mnt/database</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第六步:修改自动挂载文件</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line">    /dev/datastore/database  /mnt/database          xfs    defaults        0 0</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">df -Th</span><br><span class="line">    /dev/mapper/datastore-database xfs       154M  8.3M  146M    6% /mnt/database</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第七步:调整逻辑卷database及其文件系统的大小为240M.</span></span><br><span class="line">lvresize -L +80M /dev/datastore/database    <span class="comment">#增加逻辑卷大小80M</span></span><br><span class="line">xfs_growfs /dev/datastore/database          <span class="comment">#更新逻辑卷所对应的xfs文件系统的大小。</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">df -Th</span><br><span class="line">lvdisplay</span><br><span class="line"></span><br><span class="line">**************************************************************************</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第八步:调整逻辑卷database及其文件系统大小为80M</span></span><br><span class="line">lvresize -L -160M /dev/datastore/database   <span class="comment">#将逻辑卷的大小减小160M</span></span><br><span class="line">xfs_growfs /dev/datastore/database          <span class="comment">#更新逻辑卷所对应的xfs文件系统的大小至80M。</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">lvdisplay   <span class="comment">#逻辑卷的大小改变了</span></span><br><span class="line">df -Th      <span class="comment">#挂载目录大小没变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现挂载目录大小并没有改变</span></span><br><span class="line"><span class="comment"># 这是因为xfs格式只能增加,无法减小!!!!!!!!!!!!!</span></span><br><span class="line"><span class="comment"># 若是非要减小,只能重新格式化</span></span><br><span class="line"><span class="comment"># 这样做的话,文件里的东西就都被格式化了,不建议如此操作</span></span><br><span class="line"><span class="comment"># 如果真的想这么做,命令如下⬇️:</span></span><br><span class="line"></span><br><span class="line">lvresize -L -160M /dev/datastore/database   <span class="comment">#将逻辑卷的大小减小160M</span></span><br><span class="line">umount /dev/datastore/database              <span class="comment">#卸载目录</span></span><br><span class="line">mkfs.xfs -f /dev/datastore/database         <span class="comment">#强制格式化</span></span><br><span class="line">mount -a                                    <span class="comment">#重新挂载目录(之前已经配置过开机自启动)</span></span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h1 id="网络环境配置"><a href="#网络环境配置" class="headerlink" title="网络环境配置"></a>网络环境配置</h1><h2 id="配置静态IP地址"><a href="#配置静态IP地址" class="headerlink" title="配置静态IP地址"></a>配置静态IP地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看IP</span></span><br><span class="line">ip a</span><br></pre></td></tr></table></figure><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙规则状态是否为关闭</span></span><br><span class="line">systemctl status firewalld </span><br><span class="line"></span><br><span class="line">systemctl start firewalld   <span class="comment">#开启iptables</span></span><br><span class="line">systemctl status firewalld  <span class="comment">#查看iptables的状态</span></span><br><span class="line">systemctl stop firewalld    <span class="comment">#关闭iptables</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看SElinux的状态是否为关闭状态 </span></span><br><span class="line">getenforce </span><br><span class="line"></span><br><span class="line">getenforce      <span class="comment">#查看SELinux的状态</span></span><br><span class="line">setenforce 0    <span class="comment">#关闭SElinux</span></span><br><span class="line">setenforce 1    <span class="comment">#打开SElinux</span></span><br><span class="line"></span><br><span class="line">将SElinux设置为关闭状态的永久生效方法</span><br><span class="line">vim /etc/sysconfig/selinux  <span class="comment">#将 enforcing 改为 disabled</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line">    <span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line">    <span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line">    <span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line">    <span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">    SELINUX=enforcing</span><br><span class="line">    <span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line">    <span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line">    <span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class="line">    <span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">    SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><h3 id="删除旧的IP地址"><a href="#删除旧的IP地址" class="headerlink" title="删除旧的IP地址"></a>删除旧的IP地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr del 192.168.122.51/24 dev eth0</span><br></pre></td></tr></table></figure><h3 id="配置新的静态IP地址"><a href="#配置新的静态IP地址" class="headerlink" title="配置新的静态IP地址"></a>配置新的静态IP地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">   DEVICE=<span class="string">"eth0"</span></span><br><span class="line">   BOOTPROTO=<span class="string">"static"</span></span><br><span class="line">   ONBOOT=<span class="string">"yes"</span></span><br><span class="line">   TYPE=<span class="string">"Ethernet"</span></span><br><span class="line">   IPADDR=192.168.122.100   //IP地址</span><br><span class="line">   PREFIX=24                //子网掩码</span><br><span class="line">   GATEWAY=192.168.122.1    //网关</span><br><span class="line">   DNS1=202.207.48.3        //DNS服务器</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网络服务</span></span><br><span class="line">systemctl restart network  </span><br><span class="line"></span><br><span class="line">ip a  <span class="comment">#IP地址已经被修改成了192.168.122.100</span></span><br></pre></td></tr></table></figure><h2 id="配置动态IP地址"><a href="#配置动态IP地址" class="headerlink" title="配置动态IP地址"></a>配置动态IP地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙规则状态是否为关闭</span></span><br><span class="line">systemctl status firewalld </span><br><span class="line"><span class="comment"># 查看SElinux的状态是否为关闭状态</span></span><br><span class="line">getenforce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除旧的IP地址</span></span><br><span class="line">ip addr del 192.168.122.100/24 dev eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置新的动态IP地址</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">   DEVICE=<span class="string">"eth0"</span></span><br><span class="line">   BOOTPROTO=<span class="string">"dhcp"</span></span><br><span class="line">   ONBOOT=<span class="string">"yes"</span></span><br><span class="line">   TYPE=<span class="string">"Ethernet"</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 重启网络服务</span></span><br><span class="line">systemctl restart network</span><br><span class="line">ip a  <span class="comment">#IP 地址已经被修改成了192.168.122.X</span></span><br></pre></td></tr></table></figure><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>临时绑定多个IP地址当网卡eth0<br><code>ip addr add 192.168.122.X/24 dev eth0</code><br>ip a //可以查看到新绑定的IP地址</p><p><strong>注意：</strong>如果重启网络服务（systemctl restart network ），则使用 ip addr del 192.168.122.51/24 dev eth0或者ip addr add 192.168.122.X/24 dev eth0命令删除或添加的IP地址会失效。</p><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><p>方法一：使用<code>hostnamectl set-hostname 51</code>命令，将主机名修改为<code>51</code><br><strong>注意：</strong>需要退出并重新登录后方可生效，主机名一旦修改，永久生效。</p><p>方法二：使用“vim /etc/hostname”命令，修改主机名配置文件，直接将文件中原来的主机名localhost.localdomain修改为新主机名<br>重新登录或者重启系统后，新主机名就会生效。</p><h1 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h1><h2 id="tar命令-归档-的使用"><a href="#tar命令-归档-的使用" class="headerlink" title="tar命令(归档)的使用"></a>tar命令(归档)的使用</h2><h3 id="创建tar包"><a href="#创建tar包" class="headerlink" title="创建tar包"></a>创建tar包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -c 创建归档包</span></span><br><span class="line"><span class="comment"># -v 显示详细的提示信息</span></span><br><span class="line"><span class="comment"># -f 指定文件名</span></span><br><span class="line">tar -cvf etc.tar /etc</span><br></pre></td></tr></table></figure><h3 id="创建压缩的tar包"><a href="#创建压缩的tar包" class="headerlink" title="创建压缩的tar包"></a>创建压缩的tar包</h3><p>两种压缩技术: <code>gzip</code> 和 <code>bzip</code></p><h4 id="gzip-gz"><a href="#gzip-gz" class="headerlink" title="gzip: ***.gz"></a>gzip: ***.gz</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在tar命令中添加一个参数 -z</span></span><br><span class="line">tar -zcvf bgl.tar.gz /etc   <span class="comment">#压缩目录</span></span><br><span class="line"><span class="comment"># 查看压缩包的大小</span></span><br><span class="line">du -sh etc.tar.gz</span><br><span class="line">tar -zcvf file.tar.gz 111.txt 222.txt    <span class="comment">#压缩文件</span></span><br></pre></td></tr></table></figure><h4 id="bzip2-bz2"><a href="#bzip2-bz2" class="headerlink" title="bzip2: ***.bz2"></a>bzip2: ***.bz2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在tar命令中添加一个参数 -j</span></span><br><span class="line">tar -jcvf etc.tar.bz2 /etc  <span class="comment">#压缩目录</span></span><br><span class="line">tar -jcvf file.tar.bz2 111.txt 222.txt   <span class="comment">#压缩文件</span></span><br></pre></td></tr></table></figure><h2 id="查询tar包中包含的文件目录列表"><a href="#查询tar包中包含的文件目录列表" class="headerlink" title="查询tar包中包含的文件目录列表"></a>查询tar包中包含的文件目录列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -t 查看是否使用tar命令来归档的包</span></span><br><span class="line"><span class="comment"># -f 指定文件名</span></span><br><span class="line">tar -tf aaa.tar.gz</span><br><span class="line">tar -tf aaa.tar.bz2</span><br></pre></td></tr></table></figure><h2 id="释放tar包"><a href="#释放tar包" class="headerlink" title="释放tar包"></a>释放tar包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认释放在当前目录下</span></span><br><span class="line"><span class="comment"># 在tar命令中添加一个参数 -x</span></span><br><span class="line"><span class="comment"># 一般情况下使用: -xf 即可</span></span><br><span class="line">tar -xzvf etc.tar.gz</span><br><span class="line">tar -xjvf etc.tar.bz2</span><br></pre></td></tr></table></figure><h2 id="释放在指定目录下"><a href="#释放在指定目录下" class="headerlink" title="释放在指定目录下"></a>释放在指定目录下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -C : 指定释放的目录</span></span><br><span class="line">mkdir /666</span><br><span class="line">tar -xjvf bgl.tar.bz2 -C /666</span><br></pre></td></tr></table></figure><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>使用bzip2压缩,将/etc目录归档并压缩到/root/backup.tar.bz2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf /root/backup.tar.bz2 /etc</span><br></pre></td></tr></table></figure><h2 id="压缩知识扩展"><a href="#压缩知识扩展" class="headerlink" title="压缩知识扩展"></a>压缩知识扩展</h2><h3 id="gzip压缩的两种技术"><a href="#gzip压缩的两种技术" class="headerlink" title="gzip压缩的两种技术"></a>gzip压缩的两种技术</h3><h4 id="压缩技术一-gunzip-gzip"><a href="#压缩技术一-gunzip-gzip" class="headerlink" title="压缩技术一(gunzip,gzip)"></a>压缩技术一(gunzip,gzip)</h4><p><code>覆盖</code>源文件的压缩技术,但<code>无法压缩目录</code>       </p><p>参数:</p><ul><li>-d : 解压参数</li><li>-f : 强制覆盖以存在的同名压缩包</li><li>-v : 显示压缩过程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">gzip -v &#123;1,2,3&#125;.txt   <span class="comment">#压缩效果是将源文件1.txt替换为1.txt.gz</span></span><br><span class="line"><span class="comment"># 注意：使用gzip命令压缩后,源文件就不存在了。</span></span><br><span class="line">gzip -fv &#123;1,2,3&#125;.txt  <span class="comment">#如果目标位置有同名的压缩文件（1.txt.gz）存在，则覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">gzip -d 111.txt.gz  <span class="comment">#解压的效果是将压缩文件111.txt.gz还原为111.txt。</span></span><br><span class="line">gunzip 111.txt.gz   <span class="comment">#gunzip命令与gzip -d的效果解压相同。</span></span><br></pre></td></tr></table></figure><h4 id="压缩技术二-tar-gz"><a href="#压缩技术二-tar-gz" class="headerlink" title="压缩技术二(tar.gz)"></a>压缩技术二(tar.gz)</h4><p>归档压缩技术，同前</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar zcvf filename.tar.gz -C /tmp/ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar zxvf filename.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示列表</span></span><br><span class="line">tar tf filname.tar</span><br></pre></td></tr></table></figure><h3 id="bzip2压缩的两种技术"><a href="#bzip2压缩的两种技术" class="headerlink" title="bzip2压缩的两种技术"></a>bzip2压缩的两种技术</h3><h4 id="压缩技术一-bunzip2-bzip2"><a href="#压缩技术一-bunzip2-bzip2" class="headerlink" title="压缩技术一(bunzip2,bzip2)"></a>压缩技术一(bunzip2,bzip2)</h4><p><code>覆盖</code>源文件的压缩技术,但<code>无法压缩目录</code>     </p><p>参数:</p><ul><li>-d : 解压参数</li><li>-f : 强制覆盖以存在的同名压缩包</li><li>-v : 显示压缩过程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">bzip2  &#123;1,2,3&#125;.txt  <span class="comment">#压缩效果是将源文件1.txt替换为1.txt.bz2</span></span><br><span class="line"><span class="comment"># 注意：使用bzip2命令压缩后，源文件就不存在了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">bzip2 -d 1.txt.bz2  <span class="comment">#解压的效果是将压缩文件111.txt.bz2还原为111.txt</span></span><br><span class="line">bunzip2 1.txt.bz2 <span class="comment">#效果同上</span></span><br></pre></td></tr></table></figure><h4 id="压缩技术二-tar-bz2"><a href="#压缩技术二-tar-bz2" class="headerlink" title="压缩技术二(tar.bz2)"></a>压缩技术二(tar.bz2)</h4><p>归档压缩技术，同前</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar jcvf filename.tar.bz2 descfilename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压 </span></span><br><span class="line">tar jxvf filename.tar.bz2 </span><br><span class="line">tar --bzip xvf filename.tar.bz2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">tar tf filname.tar</span><br></pre></td></tr></table></figure><h3 id="zip压缩技术"><a href="#zip压缩技术" class="headerlink" title="zip压缩技术"></a>zip压缩技术</h3><p><code>不覆盖</code>源文件的压缩技术</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line"><span class="comment"># 格式:zip filename.zip sourcefilename</span></span><br><span class="line">zip 111.txt.zip 111.txt  <span class="comment">#压缩效果是将源文件111.txt压缩为111.txt.zip</span></span><br><span class="line"><span class="comment"># 注意：使用该命令压缩后，源文件仍然存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩一个目录使用 -r 参数,-r 递归</span></span><br><span class="line">zip -r 222.zip 222   <span class="comment">#将目录222压缩为222.zip，压缩后源目录仍然存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="comment"># 格式:unzip filename.zip      </span></span><br><span class="line">unzip 222.zip   <span class="comment">#解压效果是将222.zip解压为222目录</span></span><br><span class="line"><span class="comment">#注意：如果当前位置已经有222目录，则会提示是否覆盖</span></span><br></pre></td></tr></table></figure><h1 id="autofs自动挂载"><a href="#autofs自动挂载" class="headerlink" title="autofs自动挂载"></a>autofs自动挂载</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>autofs自动挂载器是一个监视目录的守护进程，并在目标子目录被引用时，自动执行预定义的NFS挂载。自动挂载器由autofs服务脚本管理，自动挂载器由auto.master一级配置文件进行配置，该文件引用了一个按惯例称作/etc/auto.misc或其他类似名称的二级配置文件。autofs与NFS两者之间配合用的还是比较多的</p><h2 id="使用目的"><a href="#使用目的" class="headerlink" title="使用目的"></a>使用目的</h2><p>autofs服务动态自动挂载各种文件系统。mount是用来挂载文件系统的，可以在启动的时候挂载也可以在启动后挂载。这就好像windows中的光驱自动打开功能，能够及时挂载动态加载的文件系统，免去了手动挂载的麻烦。在centos7.2系统下，对于本地固定设备，如硬盘可以使用mount挂载，而光盘，软盘，NFS，SMB等文件系统具有动态性，即需要的时候才有必要挂载，光驱和软盘一般知道什么时候需要挂载，但NFS，SMB共享等就不一定知道了，即一般不能及时知道NFS共享和SMB什么时候可以挂载，而autofs服务就提供这种功能，所以本章详细讲述了autofs自动挂载方式</p><h2 id="需要安装的软件"><a href="#需要安装的软件" class="headerlink" title="需要安装的软件"></a>需要安装的软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install autofs*</span><br><span class="line">yum -y install nfs*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>要求:将分区 <code>/dev/sdb1</code> 自动挂载到 <code>/misc/aaa</code> 目录下</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步: 利用 fdisk 添加一块新磁盘</span></span><br><span class="line"><span class="comment"># 添加磁盘此处略过,不会的同学请去复习前面的内容,复习很重要哦</span></span><br><span class="line"><span class="comment"># 要求格式化为 ext4格式</span></span><br><span class="line">mkfs.ext4 /dev/sdb1</span><br><span class="line">blkid</span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"><span class="comment"># 第二步: 具体配置</span></span><br><span class="line"><span class="comment"># 打开一级文件</span></span><br><span class="line">vim /etc/auto.master    <span class="comment">#当访问/misc目录时,会自动查询二级文件/etc/auto.misc</span></span><br><span class="line"><span class="comment"># 打开二级文件</span></span><br><span class="line">vim /etc/auto.misc</span><br><span class="line">    <span class="comment">#填入以下内容</span></span><br><span class="line">    aaa  -fstype=ext4  :/dev/sdb2</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"><span class="comment"># 第三步: 重启服务</span></span><br><span class="line">systemctl restart autofs</span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"><span class="comment"># 第四步: 切换目录,触发文件挂载机制</span></span><br><span class="line"><span class="built_in">cd</span> /misc/aaa</span><br><span class="line"><span class="comment"># 查看是否挂载成功</span></span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h1 id="NFS自动挂载"><a href="#NFS自动挂载" class="headerlink" title="NFS自动挂载"></a>NFS自动挂载</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>NFS（Network File System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样</p><p>NFS最显而易见的优点：</p><ol><li><p>节省本地存储空间，将常用的数据存放在一台NFS服务器上且可以通过网络访问，那么本地终端将可以减少自身存储空间的使用。</p></li><li><p>用户不需要在网络中的每个机器上都建有Home目录，Home目录可以放在NFS服务器上且可以在网络上被访问使用。</p></li><li><p>一些存储设备如软驱、CDROM和Zip（一种高储存密度的磁盘驱动器与磁盘）等都可以在网络上被别的机器使用。这可以减少整个网络上可移动介质设备的数量</p></li></ol><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>要求:将NFS<strong>服务器</strong>上发布的<code>共享目录/home/guests/guest2019</code>自动挂载到<strong>客户机</strong>的<code>/home/guests/guest2019</code>上</p><p>开两台虚拟机,一台作为<code>服务器</code>,另一台作为<code>客户机</code>来测试</p><h2 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立共享目录</span></span><br><span class="line">mkdir -p /home/guests/guest2019</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改NFS主配置文件</span></span><br><span class="line">vim /etc/exports</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填入以下内容</span></span><br><span class="line">    /home/guests/guest2019 10.211.55.0/24(rw,sync,no_root_squash)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析:</span></span><br><span class="line">    <span class="comment"># IP 字段表示允许IP地址范围在 10.211.55.0 网段的计算机访问共享目录 “/home/guests/guest2006”</span></span><br><span class="line">    <span class="comment"># “rw”表示有读写权限</span></span><br><span class="line">    <span class="comment"># “sync”表示数据同步写入内存和硬盘</span></span><br><span class="line">    <span class="comment"># “no_root_squash”表示NFS服务器共享目录用户的属性，如果用户是root，那么这个共享目录具有root的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server.service</span><br></pre></td></tr></table></figure><h2 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h2><h3 id="方式一-手动挂载"><a href="#方式一-手动挂载" class="headerlink" title="方式一:手动挂载"></a>方式一:手动挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在客户机行新建一个挂载目录 /syz</span></span><br><span class="line">mkdir /syz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看NFS服务器发布的共享资源信息</span></span><br><span class="line"><span class="comment"># 注意: 需要关闭服务器端的防火墙,不然会出现查询错误</span></span><br><span class="line">showmount -e 10.211.55.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动挂载</span></span><br><span class="line">mount 10.211.55.5:/home/guests/guest2019 /syz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否挂载成功</span></span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure><h3 id="方式二-autofs自动挂载"><a href="#方式二-autofs自动挂载" class="headerlink" title="方式二:autofs自动挂载"></a>方式二:autofs自动挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 隐含原则：</span></span><br><span class="line"><span class="comment"># 若将NFS服务器上发布的共享目录自动挂载到客户端的n层目录上</span></span><br><span class="line"><span class="comment"># 则将前n-1层目录放置于一级文件中</span></span><br><span class="line"><span class="comment"># 最后一层目录放入二级文件中</span></span><br><span class="line"><span class="comment"># 并且除了最后一层目录，其他目录都需提前建立号好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立需要的目录</span></span><br><span class="line">mkdir /home/guests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑一级文件</span></span><br><span class="line">vim /etc/auto.master</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填入以下内容</span></span><br><span class="line">    <span class="comment"># auto.two_master 是我随便起的,自己编写一个记得住的名字即可</span></span><br><span class="line">    /home/guests /etc/auto.two_master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑二级文件</span></span><br><span class="line">vim /etc/auto.two_master</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填入以下内容</span></span><br><span class="line">    guest2019 -fstype=nfs,rw 10.211.55.5:/home/guests/guest2019</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 /syz 目录</span></span><br><span class="line">umount /syz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否卸载成功</span></span><br><span class="line">df -Th</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启autofa服务</span></span><br><span class="line">systemctl restart autofs</span><br><span class="line">systemctl <span class="built_in">enable</span> autofs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录,触发autofa挂载机制</span></span><br><span class="line"><span class="comment"># 如果出现没有该目录,检查二级文件是否编写错误</span></span><br><span class="line"><span class="built_in">cd</span> /home/guests/guest2019</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否挂载成功</span></span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk的使用方法</title>
      <link href="/2019/09/05/awk%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/05/awk%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="awk的使用"><a href="#awk的使用" class="headerlink" title="awk的使用"></a>awk的使用</h1><h2 id="awk的处理方式与格式"><a href="#awk的处理方式与格式" class="headerlink" title="awk的处理方式与格式"></a>awk的处理方式与格式</h2><h3 id="awk的处理方式"><a href="#awk的处理方式" class="headerlink" title="awk的处理方式"></a>awk的处理方式</h3><ul><li>awk一次处理一行内容</li><li>awk可以对每行进行切片处理</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="awk的格式"><a href="#awk的格式" class="headerlink" title="awk的格式"></a>awk的格式</h3><h4 id="命令行格式"><a href="#命令行格式" class="headerlink" title="命令行格式"></a>命令行格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [options] <span class="string">'command'</span> files</span><br></pre></td></tr></table></figure><p>command1:pattern {awk操作命令}</p><p>操作命令：</p><ul><li>内置函数：print(),printf(),getline…</li><li>控制指令：if(){…}else{…},while()</li></ul><h4 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -f awk-script-file file(s)</span><br></pre></td></tr></table></figure><h4 id="扩展格式"><a href="#扩展格式" class="headerlink" title="扩展格式"></a>扩展格式</h4><p>BEGIN{…}{…}END{…}</p><p>示例：</p><p>以制表的形式输出<code>passwd</code>文件中的<code>NR,NF,User</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;print "Line\t Columns User"&#125;&#123;print NR"\t",NF"\t",$1&#125;END&#123;print "-------"FILENAME"-------"&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Line     Columns User</span><br><span class="line">1        7       root</span><br><span class="line">2        7       bin</span><br><span class="line">3        7       daemon</span><br><span class="line">4        7       adm</span><br><span class="line">5        7       lp</span><br><span class="line">6        7       sync</span><br><span class="line">7        7       shutdown</span><br><span class="line">8        7       halt</span><br><span class="line">9        7       mail</span><br><span class="line">10       7       operator</span><br><span class="line">11       7       games</span><br><span class="line">12       7       ftp</span><br><span class="line">13       7       nobody</span><br><span class="line">14       7       systemd-network</span><br><span class="line">15       7       dbus</span><br><span class="line">16       7       polkitd</span><br><span class="line">17       7       abrt</span><br><span class="line">18       7       tss</span><br><span class="line">19       7       postfix</span><br><span class="line">20       7       chrony</span><br><span class="line">21       7       sshd</span><br><span class="line">22       7       mysql</span><br><span class="line">-------passwd-------</span><br></pre></td></tr></table></figure><h2 id="awk的内置参数"><a href="#awk的内置参数" class="headerlink" title="awk的内置参数"></a>awk的内置参数</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>$0 : 表示整个当前行</p></li><li><p>$1 : 表示第一个字段</p></li><li><p>$2 : 每行第二个字段<br>以此类推</p></li><li><p>NR : 每行的记录号（行号）</p></li><li><p>NF : 字段数（以分隔符为参照物）</p></li><li><p>FILENAME : 正在处理的文件名<br>示例：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print NR,NF&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1 7</span><br><span class="line">2 7</span><br><span class="line">3 7</span><br><span class="line">4 7</span><br><span class="line">5 7</span><br><span class="line">6 7</span><br><span class="line">7 7</span><br><span class="line">8 7</span><br><span class="line">9 7</span><br><span class="line">10 7</span><br><span class="line">11 7</span><br><span class="line">12 7</span><br><span class="line">13 7</span><br><span class="line">14 7</span><br><span class="line">15 7</span><br><span class="line">16 7</span><br><span class="line">17 7</span><br><span class="line">18 7</span><br><span class="line">19 7</span><br><span class="line">20 7</span><br><span class="line">21 7</span><br><span class="line">22 7</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print FILENAME&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure><ul><li>~ : 对变量进行更加详细的匹配</li></ul><p>示例：</p><p>输出<code>passwd</code>文件中以<code>a-c</code>开头的用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'$1~/^[a-c].*/&#123;print $1&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin</span><br><span class="line">adm</span><br><span class="line">abrt</span><br><span class="line">chrony</span><br></pre></td></tr></table></figure><p>输出<code>passwd</code>文件中不以<code>a-c</code>开头的用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'$1!~/^[a-c].*/&#123;print $1&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">daemon</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">ftp</span><br><span class="line">nobody</span><br><span class="line">systemd-network</span><br><span class="line">dbus</span><br><span class="line">polkitd</span><br><span class="line">tss</span><br><span class="line">postfix</span><br><span class="line">sshd</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure><ul><li>“&gt;,&lt;,==,!=” : 逻辑判断 </li></ul><p>示例：</p><p>输出<code>passwd</code>文件中<code>UID</code>大于80的用户名和UID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'$3&gt;80&#123;print $1,$3&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nobody 99</span><br><span class="line">systemd-network 192</span><br><span class="line">dbus 81</span><br><span class="line">polkitd 999</span><br><span class="line">abrt 173</span><br><span class="line">postfix 89</span><br><span class="line">chrony 998</span><br></pre></td></tr></table></figure><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>options: -F field-separator(默认为空格)</p><p>示例：</p><p>打印<code>passwd</code>中的<code>组id</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">14</span><br><span class="line">99</span><br><span class="line">192</span><br><span class="line">81</span><br><span class="line">999</span><br><span class="line">173</span><br><span class="line">59</span><br><span class="line">89</span><br><span class="line">998</span><br><span class="line">74</span><br><span class="line">27</span><br></pre></td></tr></table></figure><p>打印<code>passwd</code>中的<code>用户名</code>和<code>组id</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print "USER:"$1,"  UID:"$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">USER:root  UID:0</span><br><span class="line">USER:bin  UID:1</span><br><span class="line">USER:daemon  UID:2</span><br><span class="line">USER:adm  UID:3</span><br><span class="line">USER:lp  UID:4</span><br><span class="line">USER:sync  UID:5</span><br><span class="line">USER:shutdown  UID:6</span><br><span class="line">USER:halt  UID:7</span><br><span class="line">USER:mail  UID:8</span><br><span class="line">USER:operator  UID:11</span><br><span class="line">USER:games  UID:12</span><br><span class="line">USER:ftp  UID:14</span><br><span class="line">USER:nobody  UID:99</span><br><span class="line">USER:systemd-network  UID:192</span><br><span class="line">USER:dbus  UID:81</span><br><span class="line">USER:polkitd  UID:999</span><br><span class="line">USER:abrt  UID:173</span><br><span class="line">USER:tss  UID:59</span><br><span class="line">USER:postfix  UID:89</span><br><span class="line">USER:chrony  UID:998</span><br><span class="line">USER:sshd  UID:74</span><br><span class="line">USER:mysql  UID:27</span><br></pre></td></tr></table></figure><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>显示/etc/passwd每行的行号，每行的列数，对应行的用户名（print,printf）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print "Line: " NR,"Columns: "NF,"USER: "$1&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Line: 1 Columns: 7 USER: root</span><br><span class="line">Line: 2 Columns: 7 USER: bin</span><br><span class="line">Line: 3 Columns: 7 USER: daemon</span><br><span class="line">Line: 4 Columns: 7 USER: adm</span><br><span class="line">Line: 5 Columns: 7 USER: lp</span><br><span class="line">Line: 6 Columns: 7 USER: sync</span><br><span class="line">Line: 7 Columns: 7 USER: shutdown</span><br><span class="line">Line: 8 Columns: 7 USER: halt</span><br><span class="line">Line: 9 Columns: 7 USER: mail</span><br><span class="line">Line: 10 Columns: 7 USER: operator</span><br><span class="line">Line: 11 Columns: 7 USER: games</span><br><span class="line">Line: 12 Columns: 7 USER: ftp</span><br><span class="line">Line: 13 Columns: 7 USER: nobody</span><br><span class="line">Line: 14 Columns: 7 USER: systemd-network</span><br><span class="line">Line: 15 Columns: 7 USER: dbus</span><br><span class="line">Line: 16 Columns: 7 USER: polkitd</span><br><span class="line">Line: 17 Columns: 7 USER: abrt</span><br><span class="line">Line: 18 Columns: 7 USER: tss</span><br><span class="line">Line: 19 Columns: 7 USER: postfix</span><br><span class="line">Line: 20 Columns: 7 USER: chrony</span><br><span class="line">Line: 21 Columns: 7 USER: sshd</span><br><span class="line">Line: 22 Columns: 7 USER: mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;printf("Line: %3s Columns: %s USER: %s\n",NR,NF,$1)&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Line:   1 Columns: 7 USER: root</span><br><span class="line">Line:   2 Columns: 7 USER: bin</span><br><span class="line">Line:   3 Columns: 7 USER: daemon</span><br><span class="line">Line:   4 Columns: 7 USER: adm</span><br><span class="line">Line:   5 Columns: 7 USER: lp</span><br><span class="line">Line:   6 Columns: 7 USER: sync</span><br><span class="line">Line:   7 Columns: 7 USER: shutdown</span><br><span class="line">Line:   8 Columns: 7 USER: halt</span><br><span class="line">Line:   9 Columns: 7 USER: mail</span><br><span class="line">Line:  10 Columns: 7 USER: operator</span><br><span class="line">Line:  11 Columns: 7 USER: games</span><br><span class="line">Line:  12 Columns: 7 USER: ftp</span><br><span class="line">Line:  13 Columns: 7 USER: nobody</span><br><span class="line">Line:  14 Columns: 7 USER: systemd-network</span><br><span class="line">Line:  15 Columns: 7 USER: dbus</span><br><span class="line">Line:  16 Columns: 7 USER: polkitd</span><br><span class="line">Line:  17 Columns: 7 USER: abrt</span><br><span class="line">Line:  18 Columns: 7 USER: tss</span><br><span class="line">Line:  19 Columns: 7 USER: postfix</span><br><span class="line">Line:  20 Columns: 7 USER: chrony</span><br><span class="line">Line:  21 Columns: 7 USER: sshd</span><br><span class="line">Line:  22 Columns: 7 USER: mysql</span><br></pre></td></tr></table></figure><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>显示<code>/etc/passwd</code>中用户<code>组id</code>大于<code>100</code>的行号和用户名（if(){}else{}）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;if ($3&gt;100)&#123; print "Line: "NR,"USER: "$1&#125;else&#123;print "组id小于100，不与展示"&#125;&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">Line: 14 USER: systemd-network</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">Line: 16 USER: polkitd</span><br><span class="line">Line: 17 USER: abrt</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">Line: 20 USER: chrony</span><br><span class="line">组id小于100，不与展示</span><br><span class="line">组id小于100，不与展示</span><br></pre></td></tr></table></figure><h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><p>显示/etc/passwd中的带有<code>nologin</code>的行的<code>USER</code>信息和<code>组id</code>信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/nologin/p'</span> /etc/passwd | awk -F <span class="string">':'</span> <span class="string">'&#123;print "USER: "$1,"UID: "$3&#125;'</span></span><br><span class="line">awk -F <span class="string">':'</span> <span class="string">'/nologin/&#123;print "USER: "$1,"UID: "$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">USER: bin UID: 1</span><br><span class="line">USER: daemon UID: 2</span><br><span class="line">USER: adm UID: 3</span><br><span class="line">USER: lp UID: 4</span><br><span class="line">USER: mail UID: 8</span><br><span class="line">USER: operator UID: 11</span><br><span class="line">USER: games UID: 12</span><br><span class="line">USER: ftp UID: 14</span><br><span class="line">USER: nobody UID: 99</span><br><span class="line">USER: systemd-network UID: 192</span><br><span class="line">USER: dbus UID: 81</span><br><span class="line">USER: polkitd UID: 999</span><br><span class="line">USER: abrt UID: 173</span><br><span class="line">USER: tss UID: 59</span><br><span class="line">USER: postfix UID: 89</span><br><span class="line">USER: chrony UID: 998</span><br><span class="line">USER: sshd UID: 74</span><br></pre></td></tr></table></figure><h3 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h3><p>统计当前文件夹下的文件/文件夹占用的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l | awk <span class="string">'BEGIN&#123;size=0&#125;&#123;size+=$5&#125;END&#123;print "size is " size "M"&#125;'</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size is 1495034M</span><br></pre></td></tr></table></figure><h3 id="案例五"><a href="#案例五" class="headerlink" title="案例五"></a>案例五</h3><p>统计<code>/etc/passwd</code>的账户总人数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk  -F <span class="string">':'</span> <span class="string">'BEGIN&#123;count=0&#125;$1!~/^$/&#123;count++&#125;END&#123;print "Line is " count&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Line is 22</span><br></pre></td></tr></table></figure><h3 id="案例六"><a href="#案例六" class="headerlink" title="案例六"></a>案例六</h3><p>统计<code>UID</code>大于<code>100</code>的用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'BEGIN&#123;count=0&#125;&#123;if($3&gt;100) name[count++]=$1&#125;END&#123;for(i=0;i&lt;count;i++)&#123; print i,name[i]&#125;&#125;'</span> passwd</span><br></pre></td></tr></table></figure><p>有点蒙b…</p><h3 id="案例七"><a href="#案例七" class="headerlink" title="案例七"></a>案例七</h3><p>统计<code>netstat -anp</code>状态下为LISTEN和OCONNECTED的链接数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | awk <span class="string">'$6~/CONNECTED|LISTEN/&#123;sum[$6]++&#125;END&#123;for (i in sum) &#123;print i,sum[i]&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LISTEN 3</span><br><span class="line">CONNECTED 42</span><br></pre></td></tr></table></figure><p>祝你学习愉快～～～</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql查询-条件查询</title>
      <link href="/2019/08/26/Mysql%E6%9F%A5%E8%AF%A2-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/08/26/Mysql%E6%9F%A5%E8%AF%A2-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/mysql.png" alt="mysql_basic"></p><a id="more"></a><h1 id="Mysql查询-条件查询"><a href="#Mysql查询-条件查询" class="headerlink" title="Mysql查询-条件查询"></a>Mysql查询-条件查询</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        查询列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        表名</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">        筛选条件;</span><br></pre></td></tr></table></figure><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="条件表达式查询"><a href="#条件表达式查询" class="headerlink" title="条件表达式查询"></a>条件表达式查询</h3><blockquote><p>条件运算符：&gt; , &lt; , = , != , &lt;&gt; , &gt;= , &lt;=</p></blockquote><p><strong>案例一：查询工资大于12000的员工信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        * </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">        employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">        salary &gt; <span class="number">12000</span>;</span><br></pre></td></tr></table></figure><p><strong>案例二：查询部门编号不等于90的员工姓名和部门编号</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        last_name,</span><br><span class="line">        department_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        employees</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        department_id&lt;&gt;<span class="number">90</span>;</span><br></pre></td></tr></table></figure><h3 id="逻辑表达式查询"><a href="#逻辑表达式查询" class="headerlink" title="逻辑表达式查询"></a>逻辑表达式查询</h3><p><strong>作用</strong>：用于连接条件表达式</p><blockquote><p><strong>逻辑运算符</strong>：&amp;&amp;,  ||  ,  ！, and , or , not<br><strong>&amp;&amp;和and:</strong>  两个条件都为true， 结果为true，反之为false<br><strong>||和o</strong>    只要有一个为true，结果就为true<br><strong>！和no</strong>    如果链接的条件本身为false，结果为true，反之为false</p></blockquote><p><strong>案例一：查询工资在10000到20000之间的员工名、工资以及奖金</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        last_name,</span><br><span class="line">        salary,</span><br><span class="line">        commission_pct</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        employees</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        salary &gt;=<span class="number">10000</span> <span class="keyword">and</span> salary &lt;=<span class="number">20000</span></span><br></pre></td></tr></table></figure><p><strong>案例二：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        employees</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        <span class="keyword">not</span>(department_id&gt;=<span class="number">90</span> <span class="keyword">and</span> department_id&lt;=<span class="number">110</span>) <span class="keyword">or</span> salary &gt; <span class="number">15000</span>;</span><br></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><blockquote><p>like ， between ， in ，is null</p></blockquote><h4 id="1-like"><a href="#1-like" class="headerlink" title="1. like:"></a>1. like:</h4><p><strong>特点：</strong><br>    一般和通配符搭配使用<br>    【通配符】：<br>    %   ：任意多个字符，包含0个字符<br>    _   ：任意单个字符</p><p><strong>案例一：查询员工名中包含字符a的员工信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        * </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">        employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">        last_name <span class="keyword">like</span> <span class="string">'%a%'</span>;</span><br></pre></td></tr></table></figure><p><strong>案例二：查询员工名中第三个字符为e，第五个字符为a的员工名和工资</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        last_name,salary </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">        employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">        last_name <span class="keyword">like</span> <span class="string">'__n_l%'</span>;</span><br></pre></td></tr></table></figure><p><strong>案例三：查询员工名中第二个字符为_的员工名</strong></p><blockquote><p>用转义字符 <code>\</code> 或者下面这种方法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        last_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        employees</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        last_name <span class="keyword">like</span> <span class="string">'_$_%'</span> escape <span class="string">'$'</span>;</span><br></pre></td></tr></table></figure><h4 id="2-between-and"><a href="#2-between-and" class="headerlink" title="2. between    and"></a>2. between    and</h4><p><strong>特点：</strong></p><ol><li>包含临界值</li><li>两个临界值不要调换顺序</li><li>提高了语句简洁度</li></ol><p><strong>案例一：查询员工编号在110到120之间的员工信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        *</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">        employees</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">        employees_id <span class="keyword">between</span> <span class="number">100</span> <span class="keyword">and</span> <span class="number">120</span>;</span><br></pre></td></tr></table></figure><h4 id="3-in"><a href="#3-in" class="headerlink" title="3. in"></a>3. in</h4><p><strong>特点：</strong></p><ol><li>提高语句简洁度</li><li>in列表的值类型必须一致或兼容</li><li>不支持通配符 </li></ol><p><strong>案例一：查询员工的年龄属于23，24，25岁的员工信息</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">        *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">        employees</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">        emp_age <span class="keyword">in</span> (<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>);</span><br></pre></td></tr></table></figure><h4 id="4-is-null"><a href="#4-is-null" class="headerlink" title="4. is null"></a>4. is null</h4><p><strong>特点：</strong></p><ol><li>=或&lt;&gt;不能判断null值</li><li>is null 或 is not null 可以判断null值</li></ol><p>案例一：查询没有奖金的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">selsct</span><br><span class="line">        *</span><br><span class="line">from</span><br><span class="line">        employees</span><br><span class="line">where</span><br><span class="line">        commission_pct is null;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql查询-基础查询</title>
      <link href="/2019/08/25/Mysql%E6%9F%A5%E8%AF%A2-%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/08/25/Mysql%E6%9F%A5%E8%AF%A2-%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/mysql.png" alt="mysql_basic"></p><a id="more"></a><h1 id="Mysql查询-基础查询"><a href="#Mysql查询-基础查询" class="headerlink" title="Mysql查询-基础查询"></a>Mysql查询-基础查询</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><p><strong>select 查询列表 from 表名;</strong><br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h2 id="查询单个字段"><a href="#查询单个字段" class="headerlink" title="查询单个字段"></a>查询单个字段</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h2 id="查询全部字段"><a href="#查询全部字段" class="headerlink" title="查询全部字段"></a>查询全部字段</h2><p>方式一（查询字段顺序可以自定义）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age,sex <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>方式二（不够灵活）：</p><pre><code>select * from test; </code></pre><h2 id="查询常量值"><a href="#查询常量值" class="headerlink" title="查询常量值"></a>查询常量值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">'john'</span>;</span><br></pre></td></tr></table></figure><h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>( );</span><br></pre></td></tr></table></figure><h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><p><strong>好处：</strong><br>    1. 便于理解<br>    2. 如果要查询的字段有重名的情况，使用别名可以区分开来</p><p>方式一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">100</span>%<span class="number">50</span> <span class="keyword">as</span> 结果;</span><br><span class="line"><span class="keyword">select</span> last_name <span class="keyword">as</span> 姓,first_name <span class="keyword">as</span> 名 <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name 姓,first_name 名 <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果别名中出现了特殊字符，需要用双引号引起来</p></blockquote><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>关键字：distinct<br>案例：查询所有员工的部门编号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> department_id <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h2 id="号的作用（不能实现字段拼接）"><a href="#号的作用（不能实现字段拼接）" class="headerlink" title="+ 号的作用（不能实现字段拼接）"></a>+ 号的作用（不能实现字段拼接）</h2><p><code>+</code> 号的功能：运算符</p><p>实例：</p><ul><li>两个数都为数值型，则做加法运算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">100</span> + <span class="number">100</span>;</span><br></pre></td></tr></table></figure><ul><li>一个为字符型，一个为数值型，系统会尝试把字符型转换为数值型<br>成功则继续运算，失败则把字符型的值视为数字<code>0</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">"100"</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">"code"</span> + <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>在mysql中进行拼接，不能用 <code>+</code>号，需要用到<code>concat</code>函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">concat ('a','b','c') as 结果;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(last_name,first_name) <span class="keyword">as</span> 姓名 <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><p>案例：显示所有员工的<code>姓</code>和<code>名</code>还有<code>年龄</code>，中间用<code>-</code>号进行连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(last_name,<span class="string">'-'</span>,first_name,<span class="string">'-'</span>,age) </span><br><span class="line"><span class="keyword">as</span> out_put </span><br><span class="line"><span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><p>但是如果<code>age</code>字段有为空（NULL）的情况，查询就会出现问题<br>可以使用<code>IFNULL( )</code>函数<br>那么，语句可以这样写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(last_name,<span class="string">'-'</span>,first_name,<span class="string">'-'</span>,<span class="keyword">ifnull</span>(age,<span class="number">0</span>)) </span><br><span class="line"><span class="keyword">as</span> out_put </span><br><span class="line"><span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS下安装Python</title>
      <link href="/2019/08/24/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85Python/"/>
      <url>/2019/08/24/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85Python/</url>
      
        <content type="html"><![CDATA[<p><img src="../../public/images/72d978d16f50c3076690f733ea7004fd.png" alt="72d978d16f50c3076690f733ea7004fd"></p><a id="more"></a><h1 id="centos下如何安装python"><a href="#centos下如何安装python" class="headerlink" title="centos下如何安装python"></a>centos下如何安装python</h1><h2 id="方法一-不推荐，适合于安装一次，第二次最好不要再用这个脚本-："><a href="#方法一-不推荐，适合于安装一次，第二次最好不要再用这个脚本-：" class="headerlink" title="方法一(不推荐，适合于安装一次，第二次最好不要再用这个脚本)："></a>方法一(不推荐，适合于安装一次，第二次最好不要再用这个脚本)：</h2><p>首先，利用python自带的python2.7.5版本编写一个python的安装脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 wget 以及依赖库</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">'yum install -y wget &amp;&amp; yum groupinstall "Development tools" &amp;&amp; yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel'</span></span><br><span class="line">res = os.system(cmd)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'安装依赖库失败，请检查repo库或者网络是否链接'</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getuid() == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'当前用户不是root用户，请以root用户的身份执行脚本'</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">version = raw_input(<span class="string">'请输入要安装的python版本号：(2.7/3.5)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> version == <span class="string">'2.7'</span>:</span><br><span class="line">    url = <span class="string">'https://www.python.org/ftp/python/2.7.16/Python-2.7.16.tgz'</span></span><br><span class="line"><span class="keyword">elif</span> version == <span class="string">'3.5'</span>:</span><br><span class="line">    url = <span class="string">'https://www.python.org/ftp/python/3.5.6/Python-3.5.6.tgz'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'请输入2.7或者3.5'</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">'wget '</span> + url</span><br><span class="line">res = os.system(cmd)</span><br><span class="line">package_name = <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'下载源码包失败，请检查网络'</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> version == <span class="string">'2.7'</span>:</span><br><span class="line">    package_name = <span class="string">'Python-2.7.16'</span></span><br><span class="line">    python_dir_name = <span class="string">'python2_7_16'</span></span><br><span class="line">    ver = <span class="string">'python'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    package_name = <span class="string">'Python-3.5.6'</span></span><br><span class="line">    python_dir_name = <span class="string">'python3_5_6'</span></span><br><span class="line">    ver = <span class="string">'python3'</span></span><br><span class="line">cmd = <span class="string">'tar -xf '</span> + package_name + <span class="string">'.tgz'</span></span><br><span class="line">res = os.system(cmd)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">    os.system(<span class="string">'rm -rf '</span> + package_name + <span class="string">'.tgz'</span>)</span><br><span class="line">    print(<span class="string">'解压源码包失败，请重新运行这个脚本下载源码包'</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">'cd '</span> + package_name + <span class="string">'&amp;&amp; ./configure --prefix=/usr/local/'</span>+ python_dir_name + <span class="string">' &amp;&amp; make &amp;&amp; make install'</span></span><br><span class="line">res = os.system(cmd)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'编译python源码失败，请检查是否缺少依赖库'</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">'mv /usr/bin/python /usr/bin/python2.7.5 &amp;&amp; ln -s /usr/local/'</span> + python_dir_name+ <span class="string">'/bin/'</span> + ver + <span class="string">' /usr/bin/python'</span></span><br><span class="line">res = os.system(cmd)</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'建立软连接失败，请检查/usr/bin 与 /usr/local 目录'</span>)</span><br></pre></td></tr></table></figure><p>安装完成后，会发现yum无法使用<br>在终端下执行：</p><ul><li>vi usr/bin/yum</li><li>vi /usr/libexec/urlgrabber-ext-down</li><li>第一行的python均修改为python2</li></ul><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>在终端执行以下操作：</p><ul><li><p>yum install -y wget &amp;&amp; yum groupinstall “Development tools” &amp;&amp; yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</p></li><li><p>wget <a href="https://www.python.org/ftp/python/2.7.16/Python-2.7.16.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/2.7.16/Python-2.7.16.tgz</a></p></li><li><p>tar -xf Python-2.7.16.tgz</p></li><li><p>cd Python2.7.16</p></li><li><p>./configure –prefix=/usr/local/python2_7_16</p></li><li><p>make &amp;&amp; make install</p></li><li><p>mv /usr/bin/python /usr/bin/python2.7.5</p><p><code>注意，这里给以前的软连接重命名之后，执行对应的重命名名称即可执行以前的python版本，比如上边的python2.7.5</code></p></li></ul><hr><p>嘟嘟嘟，请注意啦！<br>解释：</p><ol><li>比如，输入 python 进入2.7.16 的python版本 | 输入python2.7.5进入2.7.5的python版本 </li><li>与 mv /usr/bin/python /usr/bin/python2.7.5 命令的python2.7.5息息相关，这只是个名字，可以随便起</li><li>比如也可以把这条命令写成 mv /usr/bin/python /usr/bin/python275，执行 python275 效果是一样的</li></ol><hr><p><strong>设置软连接</strong></p><ul><li>ln -s /usr/local/python2_7_16/bin/python /usr/bin/python</li></ul><p>安装完成后，会发现yum无法使用：</p><ul><li>vi .usr/bin/yum</li><li>vi /usr/libexec/urlgrabber-ext-down</li><li>第一行的python均修改为python2</li></ul><hr><hr><p>嘟嘟嘟，请注意啦！<br><strong>特别注意：</strong></p><p><code>mv /usr/bin/python /usr/bin/python2.7.5     与      mv /usr/bin/python/ /usr/bin/python2.7.5/ 完全不同，这一点多加注意我的朋友们</code></p><ol><li>/usr/bin 是一个很重要的文件，最开始的时候 <strong>/usr/bin/python -&gt; python2</strong>的一个软连接                                                  </li><li>由于我们执行了  <code>mv /usr/bin/python /usr/bin/python2.7.5</code> ， 给软连接重命名，就变成了 <strong>/usr/bin/python2.7.5 -&gt; python2</strong>，以后再想执行python2这个版本的python，可以使用<strong>python2.7.5</strong>                                                                                 </li><li>没有了 <strong>/usr/bin/python</strong>这个软连接了，于是我们就可以新建一个/usr/bin/python软连接了                                                   </li><li><code>ln -s /usr/local/python2_7_16/bin/python /usr/bin/python</code>来设置自己的软连接，以后在终端输入<code>python</code>就是自己设置的版本的python了，大概就是这个意思                                                                                                                          </li></ol><hr><hr><p><strong>实际情况展示：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost python_dir]# ll /usr/bin/pyth*</span><br><span class="line">lrwxrwxrwx. 1 root root   34 8月  11 22:51 /usr/bin/python -&gt; /usr/local/python2_7_16/bin/python</span><br><span class="line">lrwxrwxrwx. 1 root root    9 8月  11 21:25 /usr/bin/python2 -&gt; python2.7</span><br><span class="line">-rwxr-xr-x. 1 root root 7136 8月   4 2017 /usr/bin/python2.7</span><br><span class="line">lrwxrwxrwx. 1 root root    7 8月  11 21:25 /usr/bin/python2.7.5 -&gt; python2</span><br></pre></td></tr></table></figure><p><strong>特别问题：*</strong>为软连接重命名，但是软连接中已经有/usr/bin/python2.7.5这个名字了*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost python_dir]# mv /usr/bin/python /usr/bin/python2.7.5</span><br><span class="line">mv：是否覆盖&quot;/usr/bin/python2.7.5&quot;？ y</span><br><span class="line"></span><br><span class="line">[root@localhost python_dir]# ll /usr/bin/pyth*</span><br><span class="line">lrwxrwxrwx. 1 root root    9 8月  11 21:25 /usr/bin/python2 -&gt; python2.7</span><br><span class="line">-rwxr-xr-x. 1 root root 7136 8月   4 2017 /usr/bin/python2.7</span><br><span class="line">lrwxrwxrwx. 1 root root   34 8月  11 22:51 /usr/bin/python2.7.5 -&gt; /usr/local/python2_7_16/bin/python</span><br></pre></td></tr></table></figure><p><strong>细心的话会发现：</strong></p><blockquote><p> lrwxrwxrwx. 1 root root    7 8月  11 21:25 /usr/bin/python2.7.5 -&gt; python2 被覆盖了</p></blockquote><p>其实没多大影响，要是还是想用2.7.5版本的python，输入 <code>python2</code> 即可，因为python2指向python2.7</p><blockquote><p>lrwxrwxrwx. 1 root root    9 8月  11 21:25 /usr/bin/python2 -&gt; python2.7</p></blockquote><p>或者自己重新为python2自定义添加一个软链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost python_dir]# ln -s /usr/bin/python2 /usr/bin/python275</span><br></pre></td></tr></table></figure><p>想使用python2.7版本的python的时候，在终端输入 python275 即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo&amp;NexT的相关配置</title>
      <link href="/2019/08/22/Hexo-NexT%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/22/Hexo-NexT%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1g895eeu9j20dw04ht8o.jpg" alt="hexo&amp;next配置"></p><a id="more"></a><p>如何安装<code>hexo博客框架</code>与<code>next</code>主题，还有如何把博客静态资源部署到远端<code>github</code>上，请参考这位大神的个人博客：<a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="noopener">http://gonghonglou.com/2016/02/03/firstblog/</a></p><blockquote><p>接下来所介绍的是安装完hexo之后的具体配置。</p></blockquote><h1 id="Hexo与NexT的配置"><a href="#Hexo与NexT的配置" class="headerlink" title="Hexo与NexT的配置"></a>Hexo与NexT的配置</h1><p><code>注意</code>：每次对hexo和next作出修改时，都要执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s  <span class="comment">//本地部署</span></span><br><span class="line">hexo d  <span class="comment">//远端部署</span></span><br></pre></td></tr></table></figure><p><code>没有部署到远端的（比如github或者coding）童鞋，使用hexo s开启服务在本地进行测试，无需执行hexo d。</code></p><p>如果出现了端口正在运行无法使用的情况</p><blockquote><p>FATAL Port 4000 has been used. Try other port instead.<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a><br>Error: listen EADDRINUSE: address already in use :::4000</p></blockquote><p>可以这样解决：</p><ul><li><p>sudo lsof -i :4000</p><blockquote><p>[shang@11:06:24]~/blog$ sudo lsof -i :4000<br>COMMAND   PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME<br>node    13676 root   36u  IPv6 0x783f5ae0b80a0c4b      0t0  TCP *:terabase (LISTEN)</p></blockquote></li><li><p>sudo kill -9 13676</p></li></ul><p>这样端口<code>4000</code>下的进程就被杀死了。</p><h2 id="如果上传到远端出现这种情况"><a href="#如果上传到远端出现这种情况" class="headerlink" title="如果上传到远端出现这种情况:"></a>如果上传到远端出现这种情况:</h2><p> xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a><br>Error: Spawn failed<br>    at ChildProcess.<anonymous> (/Users/mac/blog/node_modules/hexo-util/lib/spawn.js:52:19)<br>    at ChildProcess.emit (events.js:198:13)<br>    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12)</anonymous></p><hr><p>是因为缺少xcode的组件,安装一下就好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p> <code>hexo new &quot;test&quot;</code><br>  之后就会在<strong>/blog/source/_posts/</strong>建立一个名为 <code>test.md</code> 的文件<br>  开始编写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 个人简介</span><br><span class="line">date: 2019-08-20 23:11:27</span><br><span class="line">tags: </span><br><span class="line">      - 简介</span><br><span class="line">      - 尚先森</span><br><span class="line"></span><br><span class="line">categories: 个人介绍</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 个人介绍</span><br><span class="line"></span><br><span class="line">##基本资料</span><br><span class="line"></span><br><span class="line">  姓名：尚用正</span><br><span class="line">  性别：男</span><br><span class="line">  年龄：保密</span><br><span class="line">  居住地：天津</span><br><span class="line">  所在学校：内蒙古农业大学</span><br></pre></td></tr></table></figure><h2 id="跳转页面配置"><a href="#跳转页面配置" class="headerlink" title="跳转页面配置"></a>跳转页面配置</h2><p>基本配置请参考：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a><br>    增加完各个选项后直接点击的话会报错，原因是找不到文件，那么如何添加跳转的页面呢？<br>在blog目录下执行（举个例子）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n page tags</span><br></pre></td></tr></table></figure><p>之后就会在<strong>/blog/source/tags/index.md</strong>下建立一个<code>index</code>文件<br>继续编辑index.md文件<br>修改title名称为’标签’</p><blockquote><p>title: 标签</p></blockquote><p>比如加上：</p><blockquote><p>type: “tags”</p></blockquote><h2 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h2><p>在<strong>/blog/themes/next/_config.yml</strong>文件下，搜索 <code>avatar</code> 这个关键字</p><p>avatar: <a href="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1804160177,2244151847&amp;fm=26&amp;gp=0.jpg" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1804160177,2244151847&amp;fm=26&amp;gp=0.jpg</a><br>图片可以是本地，也可以是网络上的图片</p><h2 id="增加侧边栏地址链接"><a href="#增加侧边栏地址链接" class="headerlink" title="增加侧边栏地址链接"></a>增加侧边栏地址链接</h2><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>social</code> 这个关键字<br>    例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">    GitHub: https://github.com/shang-code || github</span><br><span class="line">    E-Mail: mailto:syz15822409222@126.com || envelope</span><br></pre></td></tr></table></figure><h2 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h2><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>links</code> 这个关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">links_icon: link</span><br><span class="line">links_title: 学习社区</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  菜鸟: http://www.runoob.com/</span><br></pre></td></tr></table></figure><p>与上面相似，不再赘述。</p><h2 id="显示阅读全文"><a href="#显示阅读全文" class="headerlink" title="显示阅读全文"></a>显示阅读全文</h2><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>auto_excerpt</code> 这个关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">      enable: <span class="literal">true</span></span><br><span class="line">      length: <span class="number">150</span></span><br></pre></td></tr></table></figure><p>或者可以在md文件的任意地方输入：<code>&lt;!-- more --&gt;</code><br>下面的内容就会不见，只有点击阅读全文才可以看到下面的内容</p><h2 id="增加打赏功能"><a href="#增加打赏功能" class="headerlink" title="增加打赏功能"></a>增加打赏功能</h2><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>rew</code> 这个关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 喜欢的朋友可以打个赏^ _ ^</span><br><span class="line">wechatpay: <span class="regexp">/images/</span>weixin.png</span><br><span class="line">alipay: <span class="regexp">/images/</span>zhifubao.png</span><br></pre></td></tr></table></figure><p><em>注：下面所有需要用到的图片放在 <code>/blog/themes/next/source/images</code> 下</em></p><h2 id="增加个人二维码"><a href="#增加个人二维码" class="headerlink" title="增加个人二维码"></a>增加个人二维码</h2><p> 在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>wechat</code> 这个关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wechat_subscriber:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    qcode: <span class="regexp">/images/</span>syz.png</span><br><span class="line">    description: 有任何问题可以扫描上方二维码私聊我哦😊</span><br></pre></td></tr></table></figure><h2 id="设置头像可旋转"><a href="#设置头像可旋转" class="headerlink" title="设置头像可旋转"></a>设置头像可旋转</h2><p>在 <code>/blog/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code>中进行编辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">display: block;</span><br><span class="line">margin: <span class="number">0</span> auto;</span><br><span class="line">padding: $site-author-image-padding;</span><br><span class="line">max-width: $site-author-image-width;</span><br><span class="line">height: $site-author-image-height;</span><br><span class="line">border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">border-radius: <span class="number">50</span>%;</span><br><span class="line">transition: <span class="number">2</span>s all;</span><br><span class="line">&#125;</span><br><span class="line">.site-author-image:hover&#123;</span><br><span class="line">transform: rotate(<span class="number">360</span>deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h2><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索<code>canvas</code> 这个关键字</p><p>   想要使用哪个，把哪个改为 <code>ture</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="设置-fork-github"><a href="#设置-fork-github" class="headerlink" title="设置 fork github"></a>设置 fork github</h2><p>链接样式一：<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">https://blog.github.com/2008-12-19-github-ribbons/</a><br>链接样式二：<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">http://tholman.com/github-corners/</a></p><p>在 <code>/blog/themes/next/layout/_layout.swig</code>打开文件<br>找到第<code>23</code>行<br>在这一行的下面输入：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="https://github.com/shang-code/" class="github-corner" aria-label="View source on GitHub"&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>开头的 <code>href</code> 改为自己的github地址即可</p><h2 id="修改内链接样式"><a href="#修改内链接样式" class="headerlink" title="修改内链接样式"></a>修改内链接样式</h2><p>在<code>/blog/themes/next/source/css/_common/components/post/post.styl</code>打开文件<br>在最下边增加以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#EEDC82</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#FFC125</span>;</span><br><span class="line">    <span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更改标签图标"><a href="#更改标签图标" class="headerlink" title="更改标签图标"></a>更改标签图标</h2><p>图标网址：<a href="https://www.easyicon.net/1158252-tag_icon.html" target="_blank" rel="noopener">https://www.easyicon.net/1158252-tag_icon.html</a><br>在<code>/blog/themes/next/layout/_macro/post.swig</code>打开文件<br>找到<code>359</code>行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;img src="/images/tag.png"&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="评论一：添加valine评论功能（简洁）"><a href="#评论一：添加valine评论功能（简洁）" class="headerlink" title="评论一：添加valine评论功能（简洁）"></a>评论一：添加valine评论功能（简洁）</h2><p>网址：<a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">https://leancloud.cn/dashboard/applist.html#/apps</a></p><blockquote><p>创建应用<br>创建完成后会有一个小齿轮（设置），进入之后点击<code>应用key</code><br>复制App ID 与 App key</p></blockquote><p>然后分别粘贴到下面文件中的对应位置</p><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>valine</code> 这个关键字</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">      enable: <span class="literal">true</span></span><br><span class="line">      appid: hU7o1mDSLSyDeK4wE4hDgcIG-gzGzoHsz # your leancloud application appid</span><br><span class="line">      appkey: SezjNE3ljsOzb5og8uQs51FR # your leancloud application appkey</span><br><span class="line">      notify: false # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">      verify: false # Verification code</span><br><span class="line">      placeholder: Just go go # comment box placeholder</span><br><span class="line">      avatar: mm # gravatar style</span><br><span class="line">      guest_info: nick,mail,link # custom comment header</span><br><span class="line">      pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure><p>具体配置参考：<a href="https://valine.js.org" target="_blank" rel="noopener">https://valine.js.org</a></p><h2 id="评论二：增加来必力评论（加载慢）"><a href="#评论二：增加来必力评论（加载慢）" class="headerlink" title="评论二：增加来必力评论（加载慢）"></a>评论二：增加来必力评论（加载慢）</h2><p>网址：<a href="https://www.livere.com" target="_blank" rel="noopener">https://www.livere.com</a></p><blockquote><p>注册登陆后，点击首页上的<code>安装</code><br>点击免费安装<br>输入<code>https://shang-code.cn地址等</code><br>就会出现一个有代码的界面<br>复制里面的data-uid</p></blockquote><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>livere</code> 这个关键字<br>在对应的位置进行粘贴</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">livere_uid: MTAyMC80NjE5Ni8yMjcwNw==</span><br></pre></td></tr></table></figure><h2 id="增加搜索功能"><a href="#增加搜索功能" class="headerlink" title="增加搜索功能"></a>增加搜索功能</h2><p>网址：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a></p><blockquote><p>点击首页的 <code>第三方服务</code><br>找到搜索服务</p></blockquote><p>在<code>/blog</code>下执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">hexo-generator-searchdb</span> <span class="selector-tag">--save</span></span><br></pre></td></tr></table></figure><p>在<code>/blog/_config.yml</code>文件下添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>local_search</code> 这个关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="增加不蒜子统计功能"><a href="#增加不蒜子统计功能" class="headerlink" title="增加不蒜子统计功能"></a>增加不蒜子统计功能</h2><p>网址：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a></p><blockquote><p>点击首页的 <code>第三方服务</code><br>找到<code>不蒜子统计</code><br>参照上面的内容，在下面的文件中分别进行填写</p></blockquote><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>busuanzi_count</code> 这个关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  site_uv_header: 本站访问数&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-user"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: 本站总访问量&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-eye"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: <span class="literal">true</span></span><br><span class="line">  page_pv_header: 本文总阅读数&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-file-o"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure><p><code>问题：如果无法显示数字:</code></p><p>解决办法：</p><blockquote><p>先找到NexT下引用不蒜子统计的方法。文件路径为/theme/next/layout/_third-party/analytics/busuanzi-counter.swig文件。<br>替换链接部分即可。替换为”<a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;" target="_blank" rel="noopener">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</a></p></blockquote><h2 id="增加内容分享服务"><a href="#增加内容分享服务" class="headerlink" title="增加内容分享服务"></a>增加内容分享服务</h2><blockquote><p>我配置这个有问题，日后再做分析吧！</p></blockquote><p>网址：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a></p><blockquote><p>点击首页的 <code>第三方服务</code><br>找到<code>内容分享服务</code></p></blockquote><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>jiathis</code> 这个关键字</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jiathis: <span class="literal">true</span></span><br><span class="line">  ##uid: Get this uid from http://www.jiathis.com/</span><br></pre></td></tr></table></figure><h2 id="增加加载效果"><a href="#增加加载效果" class="headerlink" title="增加加载效果"></a>增加加载效果</h2><p>在<code>/blog/themes/next/_config.yml</code>文件下，搜索 <code>pace</code> 这个关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pace: <span class="literal">true</span></span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-bounce</span><br></pre></td></tr></table></figure><p>pace_theme的参数在上面随便选择一个即可，不唯一</p><h2 id="设置点击爆炸效果"><a href="#设置点击爆炸效果" class="headerlink" title="设置点击爆炸效果"></a>设置点击爆炸效果</h2><p>参考网址：<a href="https://blog.csdn.net/qq_38332436/article/details/82724672" target="_blank" rel="noopener">https://blog.csdn.net/qq_38332436/article/details/82724672</a></p><p>首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure><p>打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   &lt;canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" &gt;&lt;/canvas&gt; </span><br><span class="line">   &lt;script type="text/javascript" src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"&gt;&lt;/script&gt; </span><br><span class="line">   &lt;script type="text/javascript" src="/js/src/fireworks.js"&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在<code>/blog/themes/next/_config.yml</code>文件，在里面最后写下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Fireworks</span><br><span class="line">fireworks: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="增加点击出现小红心效果"><a href="#增加点击出现小红心效果" class="headerlink" title="增加点击出现小红心效果"></a>增加点击出现小红心效果</h2><p>在<code>/themes/next/source/js/src</code>下新建文件<code>love.js</code>，并复制粘贴如下代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>在<code>\themes\next\layout\_layout.swig</code>文件的<code>&lt;body&gt;</code>标签最后添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 页面点击小红心，在末尾添加，避免找不到 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="解决来必力加载慢问题"><a href="#解决来必力加载慢问题" class="headerlink" title="解决来必力加载慢问题"></a>解决来必力加载慢问题</h2><p>我们打开<code>/blog/themes/next/layout/_partials/comments.swig</code></p><p>将这段代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="comments" id="comments"&gt;</span><br><span class="line">  &lt;div id="lv-container" data-id="city" data-uid="&#123;&#123; theme.livere_uid &#125;&#125;"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe title="livere"   src="https://was.livere.me/comment/city?id=city&amp;refer=&#123;&#123;page.permalink&#125;&#125;&amp;uid=&#123;&#123;theme.livere_uid&#125;&#125;&amp;site=&#123;&#123;page.permalink&#125;&#125;&amp;title=&#123;&#123;page.title&#125;&#125;" scrolling="" frameborder="0" id="lv-comment-399" style="min-width: 100%; width: 100px; min-height: 400px; overflow: auto; border: 0px; z-index: 124212; height: 800px;" &gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h2 id="添加live2D"><a href="#添加live2D" class="headerlink" title="添加live2D"></a>添加live2D</h2><p>参考网址：<a href="https://sevencho.github.io/archives/cb206c67.html" target="_blank" rel="noopener">https://sevencho.github.io/archives/cb206c67.html</a></p><p>在<code>/blog</code>下执行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">--save</span> <span class="selector-tag">hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><p>如果不想使用、想彻底卸载，命令如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">uninstall</span> <span class="selector-tag">hexo-helper-live2d</span></span><br></pre></td></tr></table></figure><p>对应的模块下载:<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">https://github.com/xiazeyu/live2d-widget-models</a></p><p>动画模型效果:<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a></p><p>手动下载完成之后将<code>packages</code>里面的所有文件<strong>拷贝</strong>到博客根目录的<code>node_moduels</code>文件夹下</p><p>打开博客根目录的配置文件<code>_config.yml</code>，添加如下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/xiazeyu/live2d-widget.js</span><br><span class="line">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span><br><span class="line">live2d:</span><br><span class="line">  model:</span><br><span class="line">    scale: <span class="number">1</span></span><br><span class="line">    hHeadPos: <span class="number">0.5</span></span><br><span class="line">    vHeadPos: <span class="number">0.618</span></span><br><span class="line">    use: live2d-widget-model-tororo <span class="comment">// 下载的动画模型名称</span></span><br><span class="line">  display:</span><br><span class="line">    superSample: <span class="number">2</span></span><br><span class="line">    width: <span class="number">120</span></span><br><span class="line">    height: <span class="number">200</span></span><br><span class="line">    position: left <span class="comment">// 模型在网页显示位置</span></span><br><span class="line">    hOffset: <span class="number">20</span></span><br><span class="line">    vOffset: <span class="number">50</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span>  <span class="comment">// 移动设备是否显示</span></span><br><span class="line">    scale: <span class="number">0.5</span></span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: <span class="number">0.7</span></span><br><span class="line">    opacityOnHover: <span class="number">0.2</span></span><br></pre></td></tr></table></figure><p>如果你想发布自己的Live2D动画模型包，可以参考如下步骤：<br>新建一个目录, 在终端下切换目录到新建的目录中，执行 <code>npm init</code>, 包名推荐格式如：<code>live2d-widget-model-xxx</code>。<br>在刚刚创建的目录下创建 assets 子目录, 把你的<code>模型文件</code>放进去.<br>在<code>live2d-widget-model-xxx</code>目录下执行 <code>npm publish</code> 命令来发布.<br>此时就在/blog目录下使用 <code>npm install --save live2d-widget-model-xxx</code> 来安装自定义的模型包了。<br>安装完成后就可以在配置文件<code>_config.yml</code>中 <code>model:use</code> 修改包名来使用了.</p><h2 id="在文章末尾增加版权声明"><a href="#在文章末尾增加版权声明" class="headerlink" title="在文章末尾增加版权声明"></a>在文章末尾增加版权声明</h2><p>参考网址：<a href="https://www.jianshu.com/p/93170e7413e9" target="_blank" rel="noopener">https://www.jianshu.com/p/93170e7413e9</a></p><p>在目录 <code>themes/next/layout/_macro/</code> 下添加 <code>my-copyright.swig</code> ，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class="my_post_copyright"&gt;</span><br><span class="line">  &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="selector-tag">--</span> <span class="selector-tag">JS</span>库 <span class="selector-tag">sweetalert</span> 可修改路径 <span class="selector-tag">--</span>&gt;</span><br><span class="line">  &lt;script type="text/javascript" src="http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;link rel="stylesheet" type="text/css" href="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm:ss") &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm:ss") &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class="copy-path"  title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;"  aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">script</span>&gt; </span><br><span class="line">    var clipboard = new Clipboard('.fa-clipboard');</span><br><span class="line">    clipboard.on('success', $(function()&#123;</span><br><span class="line">      $(".fa-clipboard").click(function()&#123;</span><br><span class="line">        <span class="selector-tag">swal</span>(&#123;   </span><br><span class="line">          <span class="attribute">title</span>: <span class="string">""</span>,   </span><br><span class="line">          text: <span class="string">'复制成功'</span>,   </span><br><span class="line">          html: false,</span><br><span class="line">          timer: <span class="number">500</span>,   </span><br><span class="line">          showConfirmButton: false</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在目录 <code>themes/next/source/css/_common/components/post/</code> 下添加 <code>my-post-copyright.styl</code>，内容如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">  color: #333333; // title color</span><br><span class="line">  <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  color: #0593d3; // link color</span><br><span class="line">  <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>themes/next/layout/_macro/post.swig</code>，如下：<br>修改前：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &#123;% include 'wechat-subscriber.swig' %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include 'my-copyright.swig' %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>打开 <code>themes/next/source/css/_common/components/post/post.styl</code> 文件，在最后一行增加代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"my-post-copyright"</span></span><br></pre></td></tr></table></figure><p>设置新建文章自动开启 <code>copyright</code> ，即新建文章自动显示自定义的版权声明，设置 <code>/bolg/scaffolds/post.md</code> 文件，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">---</span></span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line"><span class="selector-tag">copyright</span>: <span class="selector-tag">true</span> #新增,开启</span><br><span class="line"><span class="selector-tag">---</span></span><br></pre></td></tr></table></figure><h2 id="增加RSS插件"><a href="#增加RSS插件" class="headerlink" title="增加RSS插件"></a>增加RSS插件</h2><p>在 /blog下执行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">hexo-generator-feed</span> <span class="selector-tag">--save</span></span><br></pre></td></tr></table></figure><p>在/blog下的_config.yml下添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Extensions</span></span><br><span class="line"><span class="selector-tag">plugins</span>:</span><br><span class="line">    <span class="selector-tag">hexo-generator-feed</span></span><br><span class="line"><span class="selector-id">#Feed</span> <span class="selector-tag">Atom</span></span><br><span class="line"><span class="selector-tag">feed</span>:</span><br><span class="line">    <span class="selector-tag">type</span>: <span class="selector-tag">atom</span></span><br><span class="line">    <span class="selector-tag">path</span>: <span class="selector-tag">atom</span><span class="selector-class">.xml</span></span><br><span class="line">    <span class="selector-tag">limit</span>: 20</span><br></pre></td></tr></table></figure><p>在<code>/blog/themes/next/_config.yml</code>文件找到<code>rss</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: <span class="regexp">/atom.xml</span></span><br></pre></td></tr></table></figure><h2 id="隐藏底部强力驱动"><a href="#隐藏底部强力驱动" class="headerlink" title="隐藏底部强力驱动"></a>隐藏底部强力驱动</h2><p>在<code>/blog/themes/next/layout/_partials/</code>下打开<code>footer.swig</code>文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &#123;% if theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class="powered-by"&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __('footer.powered', '&lt;a class="theme-link" target="_blank" href="https://hexo.io"&gt;Hexo&lt;/a&gt;') &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.powered and theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;div class="theme-info"&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __('footer.theme') &#125;&#125; &amp;mdash; &#123;#</span><br><span class="line">  #&#125;&lt;a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next"&gt;&#123;#</span><br><span class="line">    #&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; theme.version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125; --&gt;</span><br></pre></td></tr></table></figure><p>将这一段用 <code>&lt;!-- --&gt;</code>扩起来</p><h2 id="字数统计与阅读时长"><a href="#字数统计与阅读时长" class="headerlink" title="字数统计与阅读时长"></a>字数统计与阅读时长</h2><p>在<code>/blog/themes/next/</code>下的<code>_config.yml</code>文件中搜索<code>post_wordcount</code>字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: <span class="literal">true</span></span><br><span class="line">  wordcount: <span class="literal">true</span></span><br><span class="line">  min2read: <span class="literal">true</span></span><br><span class="line">  totalcount: <span class="literal">false</span></span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>为了让效果好一点，修改<code>/blog/themes/next/layout/_macro/post.swig</code>文件</p></blockquote><p>修改<code>字数统计</code>，找到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">  &#123;&#123; wordcount(post.content) &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>添加 “字” 到 </p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; wordcount(post.content) &#125;&#125;</span><br></pre></td></tr></table></figure><p>后面，修改后为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">  &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>同理，我们修改<code>阅读时长</code>，修改后如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">  &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="/images/wt.png" alt="wordcount"></p><p>如果出现没有数字的情况，尝试执行下面这条（安装）命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">i</span> <span class="selector-tag">--save</span> <span class="selector-tag">hexo-wordcount</span></span><br></pre></td></tr></table></figure><h2 id="添加背景图"><a href="#添加背景图" class="headerlink" title="添加背景图"></a>添加背景图</h2><p>在<code>themes/next/source/css/_custom/custom.styl</code>文件中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(https://source.unsplash.com/random/1600x900?wallpapers);</span><br><span class="line"><span class="attribute">background-size</span>: cover;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-attachment</span>: fixed;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改主体透明度</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改菜单栏透明度</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background: url() 中填写的是背景图片的 url 地址, 这里调用了 Unsplash 的 API, 随机选用该网站的高清美图作为博客背景.<br>opacity 指定了对应元素的透明度, 这里是 “0.8”, 可以按需更改.</p><h2 id="修改行内代码块样式"><a href="#修改行内代码块样式" class="headerlink" title="修改行内代码块样式"></a>修改行内代码块样式</h2><p>打开 <code>themes\next\source\css\_custom\custom.styl</code>，添加如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 行内代码块的自定义样式 */</span></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d500fc</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(78, 240, 233, 0.42);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去掉图片边框"><a href="#去掉图片边框" class="headerlink" title="去掉图片边框"></a>去掉图片边框</h2><p>NexT主题默认会有图片边框，不太好看，我们可以把边框去掉。打开 <code>themes\next\source\css\_custom\custom.styl</code>，添加如下CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 去掉图片边框 */</span></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-gallery</span> <span class="selector-class">.post-gallery-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改鼠标样式"><a href="#修改鼠标样式" class="headerlink" title="修改鼠标样式"></a>修改鼠标样式</h2><p>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面写下如下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"https://www.easyicon.net/api/resizeApi.php?id=1124585&amp;size=24"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"https://www.easyicon.net/api/resizeApi.php?id=1124585&amp;size=24"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="修改网页底部的图标"><a href="#修改网页底部的图标" class="headerlink" title="修改网页底部的图标"></a>修改网页底部的图标</h2><p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class="with-love"&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>把中间内容删除，在中间添加如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src="https://www.easyicon.net/api/resizeApi.php?id=1200645&amp;size=16"&gt;</span><br></pre></td></tr></table></figure><h2 id="点开文章在新的标签页打开"><a href="#点开文章在新的标签页打开" class="headerlink" title="点开文章在新的标签页打开"></a>点开文章在新的标签页打开</h2><p>打开 <code>themes\next\layout\_macro\post-collapse.swig</code></p><p>找到如下区域代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class="post-title-link" href="&#123;&#123; url_for(post.path) &#125;&#125;" itemprop="url"&gt;</span><br><span class="line">  &#123;% if post.type === 'picture' %&#125;</span><br><span class="line">    &#123;&#123; post.content &#125;&#125;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    &lt;span itemprop="name"&gt;&#123;&#123; post.title | default(__('post.untitled')) &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>接着打开 <code>themes\next\layout\_macro\post.swig</code></p><p>找到如下区域代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class="post-title-link" href="&#123;&#123; url_for(post.path) &#125;&#125;" itemprop="url"&gt;&#123;#</span><br><span class="line">   #&#125;&#123;&#123; post.title | default(__('post.untitled'))&#125;&#125;&#123;#</span><br><span class="line"> #&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在两个文件的如上两个位置的class属性后添加 <code>target=&quot;_blank&quot;</code> </p><h2 id="添加DaoVoice-实现在线联系"><a href="#添加DaoVoice-实现在线联系" class="headerlink" title="添加DaoVoice 实现在线联系"></a>添加DaoVoice 实现在线联系</h2><p>参考网址：<a href="https://blog.csdn.net/weixin_43998150/article/details/84861684#修改顶部菜单与下方信息栏的间隙大小" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43998150/article/details/84861684#修改顶部菜单与下方信息栏的间隙大小</a></p><p>本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。<br>首先到<a href="http://dashboard.daovoice.io" target="_blank" rel="noopener">http://dashboard.daovoice.io</a>注册一个Daovioce账号。<br>注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的<code>应用设置</code>– <code>安装到网站</code>。在下方的代码中会看到<code>app_id</code>: “xxxx”字样。</p><p><img src="https://img-blog.csdnimg.cn/20181206182438230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5ODE1MA==,size_16,color_FFFFFF,t_70" alt="daovoice_app_id"></p><p>复制这个app_id</p><p>打开 <code>themes/next/layout/_partials/head/head.swig</code> 文件中最下方加入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0f81ff2f.js"</span>,<span class="string">"daovoice"</span>)</span><br><span class="line">  daovoice(<span class="string">'init'</span>, &#123;</span><br><span class="line">      app_id: <span class="string">"&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(<span class="string">'update'</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p> 在主题配置文件 <code>_config.yml</code>，添加如下代码：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># DaoVoice </span><br><span class="line">daovoice: <span class="literal">true</span></span><br><span class="line">daovoice_app_id: 这里输入前面获取的app_id</span><br></pre></td></tr></table></figure><p> 回到Daovoice控制面板，点击<code>聊天设置</code>可以对聊天图标的颜色及位置进行设置。<br><img src="https://img-blog.csdnimg.cn/20181206182539906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5ODE1MA==,size_16,color_FFFFFF,t_70" alt="themes_daovoice"></p><h2 id="修改主题背景色"><a href="#修改主题背景色" class="headerlink" title="修改主题背景色"></a>修改主题背景色</h2><p>打开<code>hexo/themes/next/source/css/_variables/base.styl</code>找到Colors代码段，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// Colors</span><br><span class="line">// colors for use across theme.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">  $whitesmoke   = #f5f5f5</span><br><span class="line">  $gainsboro    = #eee  //这个是边栏头像外框的颜色，</span><br><span class="line">  $gray-lighter = #ddd  //文章中插入图片边框颜色</span><br><span class="line">  $grey-light   = #ccc  //文章之间分割线、下划线颜色</span><br><span class="line">  $grey         = #bbb  //页面选中圆点颜色</span><br><span class="line">  $grey-dark    = #999</span><br><span class="line">  $grey-dim     = #666 //侧边栏目录字体颜色</span><br><span class="line">  $black-light  = #555 //修改文章字体颜色</span><br><span class="line">  $black-dim    = #333</span><br><span class="line">  $black-deep   = #495a80  //修改主题的颜色</span><br><span class="line">  $red          = #ff2a2a</span><br><span class="line">  $blue-bright  = #87daff</span><br><span class="line">  $blue         = #0684bd</span><br><span class="line">  $blue-deep    = #262a30</span><br><span class="line">  $orange       = #F39D01 //浏览文章时，目录选中的颜色</span><br></pre></td></tr></table></figure><h2 id="修改Pisces主题的宽度"><a href="#修改Pisces主题的宽度" class="headerlink" title="修改Pisces主题的宽度"></a>修改Pisces主题的宽度</h2><p>在<code>source/css/_schemes/Picses/_layout.sty</code>⽂件末尾添加如下代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 以下为新增代码！！</span><br><span class="line"><span class="selector-tag">header</span>&#123; <span class="attribute">width</span>: <span class="number">90%</span> <span class="meta">!important</span>; &#125;</span><br><span class="line"><span class="selector-tag">header</span><span class="selector-class">.post-header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123; <span class="attribute">width</span>: <span class="number">90%</span>; &#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px); &#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: <span class="selector-tag">auto</span> !<span class="selector-tag">important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: <span class="selector-tag">auto</span> !<span class="selector-tag">important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100% !<span class="selector-tag">important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础操作</title>
      <link href="/2019/08/20/Mysql%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/20/Mysql%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/mysql.png" alt="mysql_basic"></p><a id="more"></a><h1 id="Mysql基础操作"><a href="#Mysql基础操作" class="headerlink" title="Mysql基础操作"></a>Mysql基础操作</h1><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><p>网址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a><br>Linux请参考：<a href="https://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-install.html</a></p><p>查看mysql是否安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#rpm -e mysql　　// 普通删除模式</span><br><span class="line">#rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span><br></pre></td></tr></table></figure><p>下载、安装  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">#rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">#yum update</span><br><span class="line">#yum install mysql-server</span><br></pre></td></tr></table></figure><p>设置权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mysqld --initialize</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#systemctl start mysqld</span><br></pre></td></tr></table></figure><p>查看运行状态:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#systemctl status mysqld</span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mysqladmin --version</span><br></pre></td></tr></table></figure><p>如果mysql版本为5.7以上，默认会生成一个随机密码<br>    查看随机密码方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#grep password /var/log/myswld.log</span><br></pre></td></tr></table></figure><p>设置root密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mysqladmin -u root password &quot;new_password&quot;;</span><br></pre></td></tr></table></figure><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p>登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mysql -u root -p</span><br></pre></td></tr></table></figure><p>如果显示找不到：<br>    设置软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#ln -s /usr/local/mysql/bin/mysql /usr/local/bin/</span><br></pre></td></tr></table></figure><p>修改root密码</p><p>5.7.6以后的版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'new_password'</span>;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="keyword">USER</span>() <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'shang'</span>;</span><br></pre></td></tr></table></figure><p>5.7.6以前的版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'shang'</span>);</span><br></pre></td></tr></table></figure><p>导入mysql文件<br>Macx下： </p><ul><li>source + 文件路径（直接拖拽进入即可）;</li></ul><p>Linux下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#wget https://downloads.mysql.com/docs/sakila-db.tar.gz</span><br><span class="line">#tar -xf sakila-db.tar.gz</span><br><span class="line">#cd sakila-db</span><br></pre></td></tr></table></figure><p>在数据库中新建一个和要导入的数据库名称相同的数据库,然后退出Mysql</p><p><strong><em>格式：mysql -u 用户名 -p  数据库名 &lt; 数据库名.sql;</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#mysql -u root -p  sakila &lt; sakila-schema.sql;</span><br><span class="line">#mysql -u root -p  sakila &lt; sakila-data.sql;</span><br></pre></td></tr></table></figure><p>或者<br>在数据库中新建一个和要导入的数据库名称相同的数据库（或者可以不用新建吧，忘记了），然后在Mysql中输入</p><ul><li>source sql文件路径;</li></ul><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p>查看Mysql的版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="comment">--version</span></span><br></pre></td></tr></table></figure><p>查看所有database</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><p>查看所有table<br>    首先要使用 use 数据库名选中数据库;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>显示数据库表的属性等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>显示数据表的详细索引信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>显示Mysql数据库的管理系统的性能和统计信息。</p><ul><li><p>show table status from 数据库名;</p><p>例子：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> test_db;     //所有表的信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> test_db <span class="keyword">like</span> <span class="string">'test%'</span>;   //以test开头的表的信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> test_db <span class="keyword">like</span> <span class="string">'test%'</span>\G;  //查询结果按列打印</span><br></pre></td></tr></table></figure><h3 id="Mysql常用命令"><a href="#Mysql常用命令" class="headerlink" title="Mysql常用命令"></a>Mysql常用命令</h3><p>查看当前所有的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><p>打开指定的库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> database_name;</span><br></pre></td></tr></table></figure><p>查看当前库的所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>查看其他库的所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">from</span> database_name;</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table_name(</span><br><span class="line">    columns_name colunms_type,</span><br><span class="line">    columns_name colunms_type,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>查看表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc table_name;</span><br></pre></td></tr></table></figure><p>查看服务器的版本</p><ul><li>方式一：登陆到mysql服务端</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br></pre></td></tr></table></figure><ul><li>方式二：没有登陆到mysql服务端</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mysql --version     或者    #mysql -V</span><br></pre></td></tr></table></figure><p>设置字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> utf8;</span><br></pre></td></tr></table></figure><h3 id="Mysql之注释"><a href="#Mysql之注释" class="headerlink" title="Mysql之注释"></a>Mysql之注释</h3><ul><li>单行注释：#注释文字</li><li>多行注释：/* 注释文字 */</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql开篇 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
